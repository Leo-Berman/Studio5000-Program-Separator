	PROGRAM Fryer02_AddFreshOil (Description := "$NProgram=$'PH$'$NClass=$'SUPPLY.TANK:01.01.01$'$N",
	                             MAIN := "_000_Main",
	                             MODE := 0,
	                             DisableFlag := 0,
	                             UseAsFolder := 0)
		TAG
			AOI : CB_PHASE_AOI  := [[3],[3,10160000],[3,[0,1015]],[3],[1,0.00000000e+000],[3],[1,0.00000000e+000,0.00000000e+000],[3],[3,1016,101600,101599
					],[[3],[1],[1],[1],[1],[1],[1],[1]],[3,16,15,15],[1,[[1,0,0],[[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],0,0]],0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,[1,0.00000000e+000,0.00000000e+000],0.00000000e+000
					],[1,0.00000000e+000,0.00000000e+000]];
			Arb00 OF cDO[416] ;
			Arb01 OF cDO[337] ;
			Arb02 OF cDO[347] ;
			AutoRunClosePumpRecValve OF Phase.CM.AutoRun[9] (RADIX := Decimal);
			AutoRunInletValve OF Phase.CM.AutoRun[1] (RADIX := Decimal);
			AutoRunPump OF Phase.CM.AutoRun[10] (RADIX := Decimal);
			AutoRunTankDischargeValve OF Phase.CM.AutoRun[2] (RADIX := Decimal);
			CommunicationOk OF cDI[299] ;
			CommunicationOk_Delete OF cDI[285] ;
			EStop OF cDI[5] ;
			InletValve OF cDO[416] ;
			MakeUpTankLevelHigh OF cDI[297] ;
			MakeUpTankLevelHighHigh OF cDI[294] ;
			MakeUpTankLevelLow OF cDI[298] ;
			OIlTemperature OF cAI[182] ;
			OIT : CB_OIT  := [[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],0,0,[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],0,0,0,171384588,0,0,[0,0,0,0,0,0,0,0,0,0],[0,0,0,0],0,[0,[0,0,0]],[0,[0,0,0]],0,0,0];
			PathOn01 OF cDO[339] ;
			PathOn02 OF cDO[349] ;
			PathOn03 OF cDO[416] ;
			Phase OF cPHZ[16] (Usage := Public);
			PhaseClass OF cPHZ_CLASS[2] (Usage := Public);
			PhaseOther OF cPHZ[17] ;
			RequestStart OF cDI[291] ;
			RequestStartOther OF cDI[292] ;
			RequestStop OF cDI[290] ;
			RequestStopOther OF cDI[293] ;
			Silo01_Selected OF cDI[231] ;
			Silo02_Selected OF cDI[236] ;
			Tank01_DischargeTemperature OF cAI[146] ;
			Tank01_DischargeValve OF cDO[339] ;
			Tank01_Level OF cAI[143] ;
			Tank01_Pressure OF cAI[144] ;
			Tank01_Pump OF cDO[337] ;
			Tank01_PumpRecValve OF cDO[336] ;
			Tank01_Temperature OF cAI[145] ;
			Tank02_DischargeTemperature OF cAI[152] ;
			Tank02_DischargeValve OF cDO[349] ;
			Tank02_Level OF cAI[149] ;
			Tank02_Pressure OF cAI[150] ;
			Tank02_Pump OF cDO[347] ;
			Tank02_PumpRecValve OF cDO[346] ;
			Tank02_Temperature OF cAI[151] ;
			TankDischargePressure : CB_AI  := [1150,0,6,[[0,0,0,210115000,[0,5000,0]],[0,0,0,210115001,[0,5000,0]],[0,0,0,210115002,[0,5000,0]],[0,0,0,210115003,[0,5000,0]],[0,0,0
					,210115004,[0,5000,0]],[0,0,0,210115005,[0,5000,0]],[0,0,0,210115006,[0,5000,0]],[0,0,0,210115007,[0,0,0]]],[0,-1,0],[1],4.45982409e+000
					,4.00000000e+000,2.00000000e+001,4.16823578e+000,0.00000000e+000,0.00000000e+000,1.45037700e+002
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,4.45397377e+000,[4.68100000e+003,0.00000000e+000
					,[3536999,10000,0],0],[6.00000000e+000,1.00000000e+000,[2229831,2000,0],256],[2.00000000e+001,1.00000000e+000
					,[-1608760736,2000,2015],1280],[4.50000000e+001,1.00000000e+000,[2228946,2000,0],256],[5.50000000e+001
					,1.00000000e+000,[2770579,500,0],256],[4.33170319e+000,10000,1.14118195e+000,[-1071889824,9999999
					,3734],[1.00000000e+000,0.00000000e+000,[1848250,30000,0],256],[2.00000000e+000,0.00000000e+000,[-1608760736
					,30000,30022],1280]],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0],0.00000000e+000,[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[3537032,10000,0]],[2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0],[0,[0,0,0,0,0,0,0,0,0,0],[0,0,0],0,0,0,0],[[1,0,[1,0,0,0],[1,0,0,0,0,0],[1,0]],[3,4.45982409e+000,4.00000000e+000,2.00000000e+001
					,0.00000000e+000,1.45037700e+002,4.16823578e+000,-3.62594299e+001,9.06485653e+000],[3,4.16823578e+000
					],[3],[1,0.00000000e+000],[[3],[3],[3],[3],[3],[3],[3],[1]]],[0.00000000e+000,0,0.00000000e+000,0.00000000e+000,0],[63],0.00000000e+000
					,[1,[0,0,0],0.00000000e+000,0,1.00000000e+000,-4.22409058e-001,2.91240871e-001,4.59064484e+000
					,[-1071889794,2147483647,3710691],0]];
			TankDischargeTemperature : CB_AI  := [1152,0,8,[[0,0,0,210115200,[0,5000,0]],[0,0,0,210115201,[0,5000,0]],[0,0,0,210115202,[0,5000,0]],[0,0,0,210115203,[0,5000,0]],[0,0,0
					,210115204,[0,5000,0]],[0,0,0,210115205,[0,5000,0]],[0,0,0,210115206,[0,5000,0]],[0,0,0,210115207,[0,0,0]]],[0,-1,0],[1],1.09359900e+001
					,4.00000000e+000,2.00000000e+001,1.30049820e+002,0.00000000e+000,0.00000000e+000,3.00000000e+002
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,1.09359900e+001,[4.68100000e+003,0.00000000e+000
					,[3537044,10000,0],0],[1.05000000e+002,1.00000000e+000,[866845,2000,0],0],[1.10000000e+002,1.00000000e+000
					,[127179,2000,0],0],[1.40000000e+002,1.00000000e+000,[1822391,2000,0],0],[1.50000000e+002,1.00000000e+000
					,[0,2000,0],0],[1.29923248e+002,10000,2.37670898e-001,[-1071889880,9999999,3678],[1.00000000e+000,0.00000000e+000
					,[-1606675597,30000,30008],1280],[2.00000000e+000,0.00000000e+000,[-1606675597,30000,30016],1280]],[0
					,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0],0.00000000e+000,[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[3537087,10000,0]],[2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],[0,[0,0,0,0,0
					,0,0,0,0,0],[0,0,0],0,0,0,0],[[1,0,[1,0,0,0],[1,0,0,0,0,0],[1,0]],[3,1.09350977e+001,4.00000000e+000,2.00000000e+001,0.00000000e+000
					,3.00000000e+002,1.30033081e+002,-7.50000000e+001,1.87500000e+001],[3,1.30033081e+002],[3],[1,0.00000000e+000
					],[[3],[3],[3],[3],[3],[3],[3],[1]]],[0.00000000e+000,0,0.00000000e+000,0.00000000e+000,0],[63],0.00000000e+000,[1,[0,0,0],0.00000000e+000
					,0,1.00000000e+000,2.64985657e+000,8.83285522e-001,1.27383224e+002,[-1071889794,2147483647
					,1955351],0]];
			TankDischargeValve : CB_DO  := [1349,0,0,[[0,0,0,200134900,[0,0,0]],[0,0,0,200134901,[0,0,0]],[0,0,0,200134902,[0,0,0]]],[0,-1,-1],[303042817,0,1,1],[[2336940,3000,0],[-1608760736
					,3000,3031],[2338072,10000,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[0,0,0,0,0,0],[0,[0,0,0,0,0,0,0,0,0,0],[0,0,0],0,0,0,0],[[1],[3],[1,0,[1,0,0,0],[1,0,0,0,0,0],[1,0]],[3],[3,1349
					,134900,134899],[[3],[1],[1]],[1,0,0,[0,0,0]]],[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],[0],[[536870912,0,749],[2336536,3600000,70866],2.30000000e+001
					,0,0.00000000e+000,0.00000000e+000,3],[[[0,0,0],[0,0,0]],[[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0]]]];
			TankDispensingIndicator OF cDO[412] ;
			TankLevel : CB_AI  := [1149,0,5,[[0,0,0,210114900,[0,5000,0]],[0,0,0,210114901,[0,5000,0]],[0,0,0,210114902,[0,5000,0]],[0,0,0,210114903,[0,5000,0]],[0,0,0
					,210114904,[0,5000,0]],[0,0,0,210114905,[0,5000,0]],[0,0,0,210114906,[0,5000,0]],[0,0,0,210114907,[0,0,0]]],[0,-1,0],[1],7.39169025e+000
					,4.00000000e+000,2.00000000e+001,9.75739746e+001,0.00000000e+000,0.00000000e+000,2.40000000e+002
					,4.00000000e+000,0.00000000e+000,0.00000000e+000,7.39169025e+000,[4.68100000e+003,0.00000000e+000
					,[3537044,10000,0],0],[1.60000000e+001,1.00000000e+000,[3527702,2000,0],0],[5.00000000e+001,1.00000000e+000
					,[3527702,2000,0],0],[2.20000000e+002,1.00000000e+000,[108133,2000,0],0],[2.30000000e+002,1.00000000e+000
					,[0,2000,0],0],[9.74044037e+001,10000,7.23449707e-001,[-1071889880,9999999,3678],[1.00000000e+000,0.00000000e+000
					,[-1608760792,30000,30021],1280],[2.00000000e+000,0.00000000e+000,[-1608760792,30000,30018],1280]],[0
					,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0],0.00000000e+000,[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[3537087,10000,0]],[2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],[0,[0,0,0,0,0
					,0,0,0,0,0],[0,0,0],0,0,0,0],[[1,0,[1,0,0,0],[1,0,0,0,0,0],[1,0]],[3,7.39169025e+000,4.00000000e+000,2.00000000e+001,0.00000000e+000
					,4.01459991e+002,8.51017609e+001,-1.00364990e+002,2.50912495e+001],[3,9.75739746e+001],[3],[1,0.00000000e+000
					],[[3],[3],[3],[3],[3],[3],[3],[1]]],[0.00000000e+000,0,0.00000000e+000,0.00000000e+000,0],[63],0.00000000e+000,[1,[0,0,0],0.00000000e+000
					,0,1.00000000e+000,-1.41054535e+000,5.87727249e-001,9.89845200e+001,[-1071889841,2147483647
					,5130905],0]];
			TankPump : CB_DO  := [1347,0,0,[[0,0,0,200134700,[0,0,0]],[0,0,0,200134701,[0,0,0]],[0,0,0,200134702,[0,0,0]]],[0,-1,-1],[17829137,0,4,1],[[-1608760736,3000
					,3032],[138646,3000,0],[3785549,10000,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[0,0,0,0,0,0],[0,[0,0,0,0,0,0,0,0,0,0],[268435456,10,0],0,0,0,-1],[[1],[3],[7,-1
					,[0,0,10,0],[0,1016,-1,9,10,9],[0,0]],[3],[3,1347,134700,134699],[[3],[3],[3]],[1,0,0,[0,0,0]]],[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],[0],[[536870912,0,20],[-1071889834
					,3600000,881249],1.01500000e+003,0,0.00000000e+000,0.00000000e+000,7],[[[0,0,0],[0,0,0]],[[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0
					,0]]]];
			TankPumpRecValve : CB_DO  := [1346,0,0,[[0,0,0,200134600,[0,0,0]],[0,0,0,200134601,[0,0,0]],[0,0,0,200134602,[0,0,0]]],[0,-1,-1],[286263553,0,2,1],[[-1608760736,3000
					,3043],[2335312,3000,0],[2336398,10000,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[0,0,0,134664,0,0],[0,[0,0,0,0,0,0,0,0,0,0],[0,0,0],0,0,0,0],[[1],[3],[1,0,[1,0,0,0
					],[1,0,0,0,0,0],[1,0]],[3],[3,1346,134600,134599],[[3],[1],[1]],[1,0,0,[0,0,0]]],[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],[0],[[536870912,0,745],[2334907,3600000,985706
					],2.20000000e+001,0,0.00000000e+000,0.00000000e+000,3],[[[0,0,0],[0,0,0]],[[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0]]]];
			TankReadyIndicator OF cDO[413] ;
			TankTemperature : CB_AI  := [1151,0,8,[[0,0,0,210115100,[0,5000,0]],[0,0,0,210115101,[0,5000,0]],[0,0,0,210115102,[0,5000,0]],[0,0,0,210115103,[0,5000,0]],[0,0,0
					,210115104,[0,5000,0]],[0,0,0,210115105,[0,5000,0]],[0,0,0,210115106,[0,5000,0]],[0,0,0,210115107,[0,0,0]]],[0,-1,0],[1],1.68909378e+001
					,4.00000000e+000,2.00000000e+001,1.20852539e+002,0.00000000e+000,0.00000000e+000,1.50000000e+002
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,1.68910637e+001,[4.68100000e+003,0.00000000e+000
					,[3537044,10000,0],0],[1.15000000e+002,1.00000000e+000,[3527702,2000,0],256],[1.20000000e+002,1.00000000e+000
					,[552681,2000,0],256],[1.30000000e+002,1.00000000e+000,[1622287,2000,0],256],[1.40000000e+002,1.00000000e+000
					,[3101504,2000,0],256],[1.20853470e+002,10000,1.50146484e-002,[-1071889824,9999999,3734],[1.00000000e+000
					,0.00000000e+000,[-1608760736,30000,30008],1280],[2.00000000e+000,0.00000000e+000,[-1608760736
					,30000,30008],1280]],[0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0],0.00000000e+000,[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[3537087,10000,0]],[2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0],[0,[0,0,0,0,0,0,0,0,0,0],[0,0,0],0,0,0,0],[[1,0,[1,0,0,0],[1,0,0,0,0,0],[1,0]],[3,1.68909378e+001,4.00000000e+000,2.00000000e+001
					,0.00000000e+000,1.50000000e+002,1.20852539e+002,-3.75000000e+001,9.37500000e+000],[3,1.20852539e+002
					],[3],[1,0.00000000e+000],[[3],[3],[3],[3],[3],[3],[3],[1]]],[0.00000000e+000,0,0.00000000e+000,0.00000000e+000,0],[63],0.00000000e+000
					,[1,[0,0,0],0.00000000e+000,0,1.00000000e+000,-1.05270386e-001,7.01802522e-002,1.20957809e+002
					,[-1071889794,2147483647,7683805],0]];
			Unit OF cUNIT[42] ;
			UnitTank01 OF cUNIT[34] ;
			UnitTank02 OF cUNIT[35] ;
			Unit_DELETE OF cUNIT[40] ;
			ValidPath OF Phase.USER.STAT.1 (RADIX := Decimal);
		END_TAG

		ROUTINE _000_FirstScan 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'SUPPLY.TANK:01.01.01$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.TYPE$'$N"
				    "Function=$'TYPE$'$N"
				    "";
				N: MOV(2,PhaseClass.TYPE);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.INDEX.SETTING$'$N"
				    "Function=$'INDEX.SETTING$'$N"
				    "";
				N: MOV(Unit.ARRAY_INDEX,Phase.INDEX)MOV(PhaseClass.TYPE,Phase.TYPE)MOV(PhaseClass.ID,Phase.CLASS)COP(PhaseClass.NAME,Phase.CLASS_NAME,1)COP(PhaseClass.TYPE_NAME,Phase.TYPE_NAME,1);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.DISPLAY.MASK.SETTING$'$N"
				    "Function=$'DISPLAY.MASK.SETTING$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.CLASS.PARAMETERS$'$N"
				    "Function=$'CLASS.PARAMETERS$'$N"
				    "";
				N: PhaseClassParameter(AOI.PhaseClassParameter,PhaseClass,Phase.USER,Phase.DISPLAY_MASK,Phase.TYPE_MASK);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.SECTION.FIRSTSCAN.SETTING$'$N"
				    "Function=$'STANDARD.PHASE.SECTION.FIRSTSCAN.SETTING$'$N"
				    "";
				N: PhaseClassParameter(AOI.PhaseClassParameter,PhaseClass,Phase.USER,Phase.DISPLAY_MASK,Phase.TYPE_MASK);
		END_ROUTINE

		ROUTINE _000_Main 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'SUPPLY.TANK:01.01.01$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.FIRSTSCAN$'$N"
				    "Function=$'EXECUTE.FIRSTSCAN$'$N"
				    "";
				N: XIC(S:FS)JSR(_000_FirstScan,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.WATCHWINDOW.STATE$'$N"
				    "Function=$'WATCHWINDOW.PHASE.STATE$'$N"
				    "";
				N: XIC(Phase.STATE.IDLE)XIC(Phase.STATE.RUNNING)XIC(Phase.STATE.HELD)XIC(Phase.STATE.COMPLETE)XIC(Phase.STATE.ABORTED)XIC(Phase.STATE.STOPPED)NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.WATCHWINDOW.STATE.TRANSITION$'$N"
				    "Function=$'WATCHWINDOW.PHASE.STATE.TRANSITION$'$N"
				    "";
				N: XIC(Phase.STATE.HOLDING)XIC(Phase.STATE.RESTARTING)XIC(Phase.STATE.ABORTING)XIC(Phase.STATE.STOPPING)NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.WATCHWINDOW.CONTROL$'$N"
				    "Function=$'WATCHWINDOW.PHASE.CONTROL$'$N"
				    "";
				N: [XIC(Phase.CMD.START) XIC(Phase.CMD.HOLD) XIC(Phase.CMD.RESTART) XIC(Phase.CMD.STOP) XIC(Phase.CMD.ABORT) XIC(Phase.CMD.RESET) ,MOV(Phase.STATE_NO,Phase.STATE_NO) MOV(Phase.STEP_INDEX,Phase.STEP_INDEX) MOV(Phase.MSG.FAULT,Phase.MSG.FAULT) ]NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.PERMISSIVES.FAULTS.MESSAGING$'$N"
				    "Function=$'EXECUTE.PERMISSIVES.FAULTS.MESSAGING$'$N"
				    "";
				N: JSR(_120_PermissiveFaultAndMessaging,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.AOI$'$N"
				    "Function=$'AOI$'$N"
				    "";
				N: PhaseMode(AOI.Mode,Phase,cPHZ[0].MSG)PhaseCommon(AOI.Common,Phase)PhaseStepIndex(AOI.StepIndex,Phase)PhaseStateTransition(AOI.StateTransition,Phase.CMD,Phase.STAT,Phase.STATE,Phase.STATE_NO);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.STEPCONTROL$'$N"
				    "Function=$'EXECUTE.STEPCONTROL$'$N"
				    "";
				N: JSR(_050_StepControl,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.CONTROLMODULE$'$N"
				    "Function=$'EXECUTE.CONTROLMODULE$'$N"
				    "";
				N: JSR(_110_ControlModule,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.ALARMING$'$N"
				    "Function=$'EXECUTE.ALARMING$'$N"
				    "";
				N: JSR(_130_Alarming,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.STEP.MAPPING$'$N"
				    "Function=$'STEP.MAPPING$'$N"
				    "";
				N: PhaseStepMapping(AOI.StepMapping,Phase);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.BYPASS$'$N"
				    "Function=$'BYPASS$'$N"
				    "";
				N: PhaseBypass(AOI.Bypass,Phase);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.ARBITRATION$'$N"
				    "Function=$'EXECUTE.ARBITRATION$'$N"
				    "";
				N: JSR(_100_Arbitration,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.MAIN.EXTENDED.FUNCTION$'$N"
				    "Function=$'EXTENDED.FUNCTION$'$N"
				    "";
				N: NOP();
		END_ROUTINE

		ROUTINE _050_StepControl 
				N: NOP();
				N: XIC(cSETUP.SIMULATION.Enabled)XIC(cSETUP.SIMULATION.PHASE)RET();
				N: XIO(Phase.STATE.IDLE)[XIC(RequestStartOther.STAT.ON) ,EQU(PhaseOther.STEP_INDEX,2000) ]OTL(Phase.CMD.ABORT);
				N: XIC(Phase.STAT.AUTO)XIC(Phase.STATE.IDLE)XIC(RequestStart.STAT.ON)OTL(Phase.CMD.START);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,1)MOV(2000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,2000)GEQ(Phase.STEP_TMR.CurrentStepIndex.ACC,Phase.STEP_TMR.RECORD.PRE)MOV(3000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,3000)XIC(Phase.STAT.PERMISSIVE)MOV(3010,Phase.STEP_INDEX_GOTO);
				RC: "When fryer make up tank is low or start command from oil system$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,3010)XIC(Phase.STAT.PERMISSIVE)XIC(RequestStart.STAT.ON)XIO(RequestStop.STAT.ON)MOV(4000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4000)MOV(4010,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4010)MOV(4020,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4020)MOV(4030,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4030)[XIC(InletValve.STAT.ON_OPEN) XIC(TankDischargeValve.STAT.ON_OPEN) ,GEQ(Phase.STEP_TMR.CurrentStepIndex.ACC,5000) ]MOV(4040,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4040)[XIC(TankPumpRecValve.STAT.OFF_CLOSED) ,GEQ(Phase.STEP_TMR.CurrentStepIndex.ACC,5000) ]MOV(4100,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4100)MOV(5000,Phase.STEP_INDEX_GOTO);
				RC: "STOP SENDING OIL$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)LIM(4010,Phase.STEP_INDEX,5999)XIC(RequestStop.STAT.ON)MOV(6000,Phase.STEP_INDEX_GOTO);
				RC: "When recirc valve is open, close inlet valve$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,6000)XIC(TankPumpRecValve.STAT.ON_OPEN)MOV(6010,Phase.STEP_INDEX_GOTO);
				RC: "Close inlet valve$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,6010)XIC(TankDischargeValve.STAT.OFF_CLOSED)MOV(6020,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,6020)XIC(InletValve.STAT.OFF_CLOSED)MOV(7000,Phase.STEP_INDEX_GOTO);
				RC: "Complete the phase if we have been settling for too long waiting for valves to cycle properly$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)LIM(6000,Phase.STEP_INDEX,7000)GEQ(Phase.STEP_TMR.CurrentStepIndex.ACC,Phase.STEP_TMR.SETTLE.PRE)MOV(3010,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,8000)MOV(9000,Phase.STEP_INDEX_GOTO);
				RC: "Template=$'PHASE.PHASE.MATERIAL.BLOWER.TRANSFER.TO.HOPPER$'$N"
				    "Function=$'RUNG.STEPCONTROL.COMPLETE$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,10000)OTE(Phase.STAT.RUNNING_COMPLETE);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.STEPCTRL.SECTION.HOLDING$'$N"
				    "Function=$'STEP.CONTROL.SECTION.HOLDING$'$N"
				    "";
				N: NOP();
				RC: "if the phase was ending, then let it just start from where it left off$N"
				    "if the phase was active, then go back to permissive and start over$N"
				    "if the phase was setting, then skip setting and go back to complete the phase$N"
				    "$N"
				    "";
				N: XIC(Phase.STATE.Oneshot.Holding)[GEQ(Phase.STEP_INDEX,7000) MOV(Phase.STEP_INDEX,Phase.STEP_INDEX_GOTO_ON_RESTART) ,LES(Phase.STEP_INDEX,6000) MOV(3000,Phase.STEP_INDEX_GOTO_ON_RESTART) ,LIM(6000,Phase.STEP_INDEX,6999) MOV(7000,Phase.STEP_INDEX_GOTO_ON_RESTART) ,LIM(4020,Phase.STEP_INDEX,5999) MOV(6000,Phase.STEP_INDEX_GOTO) ];
				RC: "Template=$'PHASE.PHASE.MATERIAL.TANK.PUMP.TO.MIXER$'$N"
				    "Function=$'RUNG.STEPCONTROL.HOLDING.RECORDSTEP$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.HOLDING)EQU(Phase.STEP_INDEX,2000)[GEQ(Phase.STEP_TMR.CurrentStepIndex.ACC,Phase.STEP_TMR.RECORD.PRE) MOV(3000,Phase.STEP_INDEX_GOTO) ,FLL(0,Phase.ACTUAL[0],5) ];
				RC: "When recirc valve is open, close inlet valve$N"
				    "";
				N: XIC(Phase.STATE.HOLDING)EQU(Phase.STEP_INDEX,6000)XIC(TankPumpRecValve.STAT.ON_OPEN)MOV(6010,Phase.STEP_INDEX_GOTO);
				RC: "Close inlet valve$N"
				    "";
				N: XIC(Phase.STATE.HOLDING)EQU(Phase.STEP_INDEX,6010)XIC(TankDischargeValve.STAT.OFF_CLOSED)MOV(6020,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.HOLDING)EQU(Phase.STEP_INDEX,6020)XIC(InletValve.STAT.OFF_CLOSED)MOV(7000,Phase.STEP_INDEX_GOTO);
				RC: "Template=$'PHASE.PHASE.MATERIAL.TANK.PUMP.TO.MIXER$'$N"
				    "Function=$'RUNG.STEPCONTROL.HOLDING.COMPLETE$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.HOLDING)[[XIC(Phase.STEP_TMR.HOLDING.DN) ,EQU(Phase.STEP_INDEX,7000) ] OTE(Phase.STAT.HOLDING_COMPLETE) ,TON(Phase.STEP_TMR.HOLDING,?,?) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.STEPCTRL.SECTION.RESTARTING$'$N"
				    "Function=$'STEP.CONTROL.SECTION.RESTARTING$'$N"
				    "";
				N: NOP();
				RC: "Template=$'PHASE.PHASE.MATERIAL.TANK.PUMP.TO.MIXER$'$N"
				    "Function=$'RUNG.STEPCONTROL.RESTARTING$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.Oneshot.Restarting)[LES(Phase.STEP_INDEX,5999) MOV(3000,Phase.STEP_INDEX_GOTO) ,LIM(6000,Phase.STEP_INDEX,6999) MOV(7000,Phase.STEP_INDEX_GOTO) ,GRT(Phase.STEP_INDEX_GOTO_ON_RESTART,0) MOV(Phase.STEP_INDEX_GOTO_ON_RESTART,Phase.STEP_INDEX_GOTO) MOV(-1,Phase.STEP_INDEX_GOTO_ON_RESTART) ];
				RC: "Wait 2 seconds in restarting to allow for fault resets$N"
				    "";
				N: XIC(Phase.STATE.RESTARTING)[XIC(Phase.STEP_TMR.RESTARTING.DN) OTE(Phase.STAT.RESTARTING_COMPLETE) ,TON(Phase.STEP_TMR.RESTARTING,?,?) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.STEPCTRL.SECTION.STOPPING$'$N"
				    "Function=$'STEP.CONTROL.SECTION.STOPPING$'$N"
				    "";
				N: NOP();
				RC: "if the phase was ending, then let it just start from where it left off$N"
				    "if the phase was active, then go back to permissive and start over$N"
				    "if the phase was setting, then skip setting and go back to complete the phase$N"
				    "$N"
				    "";
				N: XIC(Phase.STATE.Oneshot.Stopping)[[GEQ(Phase.STEP_INDEX,6020) ,LES(Phase.STEP_INDEX,4019) ] MOV(10000,Phase.STEP_INDEX_GOTO) ,LIM(4020,Phase.STEP_INDEX,5999) MOV(6000,Phase.STEP_INDEX_GOTO) ];
				RC: "When recirc valve is open, close inlet valve$N"
				    "";
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,6000)XIC(TankPumpRecValve.STAT.ON_OPEN)MOV(6010,Phase.STEP_INDEX_GOTO);
				RC: "Close inlet valve$N"
				    "";
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,6010)XIC(TankDischargeValve.STAT.OFF_CLOSED)MOV(6020,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,6020)XIC(InletValve.STAT.OFF_CLOSED)GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,Phase.USER.SETTINGS[3])MOV(7000,Phase.STEP_INDEX_GOTO);
				RC: "Complete the phase if we have been settling for too long waiting for valves to cycle properly$N"
				    "";
				N: XIC(Phase.STATE.STOPPING)LIM(6000,Phase.STEP_INDEX,6999)GEQ(Phase.STEP_TMR.CurrentStepIndex.ACC,Phase.STEP_TMR.SETTLE.PRE)MOV(7000,Phase.STEP_INDEX_GOTO);
				RC: "Template=$'PHASE.PHASE.MATERIAL.TANK.PUMP.TO.MIXER$'$N"
				    "Function=$'RUNG.STEPCONTROL.STOPPING.CALCULATE.PREACT$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,7000)MOV(8000,Phase.STEP_INDEX_GOTO);
				RC: "Template=$'PHASE.PHASE.MATERIAL.TANK.PUMP.TO.MIXER$'$N"
				    "Function=$'RUNG.STEPCONTROL.STOPPING.REPORTING$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.STOPPING)LIM(8000,Phase.STEP_INDEX,8999)MOV(9000,Phase.STEP_INDEX_GOTO);
				RC: "Template=$'PHASE.PHASE.MATERIAL.TANK.PUMP.TO.MIXER$'$N"
				    "Function=$'RUNG.STEPCONTROL.STOPPING.CHECKTOLERANCE$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.STOPPING)LIM(9000,Phase.STEP_INDEX,9999)MOV(10000,Phase.STEP_INDEX_GOTO);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.STEPCTRL.SECTION.STOPPING.COMPLETE$'$N"
				    "Function=$'STEP.CONTROL.SECTION.STOPPING$'$N"
				    "";
				N: NOP();
				RC: "Template=$'PHASE.PHASE.MATERIAL.TANK.PUMP.TO.MIXER$'$N"
				    "Function=$'RUNG.STEPCONTROL.STOPPING.COMPLETE$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,10000)OTE(Phase.STAT.STOPPING_COMPLETE);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.STEPCTRL.SECTION.ABORTING$'$N"
				    "Function=$'STEP.CONTROL.SECTION.ABORTING$'$N"
				    "";
				N: NOP();
				RC: "Template=$'PHASE.PHASE.MATERIAL.TANK.PUMP.TO.MIXER$'$N"
				    "Function=$'RUNG.STEPCONTROL.ABORTING$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.Oneshot.Aborting)MOV(10000,Phase.STEP_INDEX_GOTO);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.STEPCTRL.SECTION.ABORTING.COMPLETE$'$N"
				    "Function=$'STEP.CONTROL.SECTION.ABORTING.COMPLETE$'$N"
				    "";
				N: NOP();
				RC: "Template=$'PHASE.PHASE.MATERIAL.TANK.PUMP.TO.MIXER$'$N"
				    "Function=$'RUNG.STEPCONTROL.ABORTING.COMPLETE$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.ABORTING)EQU(Phase.STEP_INDEX,10000)OTE(Phase.STAT.ABORTING_COMPLETE);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.STEPCTRL.SECTION.RESET$'$N"
				    "Function=$'STEP.CONTROL.SECTION.RESET$'$N"
				    "";
				N: NOP();
				RC: "Template=$'PHASE.PHASE.MATERIAL.TANK.PUMP.TO.MIXER$'$N"
				    "Function=$'RUNG.STEPCONTROL.RESET$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.Oneshot.Idle)MOV(0,Phase.STEP_INDEX_GOTO_ON_RESTART)OTU(Phase.STAT.OUT_TOL)OTU(Phase.STAT.ACK_REQUIRED)OTU(Phase.PREACT.PreactOutOfLimitHigh)OTU(Phase.PREACT.PreactOutOfLimitLow);
				N: XIC(Phase.STATE.DONE)OTL(Phase.CMD.RESET);
		END_ROUTINE

		ROUTINE _100_Arbitration 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'SUPPLY.TANK:01.01.01$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.ARBITRATION.STATUS$'$N"
				    "Function=$'ARBITRATION.STATUS$'$N"
				    "";
				N: [XIC(Phase.NEEDS.LIST[0].ACQUIRED) ,EQU(Phase.NEEDS.LIST[0].OBJECT_INDEX,0) ][XIC(Silo01_Selected.STAT.ON) XIC(Phase.NEEDS.LIST[1].ACQUIRED) ,XIC(Silo01_Selected.STAT.OFF) EQU(Phase.NEEDS.LIST[1].OBJECT_INDEX,0) ][XIC(Silo02_Selected.STAT.ON) XIC(Phase.NEEDS.LIST[2].ACQUIRED) ,XIC(Silo02_Selected.STAT.OFF) EQU(Phase.NEEDS.LIST[2].OBJECT_INDEX,0) ][XIC(Phase.NEEDS.LIST[3].ACQUIRED) ,EQU(Phase.NEEDS.LIST[3].OBJECT_INDEX,0) ][XIC(Phase.NEEDS.LIST[4].ACQUIRED) ,EQU(Phase.NEEDS.LIST[4].OBJECT_INDEX,0) ]OTE(Phase.NEEDS.OWNS_ALL_REQUIRED);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.ARBITRATION.START$'$N"
				    "Function=$'ARBITRATION.START$'$N"
				    "";
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.RESTARTING) ]EQU(Phase.STEP_INDEX,3000)XIC(Phase.STEP.FirstScanInStepIndex)OTL(Phase.NEEDS.StartArbitration);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.ARBITRATION.RELEASE$'$N"
				    "Function=$'ARBITRATION.RELEASE$'$N"
				    "";
				N: [XIC(Phase.STATE.IDLE) ,XIC(Phase.STATE.RUNNING) [EQU(Phase.STEP_INDEX,3010) ,LIM(7000,Phase.STEP_INDEX,10000) ] ,XIC(Phase.STATE.DONE) ,XIC(Phase.STATE.HELD) ]OTE(Phase.NEEDS.Release);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.ARBITRATION.INITIALIZE$'$N"
				    "Function=$'ARBITRATION.INITIALIZE$'$N"
				    "";
				N: [XIC(Phase.NEEDS.StartArbitration) MOV(0,Phase.NEEDS.LIST_INDEX) OTL(Phase.NEEDS.Arbitrating) OTU(Phase.NEEDS.StartArbitration) ,XIC(Phase.NEEDS.Arbitrating) XIC(Phase.NEEDS.OWNS_ALL_REQUIRED) OTU(Phase.NEEDS.Arbitrating) ];
				N: [EQU(Arb00.ARB.OWNER,Phase.ID) OTE(Phase.NEEDS.LIST[0].ACQUIRED) ,XIC(Phase.NEEDS.Arbitrating) EQU(Phase.NEEDS.LIST_INDEX,0) [XIO(Phase.NEEDS.LIST[0].REQUESTED) EQU(Arb00.ARB.RQ,0) MOV(Phase.ID,Arb00.ARB.RQ) OTL(Phase.NEEDS.LIST[0].REQUESTED) ,XIC(Phase.NEEDS.LIST[0].ACQUIRED) [OTU(Phase.NEEDS.LIST[0].REQUESTED) ,XIC(Silo01_Selected.STAT.ON) MOV(1,Phase.NEEDS.LIST_INDEX) ,XIC(Silo02_Selected.STAT.ON) MOV(2,Phase.NEEDS.LIST_INDEX) ] ] ,XIC(Phase.NEEDS.Release) EQU(Arb00.ARB.OWNER,Phase.ID) MOV(Phase.ID,Arb00.ARB.RELEASE) ,MOV(cCOMMON.DO_OBJECT_NUMBER,Phase.NEEDS.LIST[0].OBJECT_TYPE) MOV(Arb00.ID,Phase.NEEDS.LIST[0].OBJECT_INDEX) ];
				RC: "Template=$'PHASE.SUPPLY.TANK:01.01.01$'$N"
				    "Function=$'ARBITRATION.00$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: [EQU(Arb01.ARB.OWNER,Phase.ID) OTE(Phase.NEEDS.LIST[1].ACQUIRED) ,XIC(Phase.NEEDS.Arbitrating) EQU(Phase.NEEDS.LIST_INDEX,1) [XIO(Phase.NEEDS.LIST[1].REQUESTED) EQU(Arb01.ARB.RQ,0) MOV(Phase.ID,Arb01.ARB.RQ) OTL(Phase.NEEDS.LIST[1].REQUESTED) ,XIC(Phase.NEEDS.LIST[1].ACQUIRED) OTU(Phase.NEEDS.LIST[1].REQUESTED) MOV(3,Phase.NEEDS.LIST_INDEX) ] ,XIC(Phase.NEEDS.Release) EQU(Arb01.ARB.OWNER,Phase.ID) MOV(Phase.ID,Arb01.ARB.RELEASE) ,MOV(cCOMMON.DO_OBJECT_NUMBER,Phase.NEEDS.LIST[1].OBJECT_TYPE) MOV(Arb01.ID,Phase.NEEDS.LIST[1].OBJECT_INDEX) ];
				N: [EQU(Arb02.ARB.OWNER,Phase.ID) OTE(Phase.NEEDS.LIST[2].ACQUIRED) ,XIC(Phase.NEEDS.Arbitrating) EQU(Phase.NEEDS.LIST_INDEX,2) [XIO(Phase.NEEDS.LIST[2].REQUESTED) EQU(Arb02.ARB.RQ,0) MOV(Phase.ID,Arb02.ARB.RQ) OTL(Phase.NEEDS.LIST[2].REQUESTED) ,XIC(Phase.NEEDS.LIST[2].ACQUIRED) OTU(Phase.NEEDS.LIST[2].REQUESTED) MOV(3,Phase.NEEDS.LIST_INDEX) ] ,XIC(Phase.NEEDS.Release) EQU(Arb02.ARB.OWNER,Phase.ID) MOV(Phase.ID,Arb02.ARB.RELEASE) ,MOV(cCOMMON.DO_OBJECT_NUMBER,Phase.NEEDS.LIST[2].OBJECT_TYPE) MOV(Arb02.ID,Phase.NEEDS.LIST[2].OBJECT_INDEX) ];
				N: MOV(0,Phase.NEEDS.LIST[3].OBJECT_TYPE)MOV(0,Phase.NEEDS.LIST[3].OBJECT_INDEX);
				N: MOV(0,Phase.NEEDS.LIST[4].OBJECT_TYPE)MOV(0,Phase.NEEDS.LIST[4].OBJECT_INDEX);
		END_ROUTINE

		ROUTINE _110_ControlModule 
				N: NOP();
				N: XIC(cSETUP.SIMULATION.Enabled)XIC(cSETUP.SIMULATION.PHASE)RET();
				N: [XIC(Silo01_Selected.STAT.ON) COP(Tank01_Temperature,TankTemperature,1) [COP(Tank01_Pump,TankPump,1) COP(Tank01_PumpRecValve,TankPumpRecValve,1) COP(Tank01_DischargeValve,TankDischargeValve,1) ,COP(Tank01_DischargeTemperature,TankDischargeTemperature,1) COP(Tank01_Level,TankLevel,1) COP(Tank01_Pressure,TankDischargePressure,1) ] ,XIC(Silo02_Selected.STAT.ON) COP(Tank02_Temperature,TankTemperature,1) [COP(Tank02_Pump,TankPump,1) COP(Tank02_PumpRecValve,TankPumpRecValve,1) COP(Tank02_DischargeValve,TankDischargeValve,1) ,COP(Tank02_DischargeTemperature,TankDischargeTemperature,1) COP(Tank02_Level,TankLevel,1) COP(Tank02_Pressure,TankDischargePressure,1) ] ];
				RC: "Close recirc valve after inlet valve is closed$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)LIM(4040,Phase.STEP_INDEX,5999)OTE(AutoRunClosePumpRecValve);
				RC: "Open inlet valve while recirc valve is still open, and then when confirmed open, goto next step and close recirc valve$N"
				    "";
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.HOLDING) ,XIC(Phase.STATE.STOPPING) ,XIC(Phase.STATE.ABORTING) ]LIM(4030,Phase.STEP_INDEX,6000)OTE(AutoRunTankDischargeValve);
				RC: "Open inlet valve while recirc valve is still open, and then when confirmed open, goto next step and close recirc valve$N"
				    "";
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.HOLDING) ,XIC(Phase.STATE.STOPPING) ,XIC(Phase.STATE.ABORTING) ]LIM(4030,Phase.STEP_INDEX,6010)OTE(AutoRunInletValve);
				RC: "This just sets the speed of the pump to the phase settings.$N"
				    "pump is always running$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)LIM(4100,Phase.STEP_INDEX,5000)OTE(AutoRunPump);
				RC: "AUTO RESTART ON FAULT$N"
				    "Communication Fault";
				N: XIC(Phase.STATE.HELD)CMP(40+100*Phase.ID = Phase.MSG.FAULT)XIC(CommunicationOk.STAT.ON)OTL(Phase.CMD.RESTART);
				RC: "AUTO RESTART ON FAULT$N"
				    "High High Level$N"
				    "";
				N: XIC(Phase.STATE.HELD)CMP(51+100*Phase.ID = Phase.MSG.FAULT)XIC(RequestStart.STAT.ON)OTL(Phase.CMD.RESTART);
				RC: "AUTO RESTART ON FAULT$N"
				    "ValveFaults - compressor goes down or loses pressure sometimes$N"
				    "$N"
				    "$N"
				    "";
				N: XIC(Phase.STATE.HELD)[CMP(34+100*Phase.ID = Phase.MSG.FAULT) ,CMP(37+100*Phase.ID = Phase.MSG.FAULT) ,CMP(39+100*Phase.ID = Phase.MSG.FAULT) ]XIC(RequestStart.STAT.ON)OTL(Phase.CMD.RESTART);
				RC: "AUTO RESTART ON FAULT$N"
				    "Analog Input Faults$N"
				    "$N"
				    "$N"
				    "";
				N: XIC(Phase.STATE.HELD)[CMP(22+100*Phase.ID = Phase.MSG.FAULT) ,CMP(32+100*Phase.ID = Phase.MSG.FAULT) ]XIC(RequestStart.STAT.ON)OTL(Phase.CMD.RESTART);
				RC: "AUTO RESTART ON FAULT$N"
				    "Analog Input Faults$N"
				    "$N"
				    "$N"
				    "";
				N: XIC(Phase.STATE.HELD)CMP(38+100*Phase.ID = Phase.MSG.FAULT)[XIO(OIlTemperature.Lo.ACTIVE) ,XIC(EZSC_TT510_Not_Installed) ]XIO(TankTemperature.Lo.ACTIVE)XIO(TankDischargeTemperature.Lo.ACTIVE)OTL(Phase.CMD.RESTART);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.CONTROLMODULE.RESET.CM$'$N"
				    "Function=$'CONTROLMODULE.RESET.CM$'$N"
				    "";
				N: [XIC(Phase.CMD.START) ,XIC(Phase.CMD.RESTART) ][OTL(Tank01_PumpRecValve.CMD.RESET) OTL(Tank01_Pump.CMD.RESET) OTL(Tank01_DischargeValve.CMD.RESET) ,OTL(Tank02_PumpRecValve.CMD.RESET) OTL(Tank02_Pump.CMD.RESET) OTL(Tank02_DischargeValve.CMD.RESET) ,OTL(TankDispensingIndicator.CMD.RESET) OTL(TankReadyIndicator.CMD.RESET) OTL(InletValve.CMD.RESET) ];
		END_ROUTINE

		ROUTINE _120_PermissiveFaultAndMessaging 
				N: NOP();
				RC: "$N"
				    "";
				N: OTE(ValidPath);
				RC: "$N"
				    "";
				N: [MOV(0,Phase.MSG.PERM) ,LIM(2000,Phase.STEP_INDEX,3000) XIC(Silo02_Selected.STAT.ON) NEQ(Arb02.ARB.OWNER,Phase.ID) MOV(13,Phase.MSG.PERM) ,LIM(2000,Phase.STEP_INDEX,3000) XIC(Silo01_Selected.STAT.ON) NEQ(Arb01.ARB.OWNER,Phase.ID) MOV(12,Phase.MSG.PERM) ,LIM(2000,Phase.STEP_INDEX,3000) NEQ(Arb00.ARB.OWNER,Phase.ID) MOV(11,Phase.MSG.PERM) ,XIO(InletValve.STAT.AUTO) MOV(1,Phase.MSG.PERM) ,XIO(TankDischargeValve.STAT.AUTO) MOV(2,Phase.MSG.PERM) ,XIO(TankPump.STAT.AUTO) MOV(3,Phase.MSG.PERM) ,XIO(TankPumpRecValve.STAT.AUTO) MOV(4,Phase.MSG.PERM) ,XIC(TankLevel.LoLo.ACTIVE) MOV(36,Phase.MSG.PERM) ,EQU(Phase.MSG.PERM,0) OTE(Phase.STAT.PERMISSIVE) ];
				RC: "$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.MSG.FAULT,0)[XIC(EStop.STAT.FAULT) MOV(21,Phase.MSG.FAULT) ,XIC(MakeUpTankLevelHighHigh.STAT.ON) MOV(51,Phase.MSG.FAULT) ,XIC(CommunicationOk.STAT.OFF) MOV(40,Phase.MSG.FAULT) ,XIC(TankDischargePressure.STAT.FAULT) MOV(22,Phase.MSG.FAULT) ,XIC(TankDischargePressure.HiHi.ACTIVE) MOV(23,Phase.MSG.FAULT) ,EQU(Phase.STEP_INDEX,5000) XIC(TankDischargePressure.LoLo.ACTIVE) MOV(24,Phase.MSG.FAULT) ,XIC(AutoRunPump) XIC(TankPump.STAT.INTERLOCK) MOV(25,Phase.MSG.FAULT) ,XIC(TankPump.STAT.FAULT) MOV(26,Phase.MSG.FAULT) ,XIC(TankDischargeTemperature.STAT.FAULT) MOV(32,Phase.MSG.FAULT) ,XIC(TankDischargeTemperature.HiHi.ACTIVE) MOV(33,Phase.MSG.FAULT) ,XIC(TankPumpRecValve.STAT.FAULT) MOV(34,Phase.MSG.FAULT) ,XIC(TankLevel.STAT.FAULT) MOV(35,Phase.MSG.FAULT) ,XIC(TankLevel.LoLo.ACTIVE) MOV(36,Phase.MSG.FAULT) ,XIC(InletValve.STAT.FAULT) MOV(37,Phase.MSG.FAULT) ,[XIO(EZSC_TT510_Not_Installed) XIC(OIlTemperature.LoLo.ACTIVE) ,XIC(TankDischargeTemperature.LoLo.ACTIVE) ,XIC(TankDischargeTemperature.LoLo.ACTIVE) ] MOV(38,Phase.MSG.FAULT) ,XIC(TankDischargeValve.STAT.FAULT) MOV(39,Phase.MSG.FAULT) ,XIC(cSETUP.SIMULATION.Enabled) XIC(cSETUP.SIMULATION.PHASE) MOV(0,Phase.MSG.FAULT) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.MESSAGE$'$N"
				    "Function=$'STATUS.MESSAGE$'$N"
				    "";
				N: [MOV(0,Phase.MSG.MSG) ,XIC(Phase.STAT.BYPASS) XIO(Phase.STEP.RECORD) MOV(61,Phase.MSG.MSG) ,XIC(Phase.STAT.BYPASS) XIC(Phase.STEP.RECORD) MOV(62,Phase.MSG.MSG) ,XIC(Phase.STATE.HELD) XIO(Phase.STAT.FAULTED) MOV(63,Phase.MSG.MSG) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.MESSAGE.UNIQUE$'$N"
				    "Function=$'STATUS.MESSAGE.UNIQUE$'$N"
				    "";
				N: MakeMessageNumberGloballyUnique(AOI.Message,Phase.ID,Phase.MSG);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.MESSAGE.STATUS$'$N"
				    "Function=$'MESSAGE$'$N"
				    "";
				N: [LIM(2000,Phase.STEP_INDEX,3000) NEQ(Phase.MSG.PERM,0) MOV(Phase.MSG.PERM,Phase.MSG.MSG) ,GEQ(Phase.STEP_INDEX,3000) NEQ(Phase.MSG.FAULT,0) MOV(Phase.MSG.FAULT,Phase.MSG.MSG) ,EQU(Phase.MSG.FAULT,0) EQU(Phase.MSG.PERM,0) ONS(Phase.MSG.OS.1) CLR(Phase.MSG.MSG) ];
		END_ROUTINE

		ROUTINE _130_Alarming 
				N: NOP();
				N: [XIC(Phase.STAT.FAULTED) OTE(Phase.ALARM[0].ACTIVE) ,AlarmControl(AOI.AlarmControl[0],Phase.ALARM[0],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM
