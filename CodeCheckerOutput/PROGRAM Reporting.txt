	PROGRAM Reporting (Description := "Database Reporting routines$NCooresponds to the rRPT set of tags",
	                   MAIN := "_00_RPT_Main",
	                   MODE := 0,
	                   DisableFlag := 0,
	                   UseAsFolder := 0)
		TAG
			A : DINT (RADIX := Decimal) := 0;
			AlarmReporting : AlarmReporting  := [0,584289326];
			B : DINT (RADIX := Decimal) := 0;
			C : DINT (RADIX := Decimal) := 16;
			cBLANK_TRANSACTION : CB_RSSQL_Transaction_Control[41]  := [[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0
					,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0
					,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0
					,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0,[0,0,0],0],[0,0,0,0
					,[0,0,0],0]];
			cLocationLoadIterations : DINT (RADIX := Decimal) := 4;
			cPHASE : CB_RPT_PHASE[365]  := [[[2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#1,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0],0],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#1,2#0,2#0,2#0,2#0,2#1,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#1,2#1,2#1,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1010],[[2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1010],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1010],[[2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#1,2#1,2#1,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1010],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#1,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#1,2#0
					,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#1,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000
					],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020
					],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#1,2#0,2#0
					,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1
					,2#1,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020
					],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020
					],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000
					],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020
					],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020
					],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020
					],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000
					],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#1,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0
					,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#1,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020
					],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020
					],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					],0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1000],[[2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1000],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0
					,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#1,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],1020],[[2#0,2#0,2#1,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#1,2#1,2#1,2#0,2#0,2#0,2#0,2#1,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],1020],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0],0]];
			cPHASE_STEP_REM : DINT[365] (RADIX := Decimal) := [0,3,1,3,1,3,1,5,3,3,3,11,3,3,3,1,3,1,1,1,1,1,1,1,1,5,1,5,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,1,1,1,1
					,1,5,5,5,1,1,1,11,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,10,1,10,1,3,1,1,5,1,3,3,1,1,1,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
					,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1
					,1,1,1,1,1,1,1,1,1,1,5,5,1,1,1,1,1,1,5,1,5,5,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0];
			cTransactionManagerDown : BOOL (RADIX := Decimal) := 0;
			cTransactionManagerWatchdog : TIMER  := [-1071877759,60000,2092];
			L : DINT (RADIX := Decimal) := 18;
			LastDateTimeRecorded : DATE_STRING  := [23,'06/04/2024 15:35:12.223$00$00'];
			NUM_PARAMS : DINT (RADIX := Decimal) := 1;
			OIT OF dOIT[0] ;
			PAR : DINT (RADIX := Decimal) := 10;
			PC : DINT (RADIX := Decimal) := 0;
			ReportFirstScanEvent : BOOL (RADIX := Decimal) := 0;
			ReportFirstScanEventOneshot : BOOL (RADIX := Decimal) := 1;
			S : DINT (RADIX := Decimal) := 16;
			SampleDIForReportMask : CB_DI  := [0,0,0,[[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]]],[0,0,0],[0],[[0,0,0],[0,0,0],[0,0,0]],[0,0,0],[[[1],[1],[1]]],[1,[[0,0,0],[8195,0,0]],[[0],[15363]],[[0],[9216]]]];
			SampleDOForReportMask : CB_DO  := [0,0,0,[[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]]],[0,0,0],[0,0,0,0],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[0,0,0,0,0,0],[0,[0,0,0,0,0,0,0,0,0,0],[0,0,0],0,0,0,0],[[1],[1
					],[1,0,[1,0,0,0],[1,0,0,0,0,0],[1,0]],[1],[1,0,0,0],[[1],[1],[1]],[1,0,0,[0,0,0]]],[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],[0],[[0,0,0],[0,0,0],0.00000000e+000,0,0.00000000e+000,0.00000000e+000
					,0],[[[0,0,0],[8247,0,0]],[[0,0,0,0],[24583,0,0,0]],[[0,0,0,0],[8192,0,0,0]]]];
			SET_DATETIME : DINT[8] (RADIX := Decimal) := [-1,-1,-1,-1,-1,-1,0,0];
			TransactionManagerCommunicationOK OF cDI[1] ;
		END_TAG

		ROUTINE _00_RPT_Main 
				RC: "move product and order data to line level$N"
				    "last batch of campaign$N"
				    "line level PV$N"
				    "";
				N: NOP();
				N: XIC(S:FS)JSR(_03_RPT_FIRST_SCAN,0);
				N: JSR(_100_HEARTBEAT,0);
				N: JSR(_110_RPT_STEP_CNTRL,0);
				N: JSR(_101_TIME_SYNCH,0);
				N: XIC(rRPT[2].STAT.AUTO)JSR(_112_LOAD_PHASE_DATA,0);
				N: XIC(rRPT[3].STAT.AUTO)JSR(_113_LOAD_UNIT_DATA,0);
				N: XIC(rRPT[4].STAT.AUTO)JSR(_114_LOAD_BATCH_DATA,0);
				N: XIC(rRPT[5].STAT.AUTO)JSR(_115_LOAD_CAMPAIGN_DATA,0);
				N: XIC(rRPT[6].STAT.AUTO)JSR(_116_LOAD_INVENTORY_DATA,0);
				N: XIC(rRPT[7].STAT.AUTO)[JSR(_117_LOAD_ALARM_DATA_AI,0) ,JSR(_117_LOAD_ALARM_DATA_AO,0) ,JSR(_117_LOAD_ALARM_DATA_DI,0) ,JSR(_117_LOAD_ALARM_DATA_DO,0) ,JSR(_117_LOAD_ALARM_DATA_PHZ,0) ,JSR(_117_LOAD_ALARM_DATA_UNIT,0) ];
				N: XIC(rRPT[8].STAT.AUTO)JSR(_118_LOAD_EVENT_DATA_DO,0);
				N: XIC(rRPT[8].STAT.AUTO)JSR(_118_LOAD_EVENT_DATA_DI,0);
				N: XIC(rRPT[0].STAT.AUTO)JSR(_120_RPT_RSSQL,0);
				N: XIC(rRPT[1].STAT.AUTO)XIO(rRPT[1].STEP.IDLE)JSR(_121_RPT_PARAMETER,0);
				N: XIC(rRPT[2].STAT.AUTO)XIO(rRPT[2].STEP.IDLE)JSR(_122_RPT_PHASE,0);
				N: XIC(rRPT[3].STAT.AUTO)XIO(rRPT[3].STEP.IDLE)JSR(_123_RPT_UNIT,0);
				N: XIC(rRPT[4].STAT.AUTO)XIO(rRPT[4].STEP.IDLE)JSR(_124_RPT_BATCH,0);
				N: XIC(rRPT[5].STAT.AUTO)XIO(rRPT[5].STEP.IDLE)JSR(_125_RPT_CAMPAIGN,0);
				N: XIC(rRPT[6].STAT.AUTO)XIO(rRPT[6].STEP.IDLE)JSR(_126_RPT_INVENTORY,0);
				N: XIC(rRPT[7].STAT.AUTO)XIO(rRPT[7].STEP.IDLE)JSR(_127_RPT_ALARMS,0);
				N: XIC(rRPT[8].STAT.AUTO)XIO(rRPT[8].STEP.IDLE)JSR(_128_RPT_EVENT,0);
				N: XIC(rINV_LOCATION_UPDATE.ENABLED)JSR(_140_INVENTORY_UPDATE,0);
				RC: "Record the last scan time of this program";
				N: GSV(Program,Reporting,LastScanTime,cCOMMON.SCAN_TIMES[11]);
		END_ROUTINE

		ROUTINE _03_RPT_FIRST_SCAN (Description := "This routine is scanned only on the first scan of logic on power-up or program-to-run mode transition.")
				RC: "FIRST SCAN LOGIC$N"
				    "============================================================================$N"
				    "$N"
				    "This routine contains logic that will be scanned on power-up and also on transition from program to run mode.$N"
				    "As such, all code in this routine will be scanned exactly one time.  Place one-time initialization code here.  $N"
				    "Typically, all devices and phases permissive bits are set, interlocks and faults are cleared.$N"
				    "If a phase was active on the transition to program or on power-down, this phase is paused to prevent$N"
				    "unexpected operation of equipment upon startup.$N"
				    " $N"
				    "There is a for-loop for devices, phases, units, analogs, and loops.$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "FIRST SCAN LOGIC$N"
				    "============================================================================$N"
				    "$N"
				    "This routine contains logic that will be scanned on power-up and also on transition from program to run mode.$N"
				    "As such, all code in this routine will be scanned exactly one time.  Place one-time initialization code here.  $N"
				    "Typically, all devices and phases permissive bits are set, interlocks and faults are cleared.$N"
				    "If a phase was active on the transition to program or on power-down, this phase is paused to prevent$N"
				    "unexpected operation of equipment upon startup.$N"
				    " $N"
				    "There is a for-loop for devices, phases, units, analogs, and loops.$N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Setup Reporting FIFO Queue Unload Delay Timers";
				N: MOV(10000,rRPT[3].TMR[6].PRE)MOV(10000,rRPT[4].TMR[6].PRE)MOV(10000,rRPT[5].TMR[6].PRE)MOV(10000,rRPT[7].TMR[6].PRE);
				RC: "Setup FIFO Queue Lengths$N"
				    "$N"
				    "Determined by frequency of event$N"
				    "";
				N: MOV(90,rRPT_UNIT_PARAMS.CONTROL.LEN)MOV(45,rRPT_BATCH_PARAMS.CONTROL.LEN)MOV(30,rRPT_CAMPAIGN.CONTROL.LEN);
				RC: "Setup Number of Parallel Transactions$N"
				    "Setpoint 1 is setup based on number of transactions of each type$N"
				    "that RSSQL is configured with$N"
				    "";
				N: MOV(10,rRPT[3].SPT[1])MOV(3,rRPT[4].SPT[1])MOV(1,rRPT[5].SPT[1])MOV(5,rRPT[7].SPT[1]);
		END_ROUTINE

		ROUTINE _100_HEARTBEAT 
				RC: "Generate a timeout if the Hearbeat from the report server fails.$N"
				    "The watchdog timer .DN bit is used in the discrete alarm routine to generate an alarm condition.$N"
				    "";
				N: [MOV(60000,cTransactionManagerWatchdog.PRE) EQU(rHEARTBEAT,rHEARTBEAT_REM) TON(cTransactionManagerWatchdog,?,?) ,COP(rHEARTBEAT,rHEARTBEAT_REM,1) ];
				N: XIC(cTransactionManagerWatchdog.DN)[OTE(cTransactionManagerDown) ,MOV(45000,cCOMMON.WATCHDOG_TIMER[0].PRE) TON(cCOMMON.WATCHDOG_TIMER[0],?,?) ];
				RC: "COMMUNICATION OK$N"
				    "set a Virtual DI indicating Communication status for use by external modules";
				N: [XIO(cTransactionManagerDown) OTE(TransactionManagerCommunicationOK.STAT.ENERGIZED) ,XIC(TransactionManagerCommunicationOK.STAT.ENERGIZED) [XIC(TransactionManagerCommunicationOK.DELAY.ON.DN) OTL(TransactionManagerCommunicationOK.STAT.ON) OTU(TransactionManagerCommunicationOK.STAT.OFF) ,TON(TransactionManagerCommunicationOK.DELAY.ON,?,?) ] ,XIO(TransactionManagerCommunicationOK.STAT.ENERGIZED) [XIC(TransactionManagerCommunicationOK.DELAY.OFF.DN) OTU(TransactionManagerCommunicationOK.STAT.ON) OTL(TransactionManagerCommunicationOK.STAT.OFF) ,TON(TransactionManagerCommunicationOK.DELAY.OFF,?,?) ] ,XIO(TransactionManagerCommunicationOK.STAT.ON) OTE(TransactionManagerCommunicationOK.STAT.FAULT) OTE(TransactionManagerCommunicationOK.ALARM[0].ACTIVE) ,AlarmControl(TransactionManagerCommunicationOK.AOI.AlarmControl[0],TransactionManagerCommunicationOK.ALARM[0],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
				RC: "REPORT FIRST SCAN EVENT$N"
				    "when controller goes through first scan, it runs a timer.$N"
				    "when that timer is done, let$'s latch on a bit indicating that we want to report that event.$N"
				    "in the rung below, once transaction amanger heartbeat is ok, then put the event on the queue$N"
				    "";
				N: [XIC(cCOMMON.FirstScan.Delay.DN) ONS(ReportFirstScanEventOneshot) OTL(ReportFirstScanEvent) ,MOV(cCOMMON.DATE_TIME_STRING,LastDateTimeRecorded) ];
				N: XIC(ReportFirstScanEvent)XIC(TransactionManagerCommunicationOK.STAT.ENERGIZED)[COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1) ,MOV(000101,rRPT_EVENT.BUFFER[0].EventType) MOV(cCOMMON.FirstScan.Delay.PRE,rRPT_EVENT.BUFFER[0].ParamDINT[1]) ,MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp) MOV(LastDateTimeRecorded,rRPT_EVENT.BUFFER[0].ParamSTRING[0]) ,FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?) OTU(rRPT_EVENT.CONTROL.EN) ,OTU(ReportFirstScanEvent) ];
		END_ROUTINE

		ROUTINE _101_TIME_SYNCH 
				N: NOP();
				N: GRT(SET_DATETIME[0],2019)LIM(1,SET_DATETIME[1],12)LIM(1,SET_DATETIME[2],31)LIM(0,SET_DATETIME[3],23)LIM(0,SET_DATETIME[4],59)LIM(0,SET_DATETIME[5],59)OTE(cCOMMON.SET_TIMEDATE);
				N: XIC(cCOMMON.SET_TIMEDATE)SSV(WallClockTime,,LocalDateTime,SET_DATETIME[0]);
				N: XIC(cCOMMON.SET_TIMEDATE)MOV(-1,SET_DATETIME[0])MOV(-1,SET_DATETIME[1])MOV(-1,SET_DATETIME[2])MOV(-1,SET_DATETIME[3])MOV(-1,SET_DATETIME[4])MOV(-1,SET_DATETIME[5]);
				N: MOV(cCOMMON.DATE_TIME_STRING,cCOMMON.DATE_TIME_STRING);
		END_ROUTINE

		ROUTINE _110_RPT_STEP_CNTRL 
				RC: "REPORT STEP CONTROL$N"
				    "$N"
				    "The Sequence consists of the following steps:$N"
				    "$N"
				    "·$TSTEP 0 — Reset.$N"
				    "·$TSTEP 1 — Idle.  A start command is set in the load routine when queued events are present.$N"
				    "STEP 5 — Active. Waits for STAT.COMPLETE from the load routine.$N"
				    "STEP 10 — Complete and go to step 0$N"
				    "=================================================================================================================================================";
				N: NOP();
				RC: "Initialize Loop Variable Y = 0";
				N: MOV(0,Y);
				RC: "LOOP FOR ALL PHASES$N"
				    "Increment Loop Index (Never Scan Phase 0)";
				N: LBL(PHZ)ADD(Y,1,Y);
				RC: "RESET STEP$N"
				    "=========================$N"
				    "Used as one-shot state, transition automatically to Step 1 Idle.$N"
				    " $N"
				    "";
				N: EQU(rRPT[Y].STEP_NO,0)[XIC(rRPT[Y].STEP.RESET) MOV(1,rRPT[Y].STEP_NO) ,OTE(rRPT[Y].STEP.RESET) ];
				RC: "IDLE STEP$N"
				    "======================================================================================$N"
				    "If phase is in idle step when state becomes running, then goto step 2.$N"
				    "======================================================================================$N"
				    "";
				N: EQU(rRPT[Y].STEP_NO,1)[XIC(rRPT[Y].STEP.IDLE) XIC(rRPT[Y].CMD.START) MOV(4,rRPT[Y].STEP_NO) ,OTE(rRPT[Y].STEP.IDLE) ];
				RC: "INITIALIZE STEP$N"
				    "==================================$N"
				    "This step provides a timer which may be set to allow any initialization activity.$N"
				    "$N"
				    "";
				N: EQU(rRPT[Y].STEP_NO,4)[XIC(rRPT[Y].TMR[0].DN) XIO(cTransactionManagerDown) MOV(5,rRPT[Y].STEP_NO) ,MOV(2000,rRPT[Y].TMR[0].PRE) TON(rRPT[Y].TMR[0],?,?) ,OTE(rRPT[Y].STEP.INITIALIZE) ];
				RC: "ACTIVE STEP$N"
				    "==================================$N"
				    "This is typically the primary active STEP on which equipment is run (valves, motors, etc.)$N"
				    "When the .STAT.COMPLETE bit is set by logic in the _64_PHZ_STOP routine, phase transitions to STEP 6 Settle$N"
				    "";
				N: EQU(rRPT[Y].STEP_NO,5)[XIC(rRPT[Y].STEP.ACTIVE) XIC(rRPT[Y].STAT.COMPLETE) MOV(6,rRPT[Y].STEP_NO) ,XIC(cTransactionManagerDown) MOV(11,rRPT[Y].STEP_NO) ,OTE(rRPT[Y].STEP.ACTIVE) ];
				RC: "SETTLE STEP$N"
				    "==================================$N"
				    "This step allows RSSQL time to detect triggers being OFF.$N"
				    "$N"
				    "";
				N: EQU(rRPT[Y].STEP_NO,6)[XIC(rRPT[Y].TMR[1].DN) MOV(10,rRPT[Y].STEP_NO) ,MOV(1000,rRPT[Y].TMR[1].PRE) TON(rRPT[Y].TMR[1],?,?) ,OTE(rRPT[Y].STEP.SETTLE) ];
				RC: "COMPLETED STEP$N"
				    "==============================$N"
				    "Wait for Reset Command.";
				N: EQU(rRPT[Y].STEP_NO,10)[XIC(rRPT[Y].STEP.COMPLETE) MOV(0,rRPT[Y].STEP_NO) ,OTE(rRPT[Y].STEP.COMPLETE) ];
				RC: "HELD STEP$N"
				    "===========================$N"
				    "if we got held, then as soon as we see a heartbeat,$N"
				    "then go back to step 5 to retry$N"
				    "";
				N: EQU(rRPT[Y].STEP_NO,11)[XIC(rRPT[Y].STEP.HELD) XIO(cTransactionManagerDown) MOV(5,rRPT[Y].STEP_NO) ,OTE(rRPT[Y].STEP.HELD) ];
				RC: "ENFORCE VALID PHASE STATES$N"
				    "This rung checks the phase STEP number.  If it is equal to an invalid STEP number then reset the cRPT[Y].$N"
				    "This enforces determinism on the phase STEP machine.";
				N: NEQ(rRPT[Y].STEP_NO,0)NEQ(rRPT[Y].STEP_NO,1)NEQ(rRPT[Y].STEP_NO,4)NEQ(rRPT[Y].STEP_NO,5)NEQ(rRPT[Y].STEP_NO,6)NEQ(rRPT[Y].STEP_NO,10)NEQ(rRPT[Y].STEP_NO,11)MOV(0,rRPT[Y].STEP_NO);
				N: LEQ(Y,8)JMP(PHZ);
		END_ROUTINE

		ROUTINE _112_LOAD_PHASE_DATA 
				N: MOV(0,Y);
				N: LBL(PHZ)ADD(Y,1,Y);
				N: [XIC(cPHZ[Y].STATE.IDLE) XIC(cPHZ[Y].STEP.IDLE) EQU(cPHZ[Y].STEP_NO,1) ,EQU(Y,13) ]JMP(SKIP_PARAMS);
				N: MOV(cPHZ[Y].INDEX,Z);
				N: XIC(cPHZ[Y].STEP.FirstScanInStepIndex)NEQ(cPHZ[Y].STEP_INDEX,0)NEQ(cPHZ[Y].STEP_INDEX,1)[MOV(cSETUP.PLC_ID,rRPT_PHASE_PARAMS.BUFFER[0].server_id) EQU(cPHZ[Y].STEP_NO,2) MOV(cCOMMON.TIME_BASED_ID,cPHZ[Y].RECIPE.PROC_ID) ,MOV(cPHZ[Y].LINE_INDEX,rRPT_PHASE_PARAMS.BUFFER[0].line_array_index) MOV(cUNIT[Z].RECIPE.BATCH.PROC_ID,rRPT_PHASE_PARAMS.BUFFER[0].line_proc_id) MOV(cUNIT[Z].RECIPE.PROC_ID,rRPT_PHASE_PARAMS.BUFFER[0].unit_proc_id) MOV(cPHZ[Y].RECIPE.PROC_ID,rRPT_PHASE_PARAMS.BUFFER[0].phase_proc_id) ,MOV(Z,rRPT_PHASE_PARAMS.BUFFER[0].unit_array_index) MOV(cUNIT[Z].RECIPE.START_STEP,rRPT_PHASE_PARAMS.BUFFER[0].unit_start_step) MOV(cUNIT[Z].RECIPE.STOP_STEP,rRPT_PHASE_PARAMS.BUFFER[0].unit_stop_step) ,MOV(Y,rRPT_PHASE_PARAMS.BUFFER[0].phase_array_index) MOV(cPHZ[Y].RECIPE.START_STEP,rRPT_PHASE_PARAMS.BUFFER[0].start_step) MOV(cPHZ[Y].RECIPE.STOP_STEP,rRPT_PHASE_PARAMS.BUFFER[0].stop_step) MOV(cPHZ[Y].RECIPE.INSTANCE,rRPT_PHASE_PARAMS.BUFFER[0].instance) ,MOV(cUNIT[Z].RECIPE.HEADER.ID,rRPT_PHASE_PARAMS.BUFFER[0].recipe_id) COP(cCOMMON.DATE_TIME_STRING,rRPT_PHASE_PARAMS.BUFFER[0].time_stamp,1) ,MOV(cPHZ[Y].STATE_NO,rRPT_PHASE_PARAMS.BUFFER[0].state_no) MOV(cPHZ[Y].STEP_NO,rRPT_PHASE_PARAMS.BUFFER[0].step_no) ,MOV(cPHZ[Y].STEP_INDEX_ID,rRPT_PHASE_PARAMS.BUFFER[0].step_index) MOV(cPHZ[Y].MSG.MSG,rRPT_PHASE_PARAMS.BUFFER[0].message) ,FFL(rRPT_PHASE_PARAMS.BUFFER[0],rRPT_PHASE_PARAMS.BUFFER[1],rRPT_PHASE_PARAMS.CONTROL,?,?) OTU(rRPT_PHASE_PARAMS.CONTROL.EN) ];
				N: [XIC(cPHZ[Y].STEP.RECORD) MOV(1000,cPHASE[Y].PARAM_LOAD_STEP_INDEX) ,XIC(cPHZ[Y].STEP.COMPLETE) EQU(cPHASE[Y].PARAM_LOAD_STEP_INDEX,1000) MOV(1010,cPHASE[Y].PARAM_LOAD_STEP_INDEX) ];
				RC: "Don$'t load parameter data if the phase is not complete$N"
				    "Hand Add phases have separate parameter reporting. Do not report here as it will potentially overwrite the correct data reported by the Hand Add phase";
				N: [XIO(cPHZ[Y].STEP.COMPLETE) ,XIC(cPHZ[Y].STAT.IS_HAND_ADD_TYPE) ]JMP(SKIP_PARAMS);
				N: MOV(-1,PAR)MOV(cPHZ[Y].CLASS,PC)MOV(cPHZ_CLASS[PC].NUM_PARAMS,NUM_PARAMS);
				N: [MOV(cPHZ[Y].LINE_INDEX,rRPT_PARAMETER.BUFFER[0].line_array_index) MOV(Z,rRPT_PARAMETER.BUFFER[0].unit_array_index) MOV(Y,rRPT_PARAMETER.BUFFER[0].phase_array_index) ,MOV(cUNIT[Z].RECIPE.START_STEP,rRPT_PARAMETER.BUFFER[0].unit_start_step) MOV(cUNIT[Z].RECIPE.STOP_STEP,rRPT_PARAMETER.BUFFER[0].unit_stop_step) MOV(cPHZ[Y].RECIPE.START_STEP,rRPT_PARAMETER.BUFFER[0].start_step) MOV(cPHZ[Y].RECIPE.STOP_STEP,rRPT_PARAMETER.BUFFER[0].stop_step) ,MOV(cUNIT[Z].RECIPE.HEADER.ID,rRPT_PARAMETER.BUFFER[0].recipe_id) ];
				N: MOV(cUNIT[Z].RECIPE.BATCH.PROC_ID,rRPT_PARAMETER.BUFFER[0].line_proc_id)MOV(cUNIT[Z].RECIPE.PROC_ID,rRPT_PARAMETER.BUFFER[0].unit_proc_id)MOV(cPHZ[Y].RECIPE.PROC_ID,rRPT_PARAMETER.BUFFER[0].phase_proc_id);
				N: LBL(LOAD_PARAMS)ADD(PAR,1,PAR);
				N: EQU(cPHASE[Y].PARAM_LOAD_STEP_INDEX,1010)[XIC(cPHZ_CLASS[PC].PARAM[PAR].SPT_VISIBLE) ,XIC(cPHZ_CLASS[PC].PARAM[PAR].ACT_VISIBLE) ][MOV(PAR,rRPT_PARAMETER.BUFFER[0].param_array_index) ,MOV(cPHZ[Y].SPT[PAR],rRPT_PARAMETER.BUFFER[0].param_setpoint_value) MOV(cPHZ[Y].ACTUAL[PAR],rRPT_PARAMETER.BUFFER[0].param_actual_value) ,EQU(PAR,1) MOV(cPHZ[Y].SPT[0],rRPT_PARAMETER.BUFFER[0].param_setpoint_value) ,EQU(PAR,5) MOV(cPHZ[Y].SPT[4],rRPT_PARAMETER.BUFFER[0].param_setpoint_value) ,EQU(PAR,9) MOV(cPHZ[Y].SPT[8],rRPT_PARAMETER.BUFFER[0].param_setpoint_value) ,FFL(rRPT_PARAMETER.BUFFER[0],rRPT_PARAMETER.BUFFER[1],rRPT_PARAMETER.CONTROL,?,?) OTU(rRPT_PARAMETER.CONTROL.EN) ];
				N: LES(PAR,cSETUP.NO_PHASE_CLASS_PARAMETERS)JMP(LOAD_PARAMS);
				N: EQU(cPHASE[Y].PARAM_LOAD_STEP_INDEX,1010)MOV(1020,cPHASE[Y].PARAM_LOAD_STEP_INDEX);
				N: LBL(SKIP_PARAMS)LES(Y,cSETUP.NO_PHASE)JMP(PHZ);
				N: MOV(0,Y)MOV(0,PC);
				N: LBL(PHZ2)ADD(Y,1,Y)MOV(cPHZ[Y].CLASS,PC)MOV(cPHZ[Y].INDEX,Z);
				N: LBL(SKIP_PHZ2)MOV(cPHZ[Y].STEP_NO,cPHASE_STEP_REM[Y])LES(Y,cSETUP.NO_PHASE)JMP(PHZ2);
		END_ROUTINE

		ROUTINE _113_LOAD_UNIT_DATA 
				RC: "*******************************************************************************************************************************************************$N"
				    "Unit Status$N"
				    "*******************************************************************************************************************************************************";
				N: MOV(0,Z);
				N: LBL(UNIT_RPT)ADD(Z,1,Z);
				N: [EQU(cUNIT[Z].STEP_NO,2) ,XIC(cUNIT[Z].STEP.ADVANCING) GEQ(cUNIT[Z].STEP_INDEX,cUNIT[Z].RECIPE.NUM_STEPS) ,XIC(cUNIT[Z].STATE.STOPPED) ,XIC(cUNIT[Z].STATE.ABORTED) ]ONS(cUNIT[Z].OS[29])[MOV(cUNIT[Z].INDEX,X) EQU(cUNIT[Z].STEP_NO,2) MOV(cCOMMON.TIME_BASED_ID,cUNIT[Z].RECIPE.PROC_ID) ,MOV(cSETUP.PLC_ID,rRPT_UNIT_PARAMS.BUFFER[0].server_id) ,MOV(cLINE[X].RECIPE.BATCH.PROC_ID,rRPT_UNIT_PARAMS.BUFFER[0].line_proc_id) MOV(cUNIT[Z].RECIPE.PROC_ID,rRPT_UNIT_PARAMS.BUFFER[0].unit_proc_id) ,MOV(cLINE[X].RECIPE.HEADER.ID,rRPT_UNIT_PARAMS.BUFFER[0].recipe_id) MOV(cLINE[X].INDEX,rRPT_UNIT_PARAMS.BUFFER[0].line_array_index) MOV(Z,rRPT_UNIT_PARAMS.BUFFER[0].unit_array_index) ,MOV(cUNIT[Z].RECIPE.START_STEP,rRPT_UNIT_PARAMS.BUFFER[0].start_step) MOV(cUNIT[Z].RECIPE.STOP_STEP,rRPT_UNIT_PARAMS.BUFFER[0].stop_step) MOV(cUNIT[Z].RECIPE.INSTANCE,rRPT_UNIT_PARAMS.BUFFER[0].instance) ,COP(cUNIT[Z].SPT[1],rRPT_UNIT_PARAMS.BUFFER[0].SPT[1],10) COP(cUNIT[Z].ACTUAL[1],rRPT_UNIT_PARAMS.BUFFER[0].ACTUAL[1],10) COP(cCOMMON.DATE_TIME_STRING,rRPT_UNIT_PARAMS.BUFFER[0].time_stamp,1) ,MOV(cUNIT[Z].STATE_NO,rRPT_UNIT_PARAMS.BUFFER[0].state_no) MOV(cUNIT[Z].STEP_NO,rRPT_UNIT_PARAMS.BUFFER[0].step_no) ,XIC(cUNIT[Z].STEP.ADVANCING) MOV(70,rRPT_UNIT_PARAMS.BUFFER[0].state_no) MOV(10,rRPT_UNIT_PARAMS.BUFFER[0].step_no) ,FFL(rRPT_UNIT_PARAMS.BUFFER[0],rRPT_UNIT_PARAMS.BUFFER[1],rRPT_UNIT_PARAMS.CONTROL,?,?) OTU(rRPT_UNIT_PARAMS.CONTROL.EN) ];
				RC: "Unit allocations are not currently used by reporting, however, to be used they would need to be able to report the step they were unallocated from$N"
				    "As of this writing those fields are zero$'ed before this rung executes";
				N: AFI()NEQ(cUNIT[Z].INDEX,cUNIT[Z].INDEX_REM)ONS(cUNIT[Z].OS[28])[MOV(cUNIT[Z].INDEX,X) MOV(cSETUP.PLC_ID,rRPT_UNIT_PARAMS.BUFFER[0].server_id) ,LIM(0,X,cSETUP.NO_LINE) MOV(cLINE[X].INDEX,rRPT_UNIT_PARAMS.BUFFER[0].line_array_index) MOV(cLINE[X].RECIPE.BATCH.PROC_ID,rRPT_UNIT_PARAMS.BUFFER[0].line_proc_id) ,MOV(cLINE[X].RECIPE.HEADER.ID,rRPT_UNIT_PARAMS.BUFFER[0].recipe_id) MOV(Z,rRPT_UNIT_PARAMS.BUFFER[0].unit_array_index) ,MOV(cUNIT[Z].RECIPE.START_STEP,rRPT_UNIT_PARAMS.BUFFER[0].start_step) MOV(cUNIT[Z].RECIPE.STOP_STEP,rRPT_UNIT_PARAMS.BUFFER[0].stop_step) MOV(cUNIT[Z].RECIPE.INSTANCE,rRPT_UNIT_PARAMS.BUFFER[0].instance) ,COP(cUNIT[Z].SPT[1],rRPT_UNIT_PARAMS.BUFFER[0].SPT[1],10) COP(cUNIT[Z].ACTUAL[1],rRPT_UNIT_PARAMS.BUFFER[0].ACTUAL[1],10) COP(cCOMMON.DATE_TIME_STRING,rRPT_UNIT_PARAMS.BUFFER[0].time_stamp,1) ,MOV(-1000,rRPT_UNIT_PARAMS.BUFFER[0].state_no) MOV(X,rRPT_UNIT_PARAMS.BUFFER[0].step_no) MOV(cUNIT[Z].INDEX_REM,rRPT_UNIT_PARAMS.BUFFER[0].SPT[1]) ,FFL(rRPT_UNIT_PARAMS.BUFFER[0],rRPT_UNIT_PARAMS.BUFFER[1],rRPT_UNIT_PARAMS.CONTROL,?,?) OTU(rRPT_UNIT_PARAMS.CONTROL.EN) ];
				N: MOV(cUNIT[Z].INDEX,cUNIT[Z].INDEX_REM);
				N: LES(Z,cSETUP.NO_UNIT)JMP(UNIT_RPT);
		END_ROUTINE

		ROUTINE _114_LOAD_BATCH_DATA 
				N: MOV(0,Z)MOV(0,Y);
				N: LBL(BATCH_RPT)ADD(Z,1,Z);
				N: XIO(cLINE[Z].STATE.IDLE)XIC(cLINE[Z].STATE.Oneshot.FirstScanInState)[MOV(cLINE[Z].INDEX,X) MOV(cLINE[Z].CAMPAIGN_INDEX,Y) ,MOV(cSETUP.PLC_ID,rRPT_BATCH_PARAMS.BUFFER[0].server_id) MOV(X,rRPT_BATCH_PARAMS.BUFFER[0].line_array_index) MOV(cLINE[Z].RECIPE.BATCH.PROC_ID,rRPT_BATCH_PARAMS.BUFFER[0].line_proc_id) ,MOV(Y,rRPT_BATCH_PARAMS.BUFFER[0].campaign_array_index) MOV(cSCHEDULE[X].CAMPAIGN[Y].PROC_ID,rRPT_BATCH_PARAMS.BUFFER[0].campaign_proc_id) ,COP(cCOMMON.DATE_TIME_STRING,rRPT_BATCH_PARAMS.BUFFER[0].time_stamp,1) ,COP(cLINE[Z].RECIPE.BATCH,rRPT_BATCH_PARAMS.BUFFER[0].BATCH,1) MOV(cLINE[Z].RECIPE.ID,rRPT_BATCH_PARAMS.BUFFER[0].recipe_id) ,COP(cLINE[Z].SPT[0],rRPT_BATCH_PARAMS.BUFFER[0].SPT[0],11) COP(cLINE[Z].ACTUAL[0],rRPT_BATCH_PARAMS.BUFFER[0].ACTUAL[0],11) ,MOV(cLINE[Z].STATE_NO,rRPT_BATCH_PARAMS.BUFFER[0].state_no) MOV(cLINE[Z].STEP_NO,rRPT_BATCH_PARAMS.BUFFER[0].step_no) ,FFL(rRPT_BATCH_PARAMS.BUFFER[0],rRPT_BATCH_PARAMS.BUFFER[1],rRPT_BATCH_PARAMS.CONTROL,?,?) OTU(rRPT_BATCH_PARAMS.CONTROL.EN) ];
				N: [MOV(Z,rRPT_PARAMETER.BUFFER[0].line_array_index) MOV(0,rRPT_PARAMETER.BUFFER[0].unit_array_index) MOV(0,rRPT_PARAMETER.BUFFER[0].phase_array_index) ,MOV(0,rRPT_PARAMETER.BUFFER[0].unit_start_step) MOV(0,rRPT_PARAMETER.BUFFER[0].unit_stop_step) MOV(0,rRPT_PARAMETER.BUFFER[0].start_step) MOV(0,rRPT_PARAMETER.BUFFER[0].stop_step) ,MOV(cLINE[Z].RECIPE.HEADER.ID,rRPT_PARAMETER.BUFFER[0].recipe_id) ];
				N: MOV(cLINE[Z].RECIPE.BATCH.PROC_ID,rRPT_PARAMETER.BUFFER[0].line_proc_id)MOV(0,rRPT_PARAMETER.BUFFER[0].unit_proc_id)MOV(0,rRPT_PARAMETER.BUFFER[0].phase_proc_id);
				N: MOV(0,PAR);
				N: LBL(LOAD_PARAMS)ADD(PAR,1,PAR);
				N: XIO(cLINE[Z].STATE.IDLE)XIC(cLINE[Z].STATE.Oneshot.FirstScanInState)[EQU(cLINE[Z].STATE_NO,70) ,EQU(cLINE[Z].STATE_NO,80) ,EQU(cLINE[Z].STATE_NO,90) ]GRT(cLINE[Z].SPT[PAR],0)[MOV(PAR,rRPT_PARAMETER.BUFFER[0].param_array_index) ,MOV(cLINE[Z].SPT[PAR],rRPT_PARAMETER.BUFFER[0].param_setpoint_value) MOV(cLINE[Z].ACTUAL[PAR],rRPT_PARAMETER.BUFFER[0].param_actual_value) ,FFL(rRPT_PARAMETER.BUFFER[0],rRPT_PARAMETER.BUFFER[1],rRPT_PARAMETER.CONTROL,?,?) OTU(rRPT_PARAMETER.CONTROL.EN) ];
				RC: "As of this writing (2020-01-10) there is no equivalent cSETUP field for $Qnumber of line parameters$Q";
				N: LES(PAR,10)JMP(LOAD_PARAMS);
				N: LBL(SKIP_BATCH)NOP();
				N: LES(Z,cSETUP.NO_LINE)JMP(BATCH_RPT);
		END_ROUTINE

		ROUTINE _115_LOAD_CAMPAIGN_DATA 
				N: NOP();
				N: MOV(0,S);
				N: LBL(SCHEDULE)ADD(S,1,S);
				N: [MOV(0,A) LIM(1,cSCHEDULE[S].LINE_A,cSETUP.NO_LINE) MOV(cSCHEDULE[S].LINE_A,A) ,MOV(0,B) LIM(1,cSCHEDULE[S].LINE_B,cSETUP.NO_LINE) MOV(cSCHEDULE[S].LINE_B,B) ];
				RC: "INITIALIZE LOOP INDEX";
				N: MOV(0,C);
				RC: "this campaign logic is executed iwth C as the index in the CAMPAIGN array.$N"
				    "The loop may be executed up to 2 times in this logic scan.$N"
				    "If there is no campaign to process, the logic is skipped.$N"
				    " $N"
				    "";
				N: LBL(CAMPAIGN)ADD(1,C,C);
				N: [XIC(cSCHEDULE[S].CAMPAIGN[C].STEP.RECORD) ,XIC(cSCHEDULE[S].CAMPAIGN[C].STEP.COMPLETE) ,XIC(cSCHEDULE[S].CAMPAIGN[C].STATE.ABORTED) ]ONS(cSCHEDULE[S].CAMPAIGN[C].OS[1])[MOV(cSETUP.PLC_ID,rRPT_CAMPAIGN.BUFFER[0].server_id) MOV(cSCHEDULE[S].CAMPAIGN[C].PROC_ID,rRPT_CAMPAIGN.BUFFER[0].campaign_proc_id) ,MOV(S,rRPT_CAMPAIGN.BUFFER[0].schedule_array_index) MOV(C,rRPT_CAMPAIGN.BUFFER[0].campaign_array_index) ,MOV(cSCHEDULE[S].CAMPAIGN[C].RECIPE[0].ID,rRPT_CAMPAIGN.BUFFER[0].recipe_id) MOV(cSCHEDULE[S].CAMPAIGN[C].PRODUCT.ID,rRPT_CAMPAIGN.BUFFER[0].product_id) ,COP(cSCHEDULE[S].CAMPAIGN[C].BATCH,rRPT_CAMPAIGN.BUFFER[0].BATCH,1) COP(cCOMMON.DATE_TIME_STRING,rRPT_CAMPAIGN.BUFFER[0].time_stamp,1) ,COP(cSCHEDULE[S].CAMPAIGN[C].ORDER,rRPT_CAMPAIGN.BUFFER[0].campaign_order,1) MOV(cSCHEDULE[S].CAMPAIGN[C].STATE_NO,rRPT_CAMPAIGN.BUFFER[0].state_no) ,XIC(cSCHEDULE[S].CAMPAIGN[C].STEP.COMPLETE) MOV(70,rRPT_CAMPAIGN.BUFFER[0].state_no) ,FFL(rRPT_CAMPAIGN.BUFFER[0],rRPT_CAMPAIGN.BUFFER[1],rRPT_CAMPAIGN.CONTROL,?,?) OTU(rRPT_CAMPAIGN.CONTROL.EN) ];
				N: LBL(SKIP_CAMPAIGN)LEQ(C,cSETUP.NO_CAMPAIGN)JMP(CAMPAIGN);
				N: LBL(SKIP_SCHEDULE)LES(S,cSETUP.NO_SCHEDULE)JMP(SCHEDULE);
		END_ROUTINE

		ROUTINE _116_LOAD_INVENTORY_DATA 
				N: NOP();
				N: MOV(0,Y);
				N: LBL(PHZ)ADD(Y,1,Y);
				N: [XIC(cPHZ[Y].STATE.IDLE) ,EQU(cPHZ[Y].INV.LOCATION_INDEX_FROM,0) ]JMP(SKIP_PARAMS);
				N: MOV(cPHZ[Y].INDEX,Z);
				N: XIC(cPHZ[Y].STEP.COMPLETE)ONS(cPHZ[Y].OS[28])[MOV(cSETUP.PLC_ID,rRPT_INVENTORY_MOVE.BUFFER[0].server_id) COP(cCOMMON.DATE_TIME_STRING,rRPT_INVENTORY_MOVE.BUFFER[0].time_stamp,1) ,MOV(cUNIT[Z].RECIPE.BATCH.PROC_ID,rRPT_INVENTORY_MOVE.BUFFER[0].line_proc_id) MOV(cUNIT[Z].RECIPE.HEADER.ID,rRPT_INVENTORY_MOVE.BUFFER[0].recipe_id) ,MOV(cUNIT[Z].INDEX,rRPT_INVENTORY_MOVE.BUFFER[0].line_array_index) MOV(Z,rRPT_INVENTORY_MOVE.BUFFER[0].unit_array_index) MOV(Y,rRPT_INVENTORY_MOVE.BUFFER[0].phase_array_index) ,MOV(cUNIT[Z].RECIPE.START_STEP,rRPT_INVENTORY_MOVE.BUFFER[0].unit_start_step) MOV(cUNIT[Z].RECIPE.STOP_STEP,rRPT_INVENTORY_MOVE.BUFFER[0].unit_stop_step) ,MOV(cPHZ[Y].RECIPE.STOP_STEP,rRPT_INVENTORY_MOVE.BUFFER[0].stop_step) MOV(cPHZ[Y].RECIPE.START_STEP,rRPT_INVENTORY_MOVE.BUFFER[0].start_step) ,MOV(cPHZ[Y].SPT[0],rRPT_INVENTORY_MOVE.BUFFER[0].TARGET) MOV(cPHZ[Y].ACTUAL[1],rRPT_INVENTORY_MOVE.BUFFER[0].AMOUNT) MOV(1,rRPT_INVENTORY_MOVE.BUFFER[0].parameter_array_index) ,LIM(1,cPHZ[Y].INV.LOCATION_INDEX_FROM,100) MOV(cPHZ[Y].INV.LOCATION_INDEX_FROM,L) MOV(rINV_LOCATION[L].ID,rRPT_INVENTORY_MOVE.BUFFER[0].LOCATION_ID_FROM) MOV(rINV_LOCATION[L].INGREDIENT_ID,rRPT_INVENTORY_MOVE.BUFFER[0].MATERIAL_ID) MOV(cPHZ[Y].INV.LOT_ID,rRPT_INVENTORY_MOVE.BUFFER[0].LOT_ID) ,LIM(1,cPHZ[Y].INV.LOCATION_INDEX_TO,100) MOV(cPHZ[Y].INV.LOCATION_INDEX_TO,L) MOV(rINV_LOCATION[L].ID,rRPT_INVENTORY_MOVE.BUFFER[0].LOCATION_ID_TO) ,FFL(rRPT_INVENTORY_MOVE.BUFFER[0],rRPT_INVENTORY_MOVE.BUFFER[1],rRPT_INVENTORY_MOVE.CONTROL,?,?) OTU(rRPT_INVENTORY_MOVE.CONTROL.EN) ];
				N: LBL(SKIP_PARAMS)LES(Y,cSETUP.NO_PHASE)JMP(PHZ);
		END_ROUTINE

		ROUTINE _117_LOAD_ALARM_DATA_AI 
				N: NOP();
				RC: "INITIALIZE LOOP INDEX$N"
				    " $N"
				    "";
				N: MOV(-1,X);
				RC: "FOR ALL AI$N"
				    "skip if the type is zero$N"
				    "";
				N: LBL(OBJ)[ADD(X,1,X) ,EQU(cAI[X].TYPE,0) JMP(SKIP) ];
				RC: "report any alarms this object has$N"
				    "";
				N: AlarmReporting(AlarmReporting,cAI[X].ALARM[0],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cAI[X].ALARM[1],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cAI[X].ALARM[2],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cAI[X].ALARM[3],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cAI[X].ALARM[4],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cAI[X].ALARM[5],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cAI[X].ALARM[6],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cAI[X].ALARM[7],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM);
				RC: "Loop Back to Label$N"
				    " $N"
				    "";
				N: LBL(SKIP)LES(X,cSETUP.NO_AI)JMP(OBJ);
		END_ROUTINE

		ROUTINE _117_LOAD_ALARM_DATA_AO 
				N: NOP();
				RC: "INITIALIZE LOOP INDEX$N"
				    " $N"
				    "";
				N: MOV(-1,X);
				RC: "FOR ALL DO$N"
				    "skip if the type is zero$N"
				    "";
				N: LBL(OBJ)[ADD(X,1,X) ,EQU(cAO[X].TYPE,0) JMP(SKIP) ];
				RC: "report any alarms this object has$N"
				    "";
				N: AlarmReporting(AlarmReporting,cAO[X].ALARM[0],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cAO[X].ALARM[1],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cAO[X].ALARM[2],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cAO[X].ALARM[3],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM);
				RC: "Loop Back to Label$N"
				    " $N"
				    "";
				N: LBL(SKIP)LES(X,cSETUP.NO_AO)JMP(OBJ);
		END_ROUTINE

		ROUTINE _117_LOAD_ALARM_DATA_DI 
				N: NOP();
				RC: "INITIALIZE LOOP INDEX$N"
				    " $N"
				    "";
				N: MOV(-1,X);
				RC: "FOR ALL DI$N"
				    "skip if the type is zero$N"
				    "";
				N: LBL(OBJ)[ADD(X,1,X) ,EQU(cDI[X].TYPE,0) JMP(SKIP) ];
				RC: "report any alarms this object has$N"
				    "";
				N: AlarmReporting(AlarmReporting,cDI[X].ALARM[0],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cDI[X].ALARM[1],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cDI[X].ALARM[2],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM);
				RC: "Loop Back to Label$N"
				    " $N"
				    "";
				N: LBL(SKIP)LES(X,cSETUP.NO_DI)JMP(OBJ);
		END_ROUTINE

		ROUTINE _117_LOAD_ALARM_DATA_DO 
				N: NOP();
				RC: "INITIALIZE LOOP INDEX$N"
				    " $N"
				    "";
				N: MOV(-1,X);
				RC: "FOR ALL DO$N"
				    "skip if the type is zero$N"
				    "";
				N: LBL(OBJ)[ADD(X,1,X) ,EQU(cDO[X].TYPE,0) JMP(SKIP) ];
				RC: "report any alarms this object has$N"
				    "";
				N: AlarmReporting(AlarmReporting,cDO[X].ALARM[0],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cDO[X].ALARM[1],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cDO[X].ALARM[2],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM);
				RC: "Loop Back to Label$N"
				    " $N"
				    "";
				N: LBL(SKIP)LES(X,cSETUP.NO_DO)JMP(OBJ);
		END_ROUTINE

		ROUTINE _117_LOAD_ALARM_DATA_PHZ 
				N: NOP();
				RC: "INITIALIZE LOOP INDEX$N"
				    " $N"
				    "";
				N: MOV(-1,Y);
				RC: "FOR ALL AI$N"
				    "skip if the type is zero$N"
				    "";
				N: LBL(OBJ)[ADD(Y,1,Y) ,EQU(cPHZ[Y].TYPE,0) JMP(SKIP) ];
				RC: "report any alarms this object has$N"
				    "";
				N: AlarmReporting(AlarmReporting,cPHZ[Y].ALARM[0],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cPHZ[Y].ALARM[1],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cPHZ[Y].ALARM[2],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cPHZ[Y].ALARM[3],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cPHZ[Y].ALARM[4],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cPHZ[Y].ALARM[5],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cPHZ[Y].ALARM[6],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cPHZ[Y].ALARM[7],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM);
				RC: "Loop Back to Label$N"
				    " $N"
				    "";
				N: LBL(SKIP)LES(X,cSETUP.NO_PHASE)JMP(OBJ);
		END_ROUTINE

		ROUTINE _117_LOAD_ALARM_DATA_UNIT 
				N: NOP();
				N: AlarmReporting(AlarmReporting,cUNIT[1].ALARM[0],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM)AlarmReporting(AlarmReporting,cUNIT[1].ALARM[1],cCOMMON.DATE_TIME_STRING,cCOMMON.TIME_BASED_ID,rRPT_ALARM);
		END_ROUTINE

		ROUTINE _118_LOAD_EVENT_DATA_DI 
				N: NOP();
				N: OTL(SampleDIForReportMask.REPORT.ENABLED)[MOV(0,SampleDIForReportMask.REPORT.CMD.Mask.BITS) ,OTL(SampleDIForReportMask.REPORT.CMD.Mask.AUTO) OTL(SampleDIForReportMask.REPORT.CMD.Mask.MAN) ,OTL(SampleDIForReportMask.REPORT.CMD.Mask.RESET) ,OTU(SampleDIForReportMask.REPORT.CMD.Mask.ON_ONS) OTU(SampleDIForReportMask.REPORT.CMD.Mask.OFF_ONS) ][MOV(0,SampleDIForReportMask.REPORT.STAT_TRUE.Mask.BITS) MOV(0,SampleDIForReportMask.REPORT.STAT_FALSE.Mask.BITS) ,OTL(SampleDIForReportMask.REPORT.STAT_TRUE.Mask.AUTO) OTU(SampleDIForReportMask.REPORT.STAT_FALSE.Mask.AUTO) ,OTL(SampleDIForReportMask.REPORT.STAT_TRUE.Mask.MAN) OTU(SampleDIForReportMask.REPORT.STAT_FALSE.Mask.MAN) ,OTL(SampleDIForReportMask.REPORT.STAT_TRUE.Mask.ENERGIZED) OTL(SampleDIForReportMask.REPORT.STAT_FALSE.Mask.ENERGIZED) ,OTL(SampleDIForReportMask.REPORT.STAT_TRUE.Mask.ON) OTU(SampleDIForReportMask.REPORT.STAT_FALSE.Mask.ON) ,OTL(SampleDIForReportMask.REPORT.STAT_TRUE.Mask.OFF) OTU(SampleDIForReportMask.REPORT.STAT_FALSE.Mask.OFF) ,OTL(SampleDIForReportMask.REPORT.STAT_TRUE.Mask.FAULT) OTL(SampleDIForReportMask.REPORT.STAT_FALSE.Mask.FAULT) ,OTU(SampleDIForReportMask.REPORT.STAT_TRUE.Mask.ON_ONS) OTU(SampleDIForReportMask.REPORT.STAT_FALSE.Mask.ON_ONS) ,OTU(SampleDIForReportMask.REPORT.STAT_TRUE.Mask.OFF_ONS) OTU(SampleDIForReportMask.REPORT.STAT_FALSE.Mask.OFF_ONS) ];
				N: MOV(0,X);
				N: LBL(DEV)[ADD(X,1,X) ,XIO(cDI[X].REPORT.ENABLED) JMP(SKIP) ];
				N: XIC(cDI[X].CMD.AUTO)XIC(cDI[X].REPORT.CMD.Mask.AUTO)ONS(cDI[X].REPORT.CMD.Oneshot.AUTO)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230100,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDI[X].CMD.MAN)XIC(cDI[X].REPORT.CMD.Mask.MAN)ONS(cDI[X].REPORT.CMD.Oneshot.MAN)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230101,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDI[X].CMD.RESET)XIC(cDI[X].REPORT.CMD.Mask.RESET)ONS(cDI[X].REPORT.CMD.Oneshot.RESET)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230113,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDI[X].CMD.ON_ONS)XIC(cDI[X].REPORT.CMD.Mask.ON_ONS)ONS(cDI[X].REPORT.CMD.Oneshot.ON_ONS)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230114,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDI[X].CMD.OFF_ONS)XIC(cDI[X].REPORT.CMD.Mask.OFF_ONS)ONS(cDI[X].REPORT.CMD.Oneshot.OFF_ONS)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230115,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDI[X].STAT.AUTO)XIC(cDI[X].REPORT.STAT_TRUE.Mask.AUTO)ONS(cDI[X].REPORT.STAT_TRUE.Oneshot.AUTO)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230200,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDI[X].STAT.AUTO)XIC(cDI[X].REPORT.STAT_FALSE.Mask.AUTO)ONS(cDI[X].REPORT.STAT_FALSE.Oneshot.AUTO)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230300,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDI[X].STAT.MAN)XIC(cDI[X].REPORT.STAT_TRUE.Mask.MAN)ONS(cDI[X].REPORT.STAT_TRUE.Oneshot.MAN)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230201,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDI[X].STAT.MAN)XIC(cDI[X].REPORT.STAT_FALSE.Mask.MAN)ONS(cDI[X].REPORT.STAT_FALSE.Oneshot.MAN)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230301,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDI[X].STAT.ENERGIZED)XIC(cDI[X].REPORT.STAT_TRUE.Mask.ENERGIZED)ONS(cDI[X].REPORT.STAT_TRUE.Oneshot.ENERGIZED)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230210,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDI[X].STAT.ENERGIZED)XIC(cDI[X].REPORT.STAT_FALSE.Mask.ENERGIZED)ONS(cDI[X].REPORT.STAT_FALSE.Oneshot.ENERGIZED)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230310,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDI[X].STAT.ON)XIC(cDI[X].REPORT.STAT_TRUE.Mask.ON)ONS(cDI[X].REPORT.STAT_TRUE.Oneshot.ON)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230211,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDI[X].STAT.ON)XIC(cDI[X].REPORT.STAT_FALSE.Mask.ON)ONS(cDI[X].REPORT.STAT_FALSE.Oneshot.ON)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230311,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDI[X].STAT.OFF)XIC(cDI[X].REPORT.STAT_TRUE.Mask.OFF)ONS(cDI[X].REPORT.STAT_TRUE.Oneshot.OFF)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230212,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDI[X].STAT.OFF)XIC(cDI[X].REPORT.STAT_FALSE.Mask.OFF)ONS(cDI[X].REPORT.STAT_FALSE.Oneshot.OFF)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230312,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDI[X].STAT.FAULT)XIC(cDI[X].REPORT.STAT_TRUE.Mask.FAULT)ONS(cDI[X].REPORT.STAT_TRUE.Oneshot.FAULT)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230213,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDI[X].STAT.FAULT)XIC(cDI[X].REPORT.STAT_FALSE.Mask.FAULT)ONS(cDI[X].REPORT.STAT_FALSE.Oneshot.FAULT)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230313,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDI[X].STAT.ON_ONS)XIC(cDI[X].REPORT.STAT_TRUE.Mask.ON_ONS)ONS(cDI[X].REPORT.STAT_TRUE.Oneshot.ON_ONS)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230214,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDI[X].STAT.ON_ONS)XIC(cDI[X].REPORT.STAT_FALSE.Mask.ON_ONS)ONS(cDI[X].REPORT.STAT_FALSE.Oneshot.ON_ONS)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230314,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDI[X].STAT.OFF_ONS)XIC(cDI[X].REPORT.STAT_TRUE.Mask.OFF_ONS)ONS(cDI[X].REPORT.STAT_TRUE.Oneshot.OFF_ONS)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230215,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDI[X].STAT.OFF_ONS)XIC(cDI[X].REPORT.STAT_FALSE.Mask.OFF_ONS)ONS(cDI[X].REPORT.STAT_FALSE.Oneshot.OFF_ONS)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(230315,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: LBL(SKIP)LES(X,cSETUP.NO_DO)JMP(DEV);
		END_ROUTINE

		ROUTINE _118_LOAD_EVENT_DATA_DO 
				N: NOP();
				N: OTU(SampleDOForReportMask.STAT.DISABLE_REPORTING)[MOV(0,SampleDOForReportMask.REPORT.CMD.Mask.BITS) ,OTL(SampleDOForReportMask.REPORT.CMD.Mask.AUTO) OTL(SampleDOForReportMask.REPORT.CMD.Mask.MAN) OTL(SampleDOForReportMask.REPORT.CMD.Mask.MODE_3) ,OTL(SampleDOForReportMask.REPORT.CMD.Mask.MAN_START) OTL(SampleDOForReportMask.REPORT.CMD.Mask.MAN_STOP) ,OTU(SampleDOForReportMask.REPORT.CMD.Mask.FWD) OTU(SampleDOForReportMask.REPORT.CMD.Mask.REV) ,OTU(SampleDOForReportMask.REPORT.CMD.Mask.STATE_1) OTU(SampleDOForReportMask.REPORT.CMD.Mask.STATE_2) ,OTL(SampleDOForReportMask.REPORT.CMD.Mask.RESET) ,OTU(SampleDOForReportMask.REPORT.CMD.Mask.ON_OPEN_BYPASS) OTU(SampleDOForReportMask.REPORT.CMD.Mask.OFF_CLOSED_BYPASS) ][MOV(0,SampleDOForReportMask.REPORT.STAT_TRUE.Mask.BITS) MOV(0,SampleDOForReportMask.REPORT.STAT_FALSE.Mask.BITS) ,OTL(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.AUTO) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.AUTO) ,OTL(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.MAN) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.MAN) ,OTL(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.MODE_3) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.MODE_3) ,OTU(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.AUTO_RUN) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.AUTO_RUN) ,OTU(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.MAN_RUN) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.MAN_RUN) ,OTU(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.MODE_3_RUN) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.MODE_3_RUN) ,OTU(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.PERMISSIVE) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.PERMISSIVE) ,OTU(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.INTERLOCK) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.INTERLOCK) ,OTU(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.ENERGIZE) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.ENERGIZE) ,OTU(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.ON_OPEN) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.ON_OPEN) ,OTU(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.OFF_CLOSED) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.OFF_CLOSED) ,OTL(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.FAULT) OTL(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.FAULT) ,OTL(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.FAIL_OPEN) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.FAIL_OPEN) ,OTU(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.FAIL_CLOSE) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.FAIL_CLOSE) ,OTU(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.FWD) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.FWD) ,OTU(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.REV) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.REV) ,OTU(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.STATE_1) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.STATE_1) ,OTU(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.STATE_2) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.STATE_2) ,OTU(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.DISCONNECT) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.DISCONNECT) ,OTU(SampleDOForReportMask.REPORT.STAT_TRUE.Mask.VFD_FAULT) OTU(SampleDOForReportMask.REPORT.STAT_FALSE.Mask.VFD_FAULT) ];
				N: MOV(0,X);
				RC: "Loop for all devices$N"
				    "Skip over devices that are not used";
				N: LBL(DEV)[ADD(X,1,X) ,[EQU(cDO[X].TYPE,0) ,XIC(cDO[X].STAT.DISABLE_REPORTING) ] JMP(SKIP) ];
				N: XIC(cDO[X].CMD.AUTO)XIC(cDO[X].REPORT.CMD.Mask.AUTO)ONS(cDO[X].REPORT.CMD.Oneshot.AUTO)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200100,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].CMD.MAN)XIC(cDO[X].REPORT.CMD.Mask.MAN)ONS(cDO[X].REPORT.CMD.Oneshot.MAN)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200101,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].CMD.MAN_START)XIC(cDO[X].REPORT.CMD.Mask.MAN_START)ONS(cDO[X].REPORT.CMD.Oneshot.MAN_START)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200104,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].CMD.MAN_STOP)XIC(cDO[X].REPORT.CMD.Mask.MAN_STOP)ONS(cDO[X].REPORT.CMD.Oneshot.MAN_STOP)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200105,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].CMD.FWD)XIC(cDO[X].REPORT.CMD.Mask.FWD)ONS(cDO[X].REPORT.CMD.Oneshot.FWD)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200107,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].CMD.REV)XIC(cDO[X].REPORT.CMD.Mask.REV)ONS(cDO[X].REPORT.CMD.Oneshot.REV)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200109,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].CMD.ON_OPEN_BYPASS)XIC(cDO[X].REPORT.CMD.Mask.ON_OPEN_BYPASS)ONS(cDO[X].REPORT.CMD.Oneshot.ON_OPEN_BYPASS)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200126,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].CMD.OFF_CLOSED_BYPASS)XIC(cDO[X].REPORT.CMD.Mask.OFF_CLOSED_BYPASS)ONS(cDO[X].REPORT.CMD.Oneshot.OFF_CLOSED_BYPASS)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200127,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].STAT.AUTO)XIC(cDO[X].REPORT.STAT_TRUE.Mask.AUTO)ONS(cDO[X].REPORT.STAT_TRUE.Oneshot.AUTO)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200200,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDO[X].STAT.AUTO)XIC(cDO[X].REPORT.STAT_FALSE.Mask.AUTO)ONS(cDO[X].REPORT.STAT_FALSE.Oneshot.AUTO)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200300,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].STAT.MAN)XIC(cDO[X].REPORT.STAT_TRUE.Mask.MAN)ONS(cDO[X].REPORT.STAT_TRUE.Oneshot.MAN)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200201,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDO[X].STAT.MAN)XIC(cDO[X].REPORT.STAT_FALSE.Mask.MAN)ONS(cDO[X].REPORT.STAT_FALSE.Oneshot.MAN)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200301,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].STAT.MODE_3)XIC(cDO[X].REPORT.STAT_TRUE.Mask.MODE_3)ONS(cDO[X].REPORT.STAT_TRUE.Oneshot.MODE_3)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200202,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDO[X].STAT.MODE_3)XIC(cDO[X].REPORT.STAT_FALSE.Mask.MODE_3)ONS(cDO[X].REPORT.STAT_FALSE.Oneshot.MODE_3)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200302,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].STAT.AUTO_RUN)XIC(cDO[X].REPORT.STAT_TRUE.Mask.AUTO_RUN)ONS(cDO[X].REPORT.STAT_TRUE.Oneshot.AUTO_RUN)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200204,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDO[X].STAT.AUTO_RUN)XIC(cDO[X].REPORT.STAT_FALSE.Mask.AUTO_RUN)ONS(cDO[X].REPORT.STAT_FALSE.Oneshot.AUTO_RUN)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200304,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].STAT.MAN_RUN)XIC(cDO[X].REPORT.STAT_TRUE.Mask.MAN_RUN)ONS(cDO[X].REPORT.STAT_TRUE.Oneshot.MAN_RUN)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200205,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDO[X].STAT.MAN_RUN)XIC(cDO[X].REPORT.STAT_FALSE.Mask.MAN_RUN)ONS(cDO[X].REPORT.STAT_FALSE.Oneshot.MAN_RUN)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200305,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].STAT.MODE_3_RUN)XIC(cDO[X].REPORT.STAT_TRUE.Mask.MODE_3_RUN)ONS(cDO[X].REPORT.STAT_TRUE.Oneshot.MODE_3_RUN)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200206,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDO[X].STAT.MODE_3_RUN)XIC(cDO[X].REPORT.STAT_FALSE.Mask.MODE_3_RUN)ONS(cDO[X].REPORT.STAT_FALSE.Oneshot.MODE_3_RUN)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200306,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].STAT.PERMISSIVE)XIC(cDO[X].REPORT.STAT_TRUE.Mask.PERMISSIVE)ONS(cDO[X].REPORT.STAT_TRUE.Oneshot.PERMISSIVE)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200208,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDO[X].STAT.PERMISSIVE)XIC(cDO[X].REPORT.STAT_FALSE.Mask.PERMISSIVE)ONS(cDO[X].REPORT.STAT_FALSE.Oneshot.PERMISSIVE)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200308,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cDO[X].MSG.PERM,rRPT_EVENT.BUFFER[0].ParamDINT[1])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].STAT.INTERLOCK)XIC(cDO[X].REPORT.STAT_TRUE.Mask.INTERLOCK)ONS(cDO[X].REPORT.STAT_TRUE.Oneshot.INTERLOCK)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200209,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDO[X].STAT.INTERLOCK)XIC(cDO[X].REPORT.STAT_FALSE.Mask.INTERLOCK)ONS(cDO[X].REPORT.STAT_FALSE.Oneshot.INTERLOCK)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200309,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cDO[X].MSG.INTRLK,rRPT_EVENT.BUFFER[0].ParamDINT[1])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].STAT.ENERGIZE)XIC(cDO[X].REPORT.STAT_TRUE.Mask.ENERGIZE)ONS(cDO[X].REPORT.STAT_TRUE.Oneshot.ENERGIZE)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200210,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDO[X].STAT.ENERGIZE)XIC(cDO[X].REPORT.STAT_FALSE.Mask.ENERGIZE)ONS(cDO[X].REPORT.STAT_FALSE.Oneshot.ENERGIZE)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200310,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cDO[X].STATISTICS.ENERGIZE_COUNT.ACC,rRPT_EVENT.BUFFER[0].ParamDINT[1])MOV(cDO[X].STATISTICS.ENERGIZE_HOURS,rRPT_EVENT.BUFFER[0].ParamREAL[0])MOV(cDO[X].STATISTICS.EnergizeHoursWarningLimit,rRPT_EVENT.BUFFER[0].ParamREAL[1])MOV(cDO[X].STATISTICS.EnergizeHoursAlarmLimit,rRPT_EVENT.BUFFER[0].ParamREAL[2])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].STAT.ON_OPEN)XIC(cDO[X].REPORT.STAT_TRUE.Mask.ON_OPEN)ONS(cDO[X].REPORT.STAT_TRUE.Oneshot.ON_OPEN)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200211,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDO[X].STAT.ON_OPEN)XIC(cDO[X].REPORT.STAT_FALSE.Mask.ON_OPEN)ONS(cDO[X].REPORT.STAT_FALSE.Oneshot.ON_OPEN)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200311,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].STAT.OFF_CLOSED)XIC(cDO[X].REPORT.STAT_TRUE.Mask.OFF_CLOSED)ONS(cDO[X].REPORT.STAT_TRUE.Oneshot.OFF_CLOSED)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200212,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDO[X].STAT.OFF_CLOSED)XIC(cDO[X].REPORT.STAT_FALSE.Mask.OFF_CLOSED)ONS(cDO[X].REPORT.STAT_FALSE.Oneshot.OFF_CLOSED)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200312,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].STAT.FAULT)XIC(cDO[X].REPORT.STAT_TRUE.Mask.FAULT)ONS(cDO[X].REPORT.STAT_TRUE.Oneshot.FAULT)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200213,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDO[X].STAT.FAULT)XIC(cDO[X].REPORT.STAT_FALSE.Mask.FAULT)ONS(cDO[X].REPORT.STAT_FALSE.Oneshot.FAULT)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200313,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].STAT.FWD)XIC(cDO[X].REPORT.STAT_TRUE.Mask.FWD)ONS(cDO[X].REPORT.STAT_TRUE.Oneshot.FWD)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200216,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDO[X].STAT.FWD)XIC(cDO[X].REPORT.STAT_FALSE.Mask.FWD)ONS(cDO[X].REPORT.STAT_FALSE.Oneshot.FWD)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200316,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].STAT.REV)XIC(cDO[X].REPORT.STAT_TRUE.Mask.REV)ONS(cDO[X].REPORT.STAT_TRUE.Oneshot.REV)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200217,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDO[X].STAT.REV)XIC(cDO[X].REPORT.STAT_FALSE.Mask.REV)ONS(cDO[X].REPORT.STAT_FALSE.Oneshot.REV)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200317,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].STAT.DISCONNECT)XIC(cDO[X].REPORT.STAT_TRUE.Mask.DISCONNECT)ONS(cDO[X].REPORT.STAT_TRUE.Oneshot.DISCONNECT)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200220,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDO[X].STAT.DISCONNECT)XIC(cDO[X].REPORT.STAT_FALSE.Mask.DISCONNECT)ONS(cDO[X].REPORT.STAT_FALSE.Oneshot.DISCONNECT)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200320,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIC(cDO[X].STAT.VFD_FAULT)XIC(cDO[X].REPORT.STAT_TRUE.Mask.VFD_FAULT)ONS(cDO[X].REPORT.STAT_TRUE.Oneshot.VFD_FAULT)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200221,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: XIO(cDO[X].STAT.VFD_FAULT)XIC(cDO[X].REPORT.STAT_FALSE.Mask.VFD_FAULT)ONS(cDO[X].REPORT.STAT_FALSE.Oneshot.VFD_FAULT)COP(rRPT_EVENT.BUFFER[500],rRPT_EVENT.BUFFER[0],1)MOV(200321,rRPT_EVENT.BUFFER[0].EventType)MOV(X,rRPT_EVENT.BUFFER[0].ParamDINT[0])MOV(cCOMMON.DATE_TIME_STRING,rRPT_EVENT.BUFFER[0].DateTimeStamp)FFL(rRPT_EVENT.BUFFER[0],rRPT_EVENT.BUFFER[1],rRPT_EVENT.CONTROL,?,?)OTU(rRPT_EVENT.CONTROL.EN);
				N: LBL(SKIP)LES(X,cSETUP.NO_DO)JMP(DEV);
		END_ROUTINE

		ROUTINE _120_RPT_RSSQL 
				RC: "$N"
				    "RSSQL TRANSACTION START LOGIC$N"
				    "=============================================$N"
				    "Start the reporting PARAMETER when there are more than the setpoint quantity of items in the queue or after a minimum time period.$N"
				    "The current queue position is stored to serve as the true setpoint number of valid transactions in the queue.$N"
				    "  this is to account for the 2 different ways in which this PARAMETER can be started.$N"
				    " $N"
				    "$N"
				    "$N"
				    "";
				N: XIC(rRPT[1].STEP.IDLE)GRT(rRPT[1].SPT[1],0)[GEQ(rRPT_PARAMETER.CONTROL.POS,rRPT[1].SPT[1]) ,XIO(rRPT_PARAMETER.CONTROL.EM) TON(rRPT[1].TMR[6],?,?) XIC(rRPT[1].TMR[6].DN) ][OTE(rRPT[1].CMD.START) ,MOV(rRPT_PARAMETER.CONTROL.POS,rRPT[1].SPT[0]) ,GRT(rRPT[1].SPT[0],rRPT[1].SPT[1]) MOV(rRPT[1].SPT[1],rRPT[1].SPT[0]) ];
				RC: "$N"
				    "RSSQL TRANSACTION START LOGIC$N"
				    "=============================================$N"
				    "Start the reporting PHASE when there are more than the setpoint quantity of items in the queue or after a minimum time period.$N"
				    "The current queue position is stored to serve as the true setpoint number of valid transactions in the queue.$N"
				    "  this is to account for the 2 different ways in which this PHASE can be started.$N"
				    " $N"
				    "$N"
				    "$N"
				    "";
				N: XIC(rRPT[2].STEP.IDLE)GRT(rRPT[2].SPT[1],0)[GEQ(rRPT_PHASE_PARAMS.CONTROL.POS,rRPT[2].SPT[1]) ,XIO(rRPT_PHASE_PARAMS.CONTROL.EM) TON(rRPT[2].TMR[6],?,?) XIC(rRPT[2].TMR[6].DN) ][OTE(rRPT[2].CMD.START) ,MOV(rRPT_PHASE_PARAMS.CONTROL.POS,rRPT[2].SPT[0]) ,GRT(rRPT[2].SPT[0],rRPT[2].SPT[1]) MOV(rRPT[2].SPT[1],rRPT[2].SPT[0]) ];
				RC: "$N"
				    "RSSQL TRANSACTION START LOGIC$N"
				    "=============================================$N"
				    "Start the reporting UNIT when there are more than the setpoint quantity of items in the queue or after a minimum time period.$N"
				    "The current queue position is stored to serve as the true setpoint number of valid transactions in the queue.$N"
				    "  this is to account for the 2 different ways in which this UNIT can be started.$N"
				    " $N"
				    "$N"
				    "$N"
				    "";
				N: XIC(rRPT[3].STEP.IDLE)GRT(rRPT[3].SPT[1],0)[GEQ(rRPT_UNIT_PARAMS.CONTROL.POS,rRPT[3].SPT[1]) ,XIO(rRPT_UNIT_PARAMS.CONTROL.EM) TON(rRPT[3].TMR[6],?,?) XIC(rRPT[3].TMR[6].DN) ][OTE(rRPT[3].CMD.START) ,MOV(rRPT_UNIT_PARAMS.CONTROL.POS,rRPT[3].SPT[0]) ,GRT(rRPT[3].SPT[0],rRPT[3].SPT[1]) MOV(rRPT[3].SPT[1],rRPT[3].SPT[0]) ];
				RC: "$N"
				    "RSSQL TRANSACTION START LOGIC$N"
				    "=============================================$N"
				    "Start the reporting BATCH when there are more than the setpoint quantity of items in the queue or after a minimum time period.$N"
				    "The current queue position is stored to serve as the true setpoint number of valid transactions in the queue.$N"
				    "  this is to account for the 2 different ways in which this BATCH can be started.$N"
				    " $N"
				    "$N"
				    "$N"
				    "";
				N: XIC(rRPT[4].STEP.IDLE)GRT(rRPT[4].SPT[1],0)[GEQ(rRPT_BATCH_PARAMS.CONTROL.POS,rRPT[4].SPT[1]) ,XIO(rRPT_BATCH_PARAMS.CONTROL.EM) TON(rRPT[4].TMR[6],?,?) XIC(rRPT[4].TMR[6].DN) ][OTE(rRPT[4].CMD.START) ,MOV(rRPT_BATCH_PARAMS.CONTROL.POS,rRPT[4].SPT[0]) ,GRT(rRPT[4].SPT[0],rRPT[4].SPT[1]) MOV(rRPT[4].SPT[1],rRPT[4].SPT[0]) ];
				RC: "$N"
				    "RSSQL TRANSACTION START LOGIC$N"
				    "=============================================$N"
				    "Start the reporting CAMPAIGN when there are more than the setpoint quantity of items in the queue or after a minimum time period.$N"
				    "The current queue position is stored to serve as the true setpoint number of valid transactions in the queue.$N"
				    "  this is to account for the 2 different ways in which this CAMPAIGN can be started.$N"
				    " $N"
				    "$N"
				    "$N"
				    "";
				N: XIC(rRPT[5].STEP.IDLE)GRT(rRPT[5].SPT[1],0)[GEQ(rRPT_CAMPAIGN.CONTROL.POS,rRPT[5].SPT[1]) ,XIO(rRPT_CAMPAIGN.CONTROL.EM) TON(rRPT[5].TMR[6],?,?) XIC(rRPT[5].TMR[6].DN) ][OTE(rRPT[5].CMD.START) ,MOV(rRPT_CAMPAIGN.CONTROL.POS,rRPT[5].SPT[0]) ,GRT(rRPT[5].SPT[0],rRPT[5].SPT[1]) MOV(rRPT[5].SPT[1],rRPT[5].SPT[0]) ];
				RC: "$N"
				    "RSSQL TRANSACTION START LOGIC$N"
				    "=============================================$N"
				    "Start the reporting INVENTORY when there are more than the setpoint quantity of items in the queue or after a minimum time period.$N"
				    "The current queue position is stored to serve as the true setpoint number of valid transactions in the queue.$N"
				    "  this is to account for the 2 different ways in which this INVENTORY can be started.$N"
				    " $N"
				    "$N"
				    "$N"
				    "";
				N: XIC(rRPT[6].STEP.IDLE)GRT(rRPT[6].SPT[1],0)[GEQ(rRPT_INVENTORY_MOVE.CONTROL.POS,rRPT[6].SPT[1]) ,XIO(rRPT_INVENTORY_MOVE.CONTROL.EM) TON(rRPT[6].TMR[6],?,?) XIC(rRPT[6].TMR[6].DN) ][OTE(rRPT[6].CMD.START) ,MOV(rRPT_INVENTORY_MOVE.CONTROL.POS,rRPT[6].SPT[0]) ,GRT(rRPT[6].SPT[0],rRPT[6].SPT[1]) MOV(rRPT[6].SPT[1],rRPT[6].SPT[0]) ];
				RC: "$N"
				    "RSSQL TRANSACTION START LOGIC$N"
				    "=============================================$N"
				    "Start the reporting ALARMS when there are more than the setpoint quantity of items in the queue or after a minimum time period.$N"
				    "The current queue position is stored to serve as the true setpoint number of valid transactions in the queue.$N"
				    "  this is to account for the 2 different ways in which this BATCH can be started.$N"
				    " $N"
				    "$N"
				    "$N"
				    "";
				N: XIC(rRPT[7].STEP.IDLE)GRT(rRPT[7].SPT[1],0)[GEQ(rRPT_ALARM.CONTROL.POS,rRPT[7].SPT[1]) ,XIO(rRPT_ALARM.CONTROL.EM) TON(rRPT[7].TMR[6],?,?) XIC(rRPT[7].TMR[6].DN) ][OTE(rRPT[7].CMD.START) ,MOV(rRPT_ALARM.CONTROL.POS,rRPT[7].SPT[0]) ,GRT(rRPT[7].SPT[0],rRPT[7].SPT[1]) MOV(rRPT[7].SPT[1],rRPT[7].SPT[0]) ];
				RC: "$N"
				    "RSSQL TRANSACTION START LOGIC$N"
				    "=============================================$N"
				    "Start the reporting EVENT when there are more than the setpoint quantity of items in the queue or after a minimum time period.$N"
				    "The current queue position is stored to serve as the true setpoint number of valid transactions in the queue.$N"
				    " $N"
				    "$N"
				    "$N"
				    "";
				N: XIC(rRPT[8].STEP.IDLE)GRT(rRPT[8].SPT[1],0)[GEQ(rRPT_EVENT.CONTROL.POS,rRPT[8].SPT[1]) ,XIO(rRPT_EVENT.CONTROL.EM) TON(rRPT[8].TMR[6],?,?) XIC(rRPT[8].TMR[6].DN) ][OTE(rRPT[8].CMD.START) ,MOV(rRPT_EVENT.CONTROL.POS,rRPT[8].SPT[0]) ,GRT(rRPT[8].SPT[0],rRPT[8].SPT[1]) MOV(rRPT[8].SPT[1],rRPT[8].SPT[0]) ];
		END_ROUTINE

		ROUTINE _121_RPT_PARAMETER 
				RC: "$N"
				    "Transfer PHASE/UNIT/LINE PARAMETER RECORDS to RSSQL$N"
				    "===================================================================================================================================================$N"
				    "$N"
				    "The purpose of this routine is to trigger RSSQL transactions.$N"
				    "Transactions are buffered into a Queue datastructure.$N"
				    "Each transaction represents an event that is destined to be stored in one or more tables in the database(s)$N"
				    "$N"
				    "This logic controls the triggering, handshaking of up to 10 parallel transactions.$N"
				    "The SPT[1] defines the maximum number of parallel transactions to be triggered.$N"
				    "The timer 6, defines a time interval after which a non-empty queue will be processed.$N"
				    "$N"
				    "When the phase is active, all valid transactions are triggered, RSSQL sets a handshake to indicate$N"
				    " success or failure of the transaction, and a time-out timer is started for each individual transaction.$N"
				    "When all have been either handshaked or have timed out, then the phase completes and the buffered is$N"
				    " cleared of those valid transactions.$N"
				    " $N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Zero out transaction structures, set number of transactions";
				N: [XIC(rRPT[1].STEP.SETTLE) ,XIC(rRPT[1].STEP.INITIALIZE) ]COP(cBLANK_TRANSACTION[0],rRPT_PARAMETER.RSSQL[0],41)MOV(0,rRPT[1].ACTUAL[0]);
				RC: "TRANSACTION LOOP$N"
				    "======================================================$N"
				    "";
				N: MOV(1,X);
				RC: "Both setpoint and current buffer position must be greater and equal to the transaction index in order to trigger the transaction.$N"
				    " $N"
				    "Otherwise, the inhibit bit is set, this is used to determine when all transactions have been processed.$N"
				    " $N"
				    " $N"
				    "";
				N: LBL(RSSQL)XIC(rRPT[1].STEP.ACTIVE)[GEQ(rRPT[1].SPT[0],X) GEQ(rRPT_PARAMETER.CONTROL.POS,X) OTE(rRPT_PARAMETER.RSSQL[X].Trigger) ,LES(rRPT[1].SPT[0],X) OTE(rRPT_PARAMETER.RSSQL[X].Inhibit) ];
				RC: "Run the time out timer$N"
				    " $N"
				    "";
				N: MOV(15000,rRPT_PARAMETER.RSSQL[X].FaultTimer.PRE)XIC(rRPT[1].STEP.ACTIVE)XIC(rRPT_PARAMETER.RSSQL[X].Trigger)XIO(rRPT_PARAMETER.RSSQL[X].BindResult.0)TON(rRPT_PARAMETER.RSSQL[X].FaultTimer,?,?);
				RC: "RSSQL writes a 1 to bit 0 when the transaction is complete$N"
				    "RSSQL writes a 1 to bit 1 if there was an error during the transaction$N"
				    " $N"
				    "The error code is actually written into the most significant 14 bits of the integer,$N"
				    " therefore divide by 4 to get the true error code.$N"
				    " $N"
				    "";
				N: [XIO(rRPT_PARAMETER.RSSQL[X].FaultTimer.DN) ,]XIC(rRPT_PARAMETER.RSSQL[X].BindResult.0)[XIO(rRPT_PARAMETER.RSSQL[X].BindResult.1) OTE(rRPT_PARAMETER.RSSQL[X].Complete) ,XIC(rRPT_PARAMETER.RSSQL[X].BindResult.1) OTE(rRPT_PARAMETER.RSSQL[X].Error) ];
				RC: "Set the transaction done bit for each transaction$N"
				    " $N"
				    "";
				N: [XIC(rRPT_PARAMETER.RSSQL[X].Complete) ,XIC(rRPT_PARAMETER.RSSQL[X].FaultTimer.DN) ,XIC(rRPT_PARAMETER.RSSQL[X].Error) ,XIC(rRPT_PARAMETER.RSSQL[X].Inhibit) ]OTE(rRPT_PARAMETER.RSSQL[X].Done);
				N: ADD(1,X,X)LEQ(X,40)JMP(RSSQL);
				RC: "ALL TRANSACTIONS DONE$N"
				    "======================================================$N"
				    "When all transactions have either completed successfully, errored-out, or timed-out, then set the overall transaction complete bit.$N"
				    " $N"
				    "";
				N: XIC(rRPT[1].STEP.ACTIVE)XIC(rRPT_PARAMETER.RSSQL[1].Done)XIC(rRPT_PARAMETER.RSSQL[2].Done)XIC(rRPT_PARAMETER.RSSQL[3].Done)XIC(rRPT_PARAMETER.RSSQL[4].Done)XIC(rRPT_PARAMETER.RSSQL[5].Done)XIC(rRPT_PARAMETER.RSSQL[6].Done)XIC(rRPT_PARAMETER.RSSQL[7].Done)XIC(rRPT_PARAMETER.RSSQL[8].Done)XIC(rRPT_PARAMETER.RSSQL[9].Done)XIC(rRPT_PARAMETER.RSSQL[10].Done)XIC(rRPT_PARAMETER.RSSQL[11].Done)XIC(rRPT_PARAMETER.RSSQL[12].Done)XIC(rRPT_PARAMETER.RSSQL[13].Done)XIC(rRPT_PARAMETER.RSSQL[14].Done)XIC(rRPT_PARAMETER.RSSQL[15].Done)XIC(rRPT_PARAMETER.RSSQL[16].Done)XIC(rRPT_PARAMETER.RSSQL[17].Done)XIC(rRPT_PARAMETER.RSSQL[18].Done)XIC(rRPT_PARAMETER.RSSQL[19].Done)XIC(rRPT_PARAMETER.RSSQL[20].Done)XIC(rRPT_PARAMETER.RSSQL[21].Done)XIC(rRPT_PARAMETER.RSSQL[22].Done)XIC(rRPT_PARAMETER.RSSQL[23].Done)XIC(rRPT_PARAMETER.RSSQL[24].Done)XIC(rRPT_PARAMETER.RSSQL[25].Done)XIC(rRPT_PARAMETER.RSSQL[26].Done)XIC(rRPT_PARAMETER.RSSQL[27].Done)XIC(rRPT_PARAMETER.RSSQL[28].Done)XIC(rRPT_PARAMETER.RSSQL[29].Done)XIC(rRPT_PARAMETER.RSSQL[30].Done)XIC(rRPT_PARAMETER.RSSQL[31].Done)XIC(rRPT_PARAMETER.RSSQL[32].Done)XIC(rRPT_PARAMETER.RSSQL[33].Done)XIC(rRPT_PARAMETER.RSSQL[34].Done)XIC(rRPT_PARAMETER.RSSQL[35].Done)XIC(rRPT_PARAMETER.RSSQL[36].Done)XIC(rRPT_PARAMETER.RSSQL[37].Done)XIC(rRPT_PARAMETER.RSSQL[38].Done)XIC(rRPT_PARAMETER.RSSQL[39].Done)XIC(rRPT_PARAMETER.RSSQL[40].Done)MOV(1000,rRPT[1].TMR[5].PRE)TON(rRPT[1].TMR[5],?,?);
				N: XIO(cTransactionManagerWatchdog.EN)XIC(rRPT[1].TMR[5].DN)OTE(rRPT_PARAMETER.RSSQL[0].Complete);
				RC: "SKIP UNLOAD (POP) LOOP WHILE RSSQL IS PROCESSING TRANSACTION$N"
				    "===================================================================================$N"
				    "The rungs following this control the unload of the spedified number of items from the queue$N"
				    " after the parallel transactions are completed.  The unload (pop) operation is controlled using a loop$N"
				    "  flow cnotrol programming structure, this rung will cause the loop to be skipped until the$N"
				    "   transactions have been finished.$N"
				    " $N"
				    "$N"
				    "";
				N: XIO(rRPT_PARAMETER.RSSQL[0].Complete)JMP(SKIP_POP);
				RC: "POP LOOP LABEL$N"
				    "$N"
				    " $N"
				    "";
				N: LBL(POP)NOP();
				RC: "CREATE A FLIP-FLOP BIT$N"
				    "==============================================$N"
				    "This rung is executed each time through the loop.  Each time the rung is executed,$N"
				    " the state of the bit is toggled from false to true, then true to false, and so on.$N"
				    "$N"
				    "The bit is used on next rung to create false to true transition that triggers the FFU instruciton$N"
				    " to pop an item off the queue.";
				N: XIO(rRPT[1].OS[2])OTE(rRPT[1].OS[2]);
				RC: "ALL TRANSACTIONS COMPLETE - POP ITEMS OFF THE QUEUE$N"
				    "==============================================================================$N"
				    "When the transaction has completed, errored out, or timed-out, $N"
				    "  every-other scan, as long as the queue is not empty and we still need to$N"
				    "  pop more items off queue, then call the unload and increment the counter.$N"
				    " $N"
				    "";
				N: XIC(rRPT[1].OS[2])[XIO(rRPT_PARAMETER.CONTROL.EM) LES(rRPT[1].ACTUAL[0],rRPT[1].SPT[0]) FFU(rRPT_PARAMETER.BUFFER[1],rRPT_PARAMETER.BUFFER[0],rRPT_PARAMETER.CONTROL,?,?) ,ADD(rRPT[1].ACTUAL[0],1,rRPT[1].ACTUAL[0]) ];
				RC: "Continue to pop items from reporting buffer";
				N: LES(rRPT[1].ACTUAL[0],rRPT[1].SPT[0])JMP(POP);
				RC: "Error trap in case actual gets big";
				N: GRT(rRPT[1].ACTUAL[0],rRPT[1].SPT[0])MOV(0,rRPT[1].ACTUAL[0]);
				N: LBL(SKIP_POP)NOP();
				RC: "PHASE COMPLETE - ITEMS HAVE BEEN POPPED$N"
				    "==============================================================================$N"
				    "When the transaction has completed successfully or errored out,$N"
				    "  wait for the items to be popped off the queue, or if queue has been emptied,$N"
				    "   set the complete status bit.$N"
				    " $N"
				    "";
				N: XIC(rRPT[1].STEP.ACTIVE)XIC(rRPT_PARAMETER.RSSQL[0].Complete)[GEQ(rRPT[1].ACTUAL[0],rRPT[1].SPT[0]) ,XIC(rRPT_PARAMETER.CONTROL.EM) ]OTE(rRPT[1].STAT.COMPLETE);
				N: [XIO(rRPT[1].STEP.ACTIVE) ONS(rRPT[1].OS[0]) GRT(rRPT[1].TMR[2].ACC,rRPT[1].ACTUAL[1]) MOV(rRPT[1].TMR[2].ACC,rRPT[1].ACTUAL[1]) ,XIC(rRPT[1].STEP.ACTIVE) MOV(300000,rRPT[1].TMR[2].PRE) TON(rRPT[1].TMR[2],?,?) ];
				RC: "Record failed transaction$N"
				    "";
				N: [XIC(rRPT_PARAMETER.RSSQL[1].Error) ,XIC(rRPT_PARAMETER.RSSQL[2].Error) ,XIC(rRPT_PARAMETER.RSSQL[3].Error) ,XIC(rRPT_PARAMETER.RSSQL[4].Error) ,XIC(rRPT_PARAMETER.RSSQL[5].Error) ,XIC(rRPT_PARAMETER.RSSQL[6].Error) ,XIC(rRPT_PARAMETER.RSSQL[7].Error) ,XIC(rRPT_PARAMETER.RSSQL[8].Error) ,XIC(rRPT_PARAMETER.RSSQL[9].Error) ,XIC(rRPT_PARAMETER.RSSQL[10].Error) ]ONS(rRPT[1].OS[8])ADD(1,rRPT[1].ACTUAL[4],rRPT[1].ACTUAL[4]);
				RC: "Record failed transaction$N"
				    "";
				N: [XIC(rRPT_PARAMETER.RSSQL[1].FaultTimer.DN) ,XIC(rRPT_PARAMETER.RSSQL[2].FaultTimer.DN) ,XIC(rRPT_PARAMETER.RSSQL[3].FaultTimer.DN) ,XIC(rRPT_PARAMETER.RSSQL[4].FaultTimer.DN) ,XIC(rRPT_PARAMETER.RSSQL[5].FaultTimer.DN) ,XIC(rRPT_PARAMETER.RSSQL[6].FaultTimer.DN) ,XIC(rRPT_PARAMETER.RSSQL[7].FaultTimer.DN) ,XIC(rRPT_PARAMETER.RSSQL[8].FaultTimer.DN) ,XIC(rRPT_PARAMETER.RSSQL[9].FaultTimer.DN) ,XIC(rRPT_PARAMETER.RSSQL[10].FaultTimer.DN) ]ONS(rRPT[1].OS[9])ADD(1,rRPT[1].ACTUAL[5],rRPT[1].ACTUAL[5]);
				RC: "$N"
				    "RSSQL TRANSACTION START LOGIC$N"
				    "=============================================$N"
				    "Start the reporting phase when there are more than the setpoint quantity of items in the queue or after a minimum time period.$N"
				    "$N"
				    "";
				N: GEQ(rRPT_PARAMETER.CONTROL.POS,rRPT[1].ACTUAL[3])MOV(rRPT_PARAMETER.CONTROL.POS,rRPT[1].ACTUAL[3]);
		END_ROUTINE

		ROUTINE _122_RPT_PHASE 
				RC: "$N"
				    "Transfer PHASE RECORDS to RSSQL$N"
				    "===================================================================================================================================================$N"
				    "$N"
				    "The purpose of this routine is to trigger RSSQL transactions.$N"
				    "Transactions are buffered into a Queue datastructure.$N"
				    "Each transaction represents an event that is destined to be stored in one or more tables in the database(s)$N"
				    "$N"
				    "This logic controls the triggering, handshaking of up to 10 parallel transactions.$N"
				    "The SPT[1] defines the maximum number of parallel transactions to be triggered.$N"
				    "The timer 6, defines a time interval after which a non-empty queue will be processed.$N"
				    "$N"
				    "When the phase is active, all valid transactions are triggered, RSSQL sets a handshake to indicate$N"
				    " success or failure of the transaction, and a time-out timer is started for each individual transaction.$N"
				    "When all have been either handshaked or have timed out, then the phase completes and the buffered is$N"
				    " cleared of those valid transactions.$N"
				    " $N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Zero out transaction structures, set number of transactions";
				N: [XIC(rRPT[2].STEP.SETTLE) ,XIC(rRPT[2].STEP.INITIALIZE) ]COP(cBLANK_TRANSACTION[0],rRPT_PHASE_PARAMS.RSSQL[0],41)MOV(0,rRPT[2].ACTUAL[0]);
				RC: "TRANSACTION LOOP$N"
				    "======================================================$N"
				    "";
				N: MOV(1,X);
				RC: "Both setpoint and current buffer position must be greater and equal to the transaction index in order to trigger the transaction.$N"
				    " $N"
				    "Otherwise, the inhibit bit is set, this is used to determine when all transactions have been processed.$N"
				    " $N"
				    " $N"
				    "";
				N: LBL(RSSQL)XIC(rRPT[2].STEP.ACTIVE)[GEQ(rRPT[2].SPT[0],X) GEQ(rRPT_PHASE_PARAMS.CONTROL.POS,X) OTE(rRPT_PHASE_PARAMS.RSSQL[X].Trigger) ,LES(rRPT[2].SPT[0],X) OTE(rRPT_PHASE_PARAMS.RSSQL[X].Inhibit) ];
				RC: "Run the time out timer$N"
				    " $N"
				    "";
				N: MOV(15000,rRPT_PHASE_PARAMS.RSSQL[X].FaultTimer.PRE)XIC(rRPT[2].STEP.ACTIVE)XIC(rRPT_PHASE_PARAMS.RSSQL[X].Trigger)XIO(rRPT_PHASE_PARAMS.RSSQL[X].BindResult.0)TON(rRPT_PHASE_PARAMS.RSSQL[X].FaultTimer,?,?);
				RC: "RSSQL writes a 1 to bit 0 when the transaction is complete$N"
				    "RSSQL writes a 1 to bit 1 if there was an error during the transaction$N"
				    " $N"
				    "The error code is actually written into the most significant 14 bits of the integer,$N"
				    " therefore divide by 4 to get the true error code.$N"
				    " $N"
				    "";
				N: [XIO(rRPT_PHASE_PARAMS.RSSQL[X].FaultTimer.DN) ,]XIC(rRPT_PHASE_PARAMS.RSSQL[X].BindResult.0)[XIO(rRPT_PHASE_PARAMS.RSSQL[X].BindResult.1) OTE(rRPT_PHASE_PARAMS.RSSQL[X].Complete) ,XIC(rRPT_PHASE_PARAMS.RSSQL[X].BindResult.1) OTE(rRPT_PHASE_PARAMS.RSSQL[X].Error) ];
				RC: "Set the transaction done bit for each transaction$N"
				    " $N"
				    "";
				N: [XIC(rRPT_PHASE_PARAMS.RSSQL[X].Complete) ,XIC(rRPT_PHASE_PARAMS.RSSQL[X].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[X].Error) ,XIC(rRPT_PHASE_PARAMS.RSSQL[X].Inhibit) ]OTE(rRPT_PHASE_PARAMS.RSSQL[X].Done);
				N: ADD(1,X,X)LEQ(X,20)JMP(RSSQL);
				RC: "ALL TRANSACTIONS DONE$N"
				    "======================================================$N"
				    "When all transactions have either completed successfully, errored-out, or timed-out, then set the overall transaction complete bit.$N"
				    " $N"
				    "";
				N: XIC(rRPT[2].STEP.ACTIVE)XIC(rRPT_PHASE_PARAMS.RSSQL[1].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[2].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[3].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[4].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[5].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[6].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[7].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[8].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[9].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[10].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[11].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[12].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[13].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[14].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[15].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[16].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[17].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[18].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[19].Done)XIC(rRPT_PHASE_PARAMS.RSSQL[20].Done)MOV(1000,rRPT[2].TMR[5].PRE)TON(rRPT[2].TMR[5],?,?);
				N: XIO(cTransactionManagerWatchdog.EN)XIC(rRPT[2].TMR[5].DN)OTE(rRPT_PHASE_PARAMS.RSSQL[0].Complete);
				RC: "SKIP UNLOAD (POP) LOOP WHILE RSSQL IS PROCESSING TRANSACTION$N"
				    "===================================================================================$N"
				    "The rungs following this control the unload of the spedified number of items from the queue$N"
				    " after the parallel transactions are completed.  The unload (pop) operation is controlled using a loop$N"
				    "  flow cnotrol programming structure, this rung will cause the loop to be skipped until the$N"
				    "   transactions have been finished.$N"
				    " $N"
				    "$N"
				    "";
				N: XIO(rRPT_PHASE_PARAMS.RSSQL[0].Complete)JMP(SKIP_POP);
				RC: "POP LOOP LABEL$N"
				    "$N"
				    " $N"
				    "";
				N: LBL(POP)NOP();
				RC: "CREATE A FLIP-FLOP BIT$N"
				    "==============================================$N"
				    "This rung is executed each time through the loop.  Each time the rung is executed,$N"
				    " the state of the bit is toggled from false to true, then true to false, and so on.$N"
				    "$N"
				    "The bit is used on next rung to create false to true transition that triggers the FFU instruciton$N"
				    " to pop an item off the queue.";
				N: XIO(rRPT[2].OS[2])OTE(rRPT[2].OS[2]);
				RC: "ALL TRANSACTIONS COMPLETE - POP ITEMS OFF THE QUEUE$N"
				    "==============================================================================$N"
				    "When the transaction has completed, errored out, or timed-out, $N"
				    "  every-other scan, as long as the queue is not empty and we still need to$N"
				    "  pop more items off queue, then call the unload and increment the counter.$N"
				    " $N"
				    "";
				N: XIC(rRPT[2].OS[2])[XIO(rRPT_PHASE_PARAMS.CONTROL.EM) LES(rRPT[2].ACTUAL[0],rRPT[2].SPT[0]) FFU(rRPT_PHASE_PARAMS.BUFFER[1],rRPT_PHASE_PARAMS.BUFFER[0],rRPT_PHASE_PARAMS.CONTROL,?,?) ,ADD(rRPT[2].ACTUAL[0],1,rRPT[2].ACTUAL[0]) ];
				RC: "Continue to pop items from reporting buffer";
				N: LES(rRPT[2].ACTUAL[0],rRPT[2].SPT[0])JMP(POP);
				RC: "Error trap in case actual gets big";
				N: GRT(rRPT[2].ACTUAL[0],rRPT[2].SPT[0])MOV(0,rRPT[2].ACTUAL[0]);
				N: LBL(SKIP_POP)NOP();
				RC: "PHASE COMPLETE - ITEMS HAVE BEEN POPPED$N"
				    "==============================================================================$N"
				    "When the transaction has completed successfully or errored out,$N"
				    "  wait for the items to be popped off the queue, or if queue has been emptied,$N"
				    "   set the complete status bit.$N"
				    " $N"
				    "";
				N: XIC(rRPT[2].STEP.ACTIVE)XIC(rRPT_PHASE_PARAMS.RSSQL[0].Complete)[GEQ(rRPT[2].ACTUAL[0],rRPT[2].SPT[0]) ,XIC(rRPT_PHASE_PARAMS.CONTROL.EM) ]OTE(rRPT[2].STAT.COMPLETE);
				N: [XIO(rRPT[2].STEP.ACTIVE) ONS(rRPT[2].OS[0]) GRT(rRPT[2].TMR[2].ACC,rRPT[2].ACTUAL[1]) MOV(rRPT[2].TMR[2].ACC,rRPT[2].ACTUAL[1]) ,XIC(rRPT[2].STEP.ACTIVE) TON(rRPT[2].TMR[2],?,?) ];
				RC: "Record failed transaction$N"
				    "";
				N: [XIC(rRPT_PHASE_PARAMS.RSSQL[1].Error) ,XIC(rRPT_PHASE_PARAMS.RSSQL[2].Error) ,XIC(rRPT_PHASE_PARAMS.RSSQL[3].Error) ,XIC(rRPT_PHASE_PARAMS.RSSQL[4].Error) ,XIC(rRPT_PHASE_PARAMS.RSSQL[5].Error) ,XIC(rRPT_PHASE_PARAMS.RSSQL[6].Error) ,XIC(rRPT_PHASE_PARAMS.RSSQL[7].Error) ,XIC(rRPT_PHASE_PARAMS.RSSQL[8].Error) ,XIC(rRPT_PHASE_PARAMS.RSSQL[9].Error) ,XIC(rRPT_PHASE_PARAMS.RSSQL[10].Error) ]ONS(rRPT[2].OS[8])ADD(1,rRPT[2].ACTUAL[4],rRPT[2].ACTUAL[4]);
				RC: "Record failed transaction$N"
				    "";
				N: [XIC(rRPT_PHASE_PARAMS.RSSQL[1].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[2].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[3].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[4].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[5].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[6].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[7].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[8].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[9].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[10].FaultTimer.DN) ]ONS(rRPT[2].OS[9])ADD(1,rRPT[2].ACTUAL[5],rRPT[2].ACTUAL[5]);
				RC: "Maintain a record of the high water mark, i.e. the max number of transacations ever to be in the queue.$N"
				    " $N"
				    "";
				N: GEQ(rRPT_PHASE_PARAMS.CONTROL.POS,rRPT[2].ACTUAL[3])MOV(rRPT_PHASE_PARAMS.CONTROL.POS,rRPT[2].ACTUAL[3]);
		END_ROUTINE

		ROUTINE _123_RPT_UNIT 
				RC: "$N"
				    "Transfer UNIT RECORDS to RSSQL$N"
				    "===================================================================================================================================================$N"
				    "$N"
				    "The purpose of this routine is to trigger RSSQL transactions.$N"
				    "Transactions are buffered into a Queue datastructure.$N"
				    "Each transaction represents an event that is destined to be stored in one or more tables in the database(s)$N"
				    "$N"
				    "This logic controls the triggering, handshaking of up to 10 parallel transactions.$N"
				    "The SPT[1] defines the maximum number of parallel transactions to be triggered.$N"
				    "The timer 6, defines a time interval after which a non-empty queue will be processed.$N"
				    "$N"
				    "When the UNIT is active, all valid transactions are triggered, RSSQL sets a handshake to indicate$N"
				    " success or failure of the transaction, and a time-out timer is started for each individual transaction.$N"
				    "When all have been either handshaked or have timed out, then the UNIT completes and the buffered is$N"
				    " cleared of those valid transactions.$N"
				    " $N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Zero out transaction structures, set number of transactions";
				N: [XIC(rRPT[3].STEP.SETTLE) ,XIC(rRPT[3].STEP.INITIALIZE) ]COP(cBLANK_TRANSACTION[0],rRPT_UNIT_PARAMS.RSSQL[0],41)MOV(0,rRPT[3].ACTUAL[0]);
				RC: "TRANSACTION LOOP$N"
				    "======================================================$N"
				    "";
				N: MOV(1,X);
				RC: "Both setpoint and current buffer position must be greater and equal to the transaction index in order to trigger the transaction.$N"
				    " $N"
				    "Otherwise, the inhibit bit is set, this is used to determine when all transactions have been processed.$N"
				    " $N"
				    " $N"
				    "";
				N: LBL(RSSQL)XIC(rRPT[3].STEP.ACTIVE)[GEQ(rRPT[3].SPT[0],X) GEQ(rRPT_UNIT_PARAMS.CONTROL.POS,X) OTE(rRPT_UNIT_PARAMS.RSSQL[X].Trigger) ,LES(rRPT[3].SPT[0],X) OTE(rRPT_UNIT_PARAMS.RSSQL[X].Inhibit) ];
				RC: "Run the time out timer$N"
				    " $N"
				    "";
				N: MOV(10000,rRPT_UNIT_PARAMS.RSSQL[X].FaultTimer.PRE)XIC(rRPT[3].STEP.ACTIVE)XIC(rRPT_UNIT_PARAMS.RSSQL[X].Trigger)TON(rRPT_UNIT_PARAMS.RSSQL[X].FaultTimer,?,?);
				RC: "RSSQL writes a 1 to bit 0 when the transaction is complete$N"
				    "RSSQL writes a 1 to bit 1 if there was an error during the transaction$N"
				    " $N"
				    "The error code is actually written into the most significant 14 bits of the integer,$N"
				    " therefore divide by 4 to get the true error code.$N"
				    " $N"
				    "";
				N: [XIO(rRPT_UNIT_PARAMS.RSSQL[X].FaultTimer.DN) ,]XIC(rRPT_UNIT_PARAMS.RSSQL[X].BindResult.0)[XIO(rRPT_UNIT_PARAMS.RSSQL[X].BindResult.1) OTE(rRPT_UNIT_PARAMS.RSSQL[X].Complete) ,XIC(rRPT_UNIT_PARAMS.RSSQL[X].BindResult.1) OTE(rRPT_UNIT_PARAMS.RSSQL[X].Error) ];
				RC: "Set the transaction done bit for each transaction$N"
				    " $N"
				    "";
				N: [XIC(rRPT_UNIT_PARAMS.RSSQL[X].Complete) ,XIC(rRPT_UNIT_PARAMS.RSSQL[X].Error) ,XIC(rRPT_UNIT_PARAMS.RSSQL[X].FaultTimer.DN) ,XIC(rRPT_UNIT_PARAMS.RSSQL[X].Inhibit) ]OTE(rRPT_UNIT_PARAMS.RSSQL[X].Done);
				N: ADD(1,X,X)LEQ(X,10)JMP(RSSQL);
				RC: "ALL TRANSACTIONS DONE$N"
				    "======================================================$N"
				    "When all transactions have either completed successfully, errored-out, or timed-out, then set the overall transaction complete bit.$N"
				    " $N"
				    "";
				N: XIC(rRPT[3].STEP.ACTIVE)XIC(rRPT_UNIT_PARAMS.RSSQL[1].Done)XIC(rRPT_UNIT_PARAMS.RSSQL[2].Done)XIC(rRPT_UNIT_PARAMS.RSSQL[3].Done)XIC(rRPT_UNIT_PARAMS.RSSQL[4].Done)XIC(rRPT_UNIT_PARAMS.RSSQL[5].Done)XIC(rRPT_UNIT_PARAMS.RSSQL[6].Done)XIC(rRPT_UNIT_PARAMS.RSSQL[7].Done)XIC(rRPT_UNIT_PARAMS.RSSQL[8].Done)XIC(rRPT_UNIT_PARAMS.RSSQL[9].Done)XIC(rRPT_UNIT_PARAMS.RSSQL[10].Done)MOV(1000,rRPT[3].TMR[5].PRE)TON(rRPT[3].TMR[5],?,?);
				N: XIO(cTransactionManagerWatchdog.EN)XIC(rRPT[3].TMR[5].DN)OTE(rRPT_UNIT_PARAMS.RSSQL[0].Complete);
				RC: "SKIP UNLOAD (POP) LOOP WHILE RSSQL IS PROCESSING TRANSACTION$N"
				    "===================================================================================$N"
				    "The rungs following this control the unload of the spedified number of items from the queue$N"
				    " after the parallel transactions are completed.  The unload (pop) operation is controlled using a loop$N"
				    "  flow cnotrol programming structure, this rung will cause the loop to be skipped until the$N"
				    "   transactions have been finished.$N"
				    " $N"
				    "$N"
				    "";
				N: XIO(rRPT_UNIT_PARAMS.RSSQL[0].Complete)JMP(SKIP_POP);
				RC: "POP LOOP LABEL$N"
				    "$N"
				    " $N"
				    "";
				N: LBL(POP)NOP();
				RC: "CREATE A FLIP-FLOP BIT$N"
				    "==============================================$N"
				    "This rung is executed each time through the loop.  Each time the rung is executed,$N"
				    " the state of the bit is toggled from false to true, then true to false, and so on.$N"
				    "$N"
				    "The bit is used on next rung to create false to true transition that triggers the FFU instruciton$N"
				    " to pop an item off the queue.";
				N: XIO(rRPT[3].OS[2])OTE(rRPT[3].OS[2]);
				RC: "ALL TRANSACTIONS COMPLETE - POP ITEMS OFF THE QUEUE$N"
				    "==============================================================================$N"
				    "When the transaction has completed, errored out, or timed-out, $N"
				    "  every-other scan, as long as the queue is not empty and we still need to$N"
				    "  pop more items off queue, then call the unload and increment the counter.$N"
				    " $N"
				    "";
				N: XIC(rRPT[3].OS[2])[XIO(rRPT_UNIT_PARAMS.CONTROL.EM) LES(rRPT[3].ACTUAL[0],rRPT[3].SPT[0]) FFU(rRPT_UNIT_PARAMS.BUFFER[1],rRPT_UNIT_PARAMS.BUFFER[0],rRPT_UNIT_PARAMS.CONTROL,?,?) ,ADD(rRPT[3].ACTUAL[0],1,rRPT[3].ACTUAL[0]) ];
				RC: "Continue to pop items from reporting buffer";
				N: LES(rRPT[3].ACTUAL[0],rRPT[3].SPT[0])JMP(POP);
				RC: "Error trap in case actual gets big";
				N: GRT(rRPT[3].ACTUAL[0],rRPT[3].SPT[0])MOV(0,rRPT[3].ACTUAL[0]);
				N: LBL(SKIP_POP)NOP();
				RC: "UNIT COMPLETE - ITEMS HAVE BEEN POPPED$N"
				    "==============================================================================$N"
				    "When the transaction has completed successfully or errored out,$N"
				    "  wait for the items to be popped off the queue, or if queue has been emptied,$N"
				    "   set the complete status bit.$N"
				    " $N"
				    "";
				N: XIC(rRPT[3].STEP.ACTIVE)XIC(rRPT_UNIT_PARAMS.RSSQL[0].Complete)[GEQ(rRPT[3].ACTUAL[0],rRPT[3].SPT[0]) ,XIC(rRPT_UNIT_PARAMS.CONTROL.EM) ]OTE(rRPT[3].STAT.COMPLETE);
				N: [XIO(rRPT[3].STEP.ACTIVE) ONS(rRPT[3].OS[0]) GRT(rRPT[3].TMR[2].ACC,rRPT[3].ACTUAL[1]) MOV(rRPT[3].TMR[2].ACC,rRPT[3].ACTUAL[1]) ,XIC(rRPT[3].STEP.ACTIVE) TON(rRPT[3].TMR[2],?,?) ];
				RC: "Record failed transaction$N"
				    "";
				N: [XIC(rRPT_UNIT_PARAMS.RSSQL[1].Error) ,XIC(rRPT_UNIT_PARAMS.RSSQL[2].Error) ,XIC(rRPT_UNIT_PARAMS.RSSQL[3].Error) ,XIC(rRPT_UNIT_PARAMS.RSSQL[4].Error) ,XIC(rRPT_UNIT_PARAMS.RSSQL[5].Error) ,XIC(rRPT_UNIT_PARAMS.RSSQL[6].Error) ,XIC(rRPT_UNIT_PARAMS.RSSQL[7].Error) ,XIC(rRPT_UNIT_PARAMS.RSSQL[8].Error) ,XIC(rRPT_UNIT_PARAMS.RSSQL[9].Error) ,XIC(rRPT_UNIT_PARAMS.RSSQL[10].Error) ]ONS(rRPT[3].OS[8])ADD(1,rRPT[3].ACTUAL[4],rRPT[3].ACTUAL[4]);
				RC: "Record failed transaction$N"
				    "";
				N: [XIC(rRPT_UNIT_PARAMS.RSSQL[1].FaultTimer.DN) ,XIC(rRPT_UNIT_PARAMS.RSSQL[2].FaultTimer.DN) ,XIC(rRPT_UNIT_PARAMS.RSSQL[3].FaultTimer.DN) ,XIC(rRPT_UNIT_PARAMS.RSSQL[4].FaultTimer.DN) ,XIC(rRPT_UNIT_PARAMS.RSSQL[5].FaultTimer.DN) ,XIC(rRPT_UNIT_PARAMS.RSSQL[6].FaultTimer.DN) ,XIC(rRPT_UNIT_PARAMS.RSSQL[7].FaultTimer.DN) ,XIC(rRPT_UNIT_PARAMS.RSSQL[8].FaultTimer.DN) ,XIC(rRPT_UNIT_PARAMS.RSSQL[9].FaultTimer.DN) ,XIC(rRPT_UNIT_PARAMS.RSSQL[10].FaultTimer.DN) ]ONS(rRPT[3].OS[9])ADD(1,rRPT[3].ACTUAL[5],rRPT[3].ACTUAL[5]);
				RC: "$N"
				    "RSSQL TRANSACTION START LOGIC$N"
				    "=============================================$N"
				    "Start the reporting UNIT when there are more than the setpoint quantity of items in the queue or after a minimum time period.$N"
				    "$N"
				    "";
				N: GEQ(rRPT_UNIT_PARAMS.CONTROL.POS,rRPT[3].ACTUAL[3])MOV(rRPT_UNIT_PARAMS.CONTROL.POS,rRPT[3].ACTUAL[3]);
		END_ROUTINE

		ROUTINE _124_RPT_BATCH 
				RC: "$N"
				    "Transfer BATCH RECORDS to RSSQL$N"
				    "===================================================================================================================================================$N"
				    "$N"
				    "The purpose of this routine is to trigger RSSQL transactions.$N"
				    "Transactions are buffered into a Queue datastructure.$N"
				    "Each transaction represents an event that is destined to be stored in one or more tables in the database(s)$N"
				    "$N"
				    "This logic controls the triggering, handshaking of up to 10 parallel transactions.$N"
				    "The SPT[1] defines the maximum number of parallel transactions to be triggered.$N"
				    "The timer 6, defines a time interval after which a non-empty queue will be processed.$N"
				    "$N"
				    "When the BATCH is active, all valid transactions are triggered, RSSQL sets a handshake to indicate$N"
				    " success or failure of the transaction, and a time-out timer is started for each individual transaction.$N"
				    "When all have been either handshaked or have timed out, then the BATCH completes and the buffered is$N"
				    " cleared of those valid transactions.$N"
				    " $N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Zero out transaction structures, set number of transactions";
				N: [XIC(rRPT[4].STEP.SETTLE) ,XIC(rRPT[4].STEP.INITIALIZE) ]COP(cBLANK_TRANSACTION[0],rRPT_BATCH_PARAMS.RSSQL[0],41)MOV(0,rRPT[4].ACTUAL[0]);
				RC: "TRANSACTION LOOP$N"
				    "======================================================$N"
				    "";
				N: MOV(1,X);
				RC: "Both setpoint and current buffer position must be greater and equal to the transaction index in order to trigger the transaction.$N"
				    " $N"
				    "Otherwise, the inhibit bit is set, this is used to determine when all transactions have been processed.$N"
				    " $N"
				    " $N"
				    "";
				N: LBL(RSSQL)XIC(rRPT[4].STEP.ACTIVE)[GEQ(rRPT[4].SPT[0],X) GEQ(rRPT_BATCH_PARAMS.CONTROL.POS,X) OTE(rRPT_BATCH_PARAMS.RSSQL[X].Trigger) ,LES(rRPT[4].SPT[0],X) OTE(rRPT_BATCH_PARAMS.RSSQL[X].Inhibit) ];
				RC: "Run the time out timer$N"
				    " $N"
				    "";
				N: MOV(10000,rRPT_BATCH_PARAMS.RSSQL[X].FaultTimer.PRE)XIC(rRPT[4].STEP.ACTIVE)XIC(rRPT_BATCH_PARAMS.RSSQL[X].Trigger)TON(rRPT_BATCH_PARAMS.RSSQL[X].FaultTimer,?,?);
				RC: "RSSQL writes a 1 to bit 0 when the transaction is complete$N"
				    "RSSQL writes a 1 to bit 1 if there was an error during the transaction$N"
				    " $N"
				    "The error code is actually written into the most significant 14 bits of the integer,$N"
				    " therefore divide by 4 to get the true error code.$N"
				    " $N"
				    "";
				N: [XIO(rRPT_BATCH_PARAMS.RSSQL[X].FaultTimer.DN) ,]XIC(rRPT_BATCH_PARAMS.RSSQL[X].BindResult.0)[XIO(rRPT_BATCH_PARAMS.RSSQL[X].BindResult.1) OTE(rRPT_BATCH_PARAMS.RSSQL[X].Complete) ,XIC(rRPT_BATCH_PARAMS.RSSQL[X].BindResult.1) OTE(rRPT_BATCH_PARAMS.RSSQL[X].Error) ];
				RC: "Set the transaction done bit for each transaction$N"
				    " $N"
				    "";
				N: [XIC(rRPT_BATCH_PARAMS.RSSQL[X].Complete) ,XIC(rRPT_BATCH_PARAMS.RSSQL[X].Error) ,XIC(rRPT_BATCH_PARAMS.RSSQL[X].FaultTimer.DN) ,XIC(rRPT_BATCH_PARAMS.RSSQL[X].Inhibit) ]OTE(rRPT_BATCH_PARAMS.RSSQL[X].Done);
				N: ADD(1,X,X)LEQ(X,10)JMP(RSSQL);
				RC: "ALL TRANSACTIONS DONE$N"
				    "======================================================$N"
				    "When all transactions have either completed successfully, errored-out, or timed-out, then set the overall transaction complete bit.$N"
				    " $N"
				    "";
				N: XIC(rRPT[4].STEP.ACTIVE)XIC(rRPT_BATCH_PARAMS.RSSQL[1].Done)XIC(rRPT_BATCH_PARAMS.RSSQL[2].Done)XIC(rRPT_BATCH_PARAMS.RSSQL[3].Done)XIC(rRPT_BATCH_PARAMS.RSSQL[4].Done)XIC(rRPT_BATCH_PARAMS.RSSQL[5].Done)XIC(rRPT_BATCH_PARAMS.RSSQL[6].Done)XIC(rRPT_BATCH_PARAMS.RSSQL[7].Done)XIC(rRPT_BATCH_PARAMS.RSSQL[8].Done)XIC(rRPT_BATCH_PARAMS.RSSQL[9].Done)XIC(rRPT_BATCH_PARAMS.RSSQL[10].Done)MOV(1000,rRPT[4].TMR[5].PRE)TON(rRPT[4].TMR[5],?,?);
				N: XIO(cTransactionManagerWatchdog.EN)XIC(rRPT[4].TMR[5].DN)OTE(rRPT_BATCH_PARAMS.RSSQL[0].Complete);
				RC: "SKIP UNLOAD (POP) LOOP WHILE RSSQL IS PROCESSING TRANSACTION$N"
				    "===================================================================================$N"
				    "The rungs following this control the unload of the spedified number of items from the queue$N"
				    " after the parallel transactions are completed.  The unload (pop) operation is controlled using a loop$N"
				    "  flow cnotrol programming structure, this rung will cause the loop to be skipped until the$N"
				    "   transactions have been finished.$N"
				    " $N"
				    "$N"
				    "";
				N: XIO(rRPT_BATCH_PARAMS.RSSQL[0].Complete)JMP(SKIP_POP);
				RC: "POP LOOP LABEL$N"
				    "$N"
				    " $N"
				    "";
				N: LBL(POP)NOP();
				RC: "CREATE A FLIP-FLOP BIT$N"
				    "==============================================$N"
				    "This rung is executed each time through the loop.  Each time the rung is executed,$N"
				    " the state of the bit is toggled from false to true, then true to false, and so on.$N"
				    "$N"
				    "The bit is used on next rung to create false to true transition that triggers the FFU instruciton$N"
				    " to pop an item off the queue.";
				N: XIO(rRPT[4].OS[2])OTE(rRPT[4].OS[2]);
				RC: "ALL TRANSACTIONS COMPLETE - POP ITEMS OFF THE QUEUE$N"
				    "==============================================================================$N"
				    "When the transaction has completed, errored out, or timed-out, $N"
				    "  every-other scan, as long as the queue is not empty and we still need to$N"
				    "  pop more items off queue, then call the unload and increment the counter.$N"
				    " $N"
				    "";
				N: XIC(rRPT[4].OS[2])[XIO(rRPT_BATCH_PARAMS.CONTROL.EM) LES(rRPT[4].ACTUAL[0],rRPT[4].SPT[0]) FFU(rRPT_BATCH_PARAMS.BUFFER[1],rRPT_BATCH_PARAMS.BUFFER[0],rRPT_BATCH_PARAMS.CONTROL,?,?) ,ADD(rRPT[4].ACTUAL[0],1,rRPT[4].ACTUAL[0]) ];
				RC: "Continue to pop items from reporting buffer";
				N: LES(rRPT[4].ACTUAL[0],rRPT[4].SPT[0])JMP(POP);
				RC: "Error trap in case actual gets big";
				N: GRT(rRPT[4].ACTUAL[0],rRPT[4].SPT[0])MOV(0,rRPT[4].ACTUAL[0]);
				N: LBL(SKIP_POP)NOP();
				RC: "BATCH COMPLETE - ITEMS HAVE BEEN POPPED$N"
				    "==============================================================================$N"
				    "When the transaction has completed successfully or errored out,$N"
				    "  wait for the items to be popped off the queue, or if queue has been emptied,$N"
				    "   set the complete status bit.$N"
				    " $N"
				    "";
				N: XIC(rRPT[4].STEP.ACTIVE)XIC(rRPT_BATCH_PARAMS.RSSQL[0].Complete)[GEQ(rRPT[4].ACTUAL[0],rRPT[4].SPT[0]) ,XIC(rRPT_BATCH_PARAMS.CONTROL.EM) ]OTE(rRPT[4].STAT.COMPLETE);
				N: [XIO(rRPT[4].STEP.ACTIVE) ONS(rRPT[4].OS[0]) GRT(rRPT[4].TMR[2].ACC,rRPT[4].ACTUAL[1]) MOV(rRPT[4].TMR[2].ACC,rRPT[4].ACTUAL[1]) ,XIC(rRPT[4].STEP.ACTIVE) TON(rRPT[4].TMR[2],?,?) ];
				RC: "$N"
				    "RSSQL TRANSACTION START LOGIC$N"
				    "=============================================$N"
				    "Start the reporting BATCH when there are more than the setpoint quantity of items in the queue or after a minimum time period.$N"
				    "$N"
				    "";
				N: GEQ(rRPT_BATCH_PARAMS.CONTROL.POS,rRPT[4].ACTUAL[3])MOV(rRPT_BATCH_PARAMS.CONTROL.POS,rRPT[4].ACTUAL[3]);
		END_ROUTINE

		ROUTINE _125_RPT_CAMPAIGN 
				RC: "$N"
				    "Transfer CAMPAIGN RECORDS to RSSQL$N"
				    "===============================================================================================$N"
				    "$N"
				    "The purpose of this routine is to trigger RSSQL transactions.$N"
				    "Transactions are buffered into a Queue datastructure.$N"
				    "Each transaction represents an event that is destined to be stored in one or more tables in the database(s)$N"
				    "$N"
				    "This logic controls the triggering, handshaking of up to 10 parallel transactions.$N"
				    "The SPT[1] defines the maximum number of parallel transactions to be triggered.$N"
				    "The timer 6, defines a time interval after which a non-empty queue will be processed.$N"
				    "$N"
				    "When the BATCH is active, all valid transactions are triggered, RSSQL sets a handshake to indicate$N"
				    " success or failure of the transaction, and a time-out timer is started for each individual transaction.$N"
				    "When all have been either handshaked or have timed out, then the BATCH completes and the buffered is$N"
				    " cleared of those valid transactions.$N"
				    " $N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Zero out transaction structures, set number of transactions";
				N: [XIC(rRPT[5].STEP.SETTLE) ,XIC(rRPT[5].STEP.INITIALIZE) ]COP(cBLANK_TRANSACTION[0],rRPT_CAMPAIGN.RSSQL[0],41)MOV(0,rRPT[5].ACTUAL[0]);
				RC: "TRANSACTION LOOP$N"
				    "======================================================$N"
				    "";
				N: MOV(1,X);
				RC: "Both setpoint and current buffer position must be greater and equal to the transaction index in order to trigger the transaction.$N"
				    " $N"
				    "Otherwise, the inhibit bit is set, this is used to determine when all transactions have been processed.$N"
				    " $N"
				    " $N"
				    "";
				N: LBL(RSSQL)XIC(rRPT[5].STEP.ACTIVE)[GEQ(rRPT[5].SPT[0],X) GEQ(rRPT_CAMPAIGN.CONTROL.POS,X) OTE(rRPT_CAMPAIGN.RSSQL[X].Trigger) ,LES(rRPT[5].SPT[0],X) OTE(rRPT_CAMPAIGN.RSSQL[X].Inhibit) ];
				RC: "Run the time out timer$N"
				    " $N"
				    "";
				N: MOV(10000,rRPT_CAMPAIGN.RSSQL[X].FaultTimer.PRE)XIC(rRPT[5].STEP.ACTIVE)XIC(rRPT_CAMPAIGN.RSSQL[X].Trigger)TON(rRPT_CAMPAIGN.RSSQL[X].FaultTimer,?,?);
				RC: "RSSQL writes a 1 to bit 0 when the transaction is complete$N"
				    "RSSQL writes a 1 to bit 1 if there was an error during the transaction$N"
				    " $N"
				    "The error code is actually written into the most significant 14 bits of the integer,$N"
				    " therefore divide by 4 to get the true error code.$N"
				    " $N"
				    "";
				N: [XIO(rRPT_CAMPAIGN.RSSQL[X].FaultTimer.DN) ,]XIC(rRPT_CAMPAIGN.RSSQL[X].BindResult.0)[XIO(rRPT_CAMPAIGN.RSSQL[X].BindResult.1) OTE(rRPT_CAMPAIGN.RSSQL[X].Complete) ,XIC(rRPT_CAMPAIGN.RSSQL[X].BindResult.1) OTE(rRPT_CAMPAIGN.RSSQL[X].Error) ];
				RC: "Set the transaction done bit for each transaction$N"
				    " $N"
				    "";
				N: [XIC(rRPT_CAMPAIGN.RSSQL[X].Complete) ,XIC(rRPT_CAMPAIGN.RSSQL[X].Error) ,XIC(rRPT_CAMPAIGN.RSSQL[X].FaultTimer.DN) ,XIC(rRPT_CAMPAIGN.RSSQL[X].Inhibit) ]OTE(rRPT_CAMPAIGN.RSSQL[X].Done);
				N: ADD(1,X,X)LEQ(X,10)JMP(RSSQL);
				RC: "ALL TRANSACTIONS DONE$N"
				    "======================================================$N"
				    "When all transactions have either completed successfully, errored-out, or timed-out, then set the overall transaction complete bit.$N"
				    " $N"
				    "";
				N: XIC(rRPT[5].STEP.ACTIVE)XIC(rRPT_CAMPAIGN.RSSQL[1].Done)XIC(rRPT_CAMPAIGN.RSSQL[2].Done)XIC(rRPT_CAMPAIGN.RSSQL[3].Done)XIC(rRPT_CAMPAIGN.RSSQL[4].Done)XIC(rRPT_CAMPAIGN.RSSQL[5].Done)XIC(rRPT_CAMPAIGN.RSSQL[6].Done)XIC(rRPT_CAMPAIGN.RSSQL[7].Done)XIC(rRPT_CAMPAIGN.RSSQL[8].Done)XIC(rRPT_CAMPAIGN.RSSQL[9].Done)XIC(rRPT_CAMPAIGN.RSSQL[10].Done)MOV(1000,rRPT[5].TMR[5].PRE)TON(rRPT[5].TMR[5],?,?);
				N: XIO(cTransactionManagerWatchdog.EN)XIC(rRPT[5].TMR[5].DN)OTE(rRPT_CAMPAIGN.RSSQL[0].Complete);
				RC: "SKIP UNLOAD (POP) LOOP WHILE RSSQL IS PROCESSING TRANSACTION$N"
				    "===================================================================================$N"
				    "The rungs following this control the unload of the spedified number of items from the queue$N"
				    " after the parallel transactions are completed.  The unload (pop) operation is controlled using a loop$N"
				    "  flow cnotrol programming structure, this rung will cause the loop to be skipped until the$N"
				    "   transactions have been finished.$N"
				    " $N"
				    "$N"
				    "";
				N: XIO(rRPT_CAMPAIGN.RSSQL[0].Complete)JMP(SKIP_POP);
				RC: "POP LOOP LABEL$N"
				    "$N"
				    " $N"
				    "";
				N: LBL(POP)NOP();
				RC: "CREATE A FLIP-FLOP BIT$N"
				    "==============================================$N"
				    "This rung is executed each time through the loop.  Each time the rung is executed,$N"
				    " the state of the bit is toggled from false to true, then true to false, and so on.$N"
				    "$N"
				    "The bit is used on next rung to create false to true transition that triggers the FFU instruciton$N"
				    " to pop an item off the queue.";
				N: XIO(rRPT[5].OS[2])OTE(rRPT[5].OS[2]);
				RC: "ALL TRANSACTIONS COMPLETE - POP ITEMS OFF THE QUEUE$N"
				    "==============================================================================$N"
				    "When the transaction has completed, errored out, or timed-out, $N"
				    "  every-other scan, as long as the queue is not empty and we still need to$N"
				    "  pop more items off queue, then call the unload and increment the counter.$N"
				    " $N"
				    "";
				N: XIC(rRPT[5].OS[2])[XIO(rRPT_CAMPAIGN.CONTROL.EM) LES(rRPT[5].ACTUAL[0],rRPT[5].SPT[0]) FFU(rRPT_CAMPAIGN.BUFFER[1],rRPT_CAMPAIGN.BUFFER[0],rRPT_CAMPAIGN.CONTROL,?,?) ,ADD(rRPT[5].ACTUAL[0],1,rRPT[5].ACTUAL[0]) ];
				RC: "Continue to pop items from reporting buffer";
				N: LES(rRPT[5].ACTUAL[0],rRPT[5].SPT[0])JMP(POP);
				RC: "Error trap in case actual gets big";
				N: GRT(rRPT[5].ACTUAL[0],rRPT[5].SPT[0])MOV(0,rRPT[5].ACTUAL[0]);
				N: LBL(SKIP_POP)NOP();
				RC: "BATCH COMPLETE - ITEMS HAVE BEEN POPPED$N"
				    "==============================================================================$N"
				    "When the transaction has completed successfully or errored out,$N"
				    "  wait for the items to be popped off the queue, or if queue has been emptied,$N"
				    "   set the complete status bit.$N"
				    " $N"
				    "";
				N: XIC(rRPT[5].STEP.ACTIVE)XIC(rRPT_CAMPAIGN.RSSQL[0].Complete)[GEQ(rRPT[5].ACTUAL[0],rRPT[5].SPT[0]) ,XIC(rRPT_CAMPAIGN.CONTROL.EM) ]OTE(rRPT[5].STAT.COMPLETE);
				N: [XIO(rRPT[5].STEP.ACTIVE) ONS(rRPT[5].OS[0]) GRT(rRPT[5].TMR[2].ACC,rRPT[5].ACTUAL[1]) MOV(rRPT[5].TMR[2].ACC,rRPT[5].ACTUAL[1]) ,XIC(rRPT[5].STEP.ACTIVE) TON(rRPT[5].TMR[2],?,?) ];
				RC: "$N"
				    "RSSQL TRANSACTION START LOGIC$N"
				    "=============================================$N"
				    "Start the reporting BATCH when there are more than the setpoint quantity of items in the queue or after a minimum time period.$N"
				    "$N"
				    "";
				N: GEQ(rRPT_CAMPAIGN.CONTROL.POS,rRPT[5].ACTUAL[3])MOV(rRPT_CAMPAIGN.CONTROL.POS,rRPT[5].ACTUAL[3]);
		END_ROUTINE

		ROUTINE _126_RPT_INVENTORY 
				RC: "$N"
				    "Transfer INVENTORY MOVE RECORDS to RSSQL$N"
				    "===============================================================================================$N"
				    "$N"
				    "The purpose of this routine is to trigger RSSQL transactions.$N"
				    "Transactions are buffered into a Queue datastructure.$N"
				    "Each transaction represents an event that is destined to be stored in one or more tables in the database(s)$N"
				    "$N"
				    "This logic controls the triggering, handshaking of up to 10 parallel transactions.$N"
				    "The SPT[1] defines the maximum number of parallel transactions to be triggered.$N"
				    "The timer 6, defines a time interval after which a non-empty queue will be processed.$N"
				    "$N"
				    "When the BATCH is active, all valid transactions are triggered, RSSQL sets a handshake to indicate$N"
				    " success or failure of the transaction, and a time-out timer is started for each individual transaction.$N"
				    "When all have been either handshaked or have timed out, then the BATCH completes and the buffered is$N"
				    " cleared of those valid transactions.$N"
				    " $N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Zero out transaction structures, set number of transactions";
				N: [XIC(rRPT[6].STEP.SETTLE) ,XIC(rRPT[6].STEP.INITIALIZE) ]COP(cBLANK_TRANSACTION[0],rRPT_INVENTORY_MOVE.RSSQL[0],21)MOV(0,rRPT[6].ACTUAL[0]);
				RC: "TRANSACTION LOOP$N"
				    "======================================================$N"
				    "";
				N: MOV(1,X);
				RC: "Both setpoint and current buffer position must be greater and equal to the transaction index in order to trigger the transaction.$N"
				    " $N"
				    "Otherwise, the inhibit bit is set, this is used to determine when all transactions have been processed.$N"
				    " $N"
				    " $N"
				    "";
				N: LBL(RSSQL)XIC(rRPT[6].STEP.ACTIVE)[GEQ(rRPT[6].SPT[0],X) GEQ(rRPT_INVENTORY_MOVE.CONTROL.POS,X) OTE(rRPT_INVENTORY_MOVE.RSSQL[X].Trigger) ,LES(rRPT[6].SPT[0],X) OTE(rRPT_INVENTORY_MOVE.RSSQL[X].Inhibit) ];
				RC: "Run the time out timer$N"
				    " $N"
				    "";
				N: MOV(15000,rRPT_INVENTORY_MOVE.RSSQL[X].FaultTimer.PRE)XIC(rRPT[6].STEP.ACTIVE)XIC(rRPT_INVENTORY_MOVE.RSSQL[X].Trigger)XIO(rRPT_INVENTORY_MOVE.RSSQL[X].BindResult.0)TON(rRPT_INVENTORY_MOVE.RSSQL[X].FaultTimer,?,?);
				RC: "RSSQL writes a 1 to bit 0 when the transaction is complete$N"
				    "RSSQL writes a 1 to bit 1 if there was an error during the transaction$N"
				    " $N"
				    "The error code is actually written into the most significant 14 bits of the integer,$N"
				    " therefore divide by 4 to get the true error code.$N"
				    " $N"
				    "";
				N: [XIO(rRPT_INVENTORY_MOVE.RSSQL[X].FaultTimer.DN) ,]XIC(rRPT_INVENTORY_MOVE.RSSQL[X].BindResult.0)[XIO(rRPT_INVENTORY_MOVE.RSSQL[X].BindResult.1) OTE(rRPT_INVENTORY_MOVE.RSSQL[X].Complete) ,XIC(rRPT_INVENTORY_MOVE.RSSQL[X].BindResult.1) OTE(rRPT_INVENTORY_MOVE.RSSQL[X].Error) ];
				RC: "Set the transaction done bit for each transaction$N"
				    " $N"
				    "";
				N: [XIC(rRPT_INVENTORY_MOVE.RSSQL[X].Complete) ,XIC(rRPT_INVENTORY_MOVE.RSSQL[X].FaultTimer.DN) ,XIC(rRPT_INVENTORY_MOVE.RSSQL[X].Error) ,XIC(rRPT_INVENTORY_MOVE.RSSQL[X].Inhibit) ]OTE(rRPT_INVENTORY_MOVE.RSSQL[X].Done);
				N: ADD(1,X,X)LEQ(X,20)JMP(RSSQL);
				RC: "ALL TRANSACTIONS DONE$N"
				    "======================================================$N"
				    "When all transactions have either completed successfully, errored-out, or timed-out, then set the overall transaction complete bit.$N"
				    " $N"
				    "";
				N: XIC(rRPT[6].STEP.ACTIVE)XIC(rRPT_INVENTORY_MOVE.RSSQL[1].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[2].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[3].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[4].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[5].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[6].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[7].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[8].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[9].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[10].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[11].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[12].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[13].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[14].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[15].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[16].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[17].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[18].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[19].Done)XIC(rRPT_INVENTORY_MOVE.RSSQL[20].Done)MOV(1000,rRPT[6].TMR[5].PRE)TON(rRPT[6].TMR[5],?,?);
				N: XIO(cTransactionManagerWatchdog.EN)XIC(rRPT[6].TMR[5].DN)OTE(rRPT_INVENTORY_MOVE.RSSQL[0].Complete);
				RC: "SKIP UNLOAD (POP) LOOP WHILE RSSQL IS PROCESSING TRANSACTION$N"
				    "===================================================================================$N"
				    "The rungs following this control the unload of the spedified number of items from the queue$N"
				    " after the parallel transactions are completed.  The unload (pop) operation is controlled using a loop$N"
				    "  flow cnotrol programming structure, this rung will cause the loop to be skipped until the$N"
				    "   transactions have been finished.$N"
				    " $N"
				    "$N"
				    "";
				N: XIO(rRPT_INVENTORY_MOVE.RSSQL[0].Complete)JMP(SKIP_POP);
				RC: "POP LOOP LABEL$N"
				    "$N"
				    " $N"
				    "";
				N: LBL(POP)NOP();
				RC: "CREATE A FLIP-FLOP BIT$N"
				    "==============================================$N"
				    "This rung is executed each time through the loop.  Each time the rung is executed,$N"
				    " the state of the bit is toggled from false to true, then true to false, and so on.$N"
				    "$N"
				    "The bit is used on next rung to create false to true transition that triggers the FFU instruciton$N"
				    " to pop an item off the queue.";
				N: XIO(rRPT[6].OS[2])OTE(rRPT[6].OS[2]);
				RC: "ALL TRANSACTIONS COMPLETE - POP ITEMS OFF THE QUEUE$N"
				    "==============================================================================$N"
				    "When the transaction has completed, errored out, or timed-out, $N"
				    "  every-other scan, as long as the queue is not empty and we still need to$N"
				    "  pop more items off queue, then call the unload and increment the counter.$N"
				    " $N"
				    "";
				N: XIC(rRPT[6].OS[2])[XIO(rRPT_INVENTORY_MOVE.CONTROL.EM) LES(rRPT[6].ACTUAL[0],rRPT[6].SPT[0]) FFU(rRPT_INVENTORY_MOVE.BUFFER[1],rRPT_INVENTORY_MOVE.BUFFER[0],rRPT_INVENTORY_MOVE.CONTROL,?,?) ,ADD(rRPT[6].ACTUAL[0],1,rRPT[6].ACTUAL[0]) ];
				RC: "Continue to pop items from reporting buffer";
				N: LES(rRPT[6].ACTUAL[0],rRPT[6].SPT[0])JMP(POP);
				RC: "Error trap in case actual gets big";
				N: GRT(rRPT[6].ACTUAL[0],rRPT[6].SPT[0])MOV(0,rRPT[6].ACTUAL[0]);
				N: LBL(SKIP_POP)NOP();
				RC: "BATCH COMPLETE - ITEMS HAVE BEEN POPPED$N"
				    "==============================================================================$N"
				    "When the transaction has completed successfully or errored out,$N"
				    "  wait for the items to be popped off the queue, or if queue has been emptied,$N"
				    "   set the complete status bit.$N"
				    " $N"
				    "";
				N: XIC(rRPT[6].STEP.ACTIVE)XIC(rRPT_INVENTORY_MOVE.RSSQL[0].Complete)[GEQ(rRPT[6].ACTUAL[0],rRPT[6].SPT[0]) ,XIC(rRPT_INVENTORY_MOVE.CONTROL.EM) ]OTE(rRPT[6].STAT.COMPLETE);
				N: [XIO(rRPT[6].STEP.ACTIVE) ONS(rRPT[6].OS[0]) GRT(rRPT[6].TMR[2].ACC,rRPT[6].ACTUAL[1]) MOV(rRPT[6].TMR[2].ACC,rRPT[6].ACTUAL[1]) ,XIC(rRPT[6].STEP.ACTIVE) TON(rRPT[6].TMR[2],?,?) ];
				N: [XIC(rRPT_PHASE_PARAMS.RSSQL[1].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[2].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[3].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[4].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[5].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[6].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[7].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[8].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[9].FaultTimer.DN) ,XIC(rRPT_PHASE_PARAMS.RSSQL[10].FaultTimer.DN) ]ONS(rRPT[6].OS[9])ADD(1,rRPT[6].ACTUAL[5],rRPT[6].ACTUAL[5]);
				RC: "$N"
				    "RSSQL TRANSACTION START LOGIC$N"
				    "=============================================$N"
				    "Start the reporting BATCH when there are more than the setpoint quantity of items in the queue or after a minimum time period.$N"
				    "$N"
				    "";
				N: GEQ(rRPT_INVENTORY_MOVE.CONTROL.POS,rRPT[6].ACTUAL[3])MOV(rRPT_INVENTORY_MOVE.CONTROL.POS,rRPT[6].ACTUAL[3]);
		END_ROUTINE

		ROUTINE _127_RPT_ALARMS 
				N: NOP();
				RC: "$N"
				    "Transfer ALARMS RECORDS to RSSQL$N"
				    "============================================================================================$N"
				    "$N"
				    "The purpose of this routine is to trigger RSSQL transactions.$N"
				    "Transactions are buffered into a Queue datastructure.$N"
				    "Each transaction represents an event that is destined to be stored in one or more tables in the database(s)$N"
				    "$N"
				    "This logic controls the triggering, handshaking of up to 20 parallel transactions.$N"
				    "The SPT[1] defines the maximum number of parallel transactions to be triggered.$N"
				    "The timer 6, defines a time interval after which a non-empty queue will be processed.$N"
				    "$N"
				    "When the phase is active, all valid transactions are triggered, RSSQL sets a handshake to indicate$N"
				    " success or failure of the transaction, and a time-out timer is started for each individual transaction.$N"
				    "When all have been either handshaked or have timed out, then the phase completes and the buffered is$N"
				    " cleared of those valid transactions.$N"
				    " $N"
				    "$N"
				    "$N"
				    "";
				N: NOP();
				RC: "Zero out transaction structures, set number of transactions";
				N: [XIC(rRPT[7].STEP.SETTLE) ,XIC(rRPT[7].STEP.INITIALIZE) ]COP(cBLANK_TRANSACTION[0],rRPT_ALARM.RSSQL[0],21)MOV(0,rRPT[7].ACTUAL[0]);
				RC: "TRANSACTION LOOP$N"
				    "======================================================$N"
				    "";
				N: MOV(1,X);
				RC: "Both setpoint and current buffer position must be greater and equal to the transaction index in order to trigger the transaction.$N"
				    " $N"
				    "Otherwise, the inhibit bit is set, this is used to determine when all transactions have been processed.$N"
				    " $N"
				    " $N"
				    "";
				N: LBL(RSSQL)XIC(rRPT[7].STEP.ACTIVE)[GEQ(rRPT[7].SPT[0],X) GEQ(rRPT_ALARM.CONTROL.POS,X) OTE(rRPT_ALARM.RSSQL[X].Trigger) ,LES(rRPT[7].SPT[0],X) OTE(rRPT_ALARM.RSSQL[X].Inhibit) ];
				RC: "Run the time out timer$N"
				    " $N"
				    "";
				N: MOV(15000,rRPT_ALARM.RSSQL[X].FaultTimer.PRE)XIC(rRPT[7].STEP.ACTIVE)XIC(rRPT_ALARM.RSSQL[X].Trigger)XIO(rRPT_ALARM.RSSQL[X].BindResult.0)TON(rRPT_ALARM.RSSQL[X].FaultTimer,?,?);
				RC: "RSSQL writes a 1 to bit 0 when the transaction is complete$N"
				    "RSSQL writes a 1 to bit 1 if there was an error during the transaction$N"
				    " $N"
				    "The error code is actually written into the most significant 14 bits of the integer,$N"
				    " therefore divide by 4 to get the true error code.$N"
				    " $N"
				    "";
				N: [XIO(rRPT_ALARM.RSSQL[X].FaultTimer.DN) ,]XIC(rRPT_ALARM.RSSQL[X].BindResult.0)[XIO(rRPT_ALARM.RSSQL[X].BindResult.1) OTE(rRPT_ALARM.RSSQL[X].Complete) ,XIC(rRPT_ALARM.RSSQL[X].BindResult.1) OTE(rRPT_ALARM.RSSQL[X].Error) ];
				RC: "Set the transaction done bit for each transaction$N"
				    " $N"
				    "";
				N: [XIC(rRPT_ALARM.RSSQL[X].Complete) ,XIC(rRPT_ALARM.RSSQL[X].FaultTimer.DN) ,XIC(rRPT_ALARM.RSSQL[X].Error) ,XIC(rRPT_ALARM.RSSQL[X].Inhibit) ]OTE(rRPT_ALARM.RSSQL[X].Done);
				N: ADD(1,X,X)LEQ(X,20)JMP(RSSQL);
				RC: "ALL TRANSACTIONS DONE$N"
				    "======================================================$N"
				    "When all transactions have either completed successfully, errored-out, or timed-out, then set the overall transaction complete bit.$N"
				    " $N"
				    "";
				N: XIC(rRPT[7].STEP.ACTIVE)XIC(rRPT_ALARM.RSSQL[1].Done)XIC(rRPT_ALARM.RSSQL[2].Done)XIC(rRPT_ALARM.RSSQL[3].Done)XIC(rRPT_ALARM.RSSQL[4].Done)XIC(rRPT_ALARM.RSSQL[5].Done)XIC(rRPT_ALARM.RSSQL[6].Done)XIC(rRPT_ALARM.RSSQL[7].Done)XIC(rRPT_ALARM.RSSQL[8].Done)XIC(rRPT_ALARM.RSSQL[9].Done)XIC(rRPT_ALARM.RSSQL[10].Done)XIC(rRPT_ALARM.RSSQL[11].Done)XIC(rRPT_ALARM.RSSQL[12].Done)XIC(rRPT_ALARM.RSSQL[13].Done)XIC(rRPT_ALARM.RSSQL[14].Done)XIC(rRPT_ALARM.RSSQL[15].Done)XIC(rRPT_ALARM.RSSQL[16].Done)XIC(rRPT_ALARM.RSSQL[17].Done)XIC(rRPT_ALARM.RSSQL[18].Done)XIC(rRPT_ALARM.RSSQL[19].Done)XIC(rRPT_ALARM.RSSQL[20].Done)MOV(1000,rRPT[7].TMR[5].PRE)TON(rRPT[7].TMR[5],?,?);
				N: XIO(cTransactionManagerWatchdog.EN)XIC(rRPT[7].TMR[5].DN)OTE(rRPT_ALARM.RSSQL[0].Complete);
				RC: "SKIP UNLOAD (POP) LOOP WHILE RSSQL IS PROCESSING TRANSACTION$N"
				    "===================================================================================$N"
				    "The rungs following this control the unload of the spedified number of items from the queue$N"
				    " after the parallel transactions are completed.  The unload (pop) operation is controlled using a loop$N"
				    "  flow cnotrol programming structure, this rung will cause the loop to be skipped until the$N"
				    "   transactions have been finished.$N"
				    " $N"
				    "$N"
				    "";
				N: XIO(rRPT_ALARM.RSSQL[0].Complete)JMP(SKIP_POP);
				RC: "POP LOOP LABEL$N"
				    "$N"
				    " $N"
				    "";
				N: LBL(POP)NOP();
				RC: "CREATE A FLIP-FLOP BIT$N"
				    "==============================================$N"
				    "This rung is executed each time through the loop.  Each time the rung is executed,$N"
				    " the state of the bit is toggled from false to true, then true to false, and so on.$N"
				    "$N"
				    "The bit is used on next rung to create false to true transition that triggers the FFU instruciton$N"
				    " to pop an item off the queue.";
				N: XIO(rRPT[7].OS[2])OTE(rRPT[7].OS[2]);
				RC: "ALL TRANSACTIONS COMPLETE - POP ITEMS OFF THE QUEUE$N"
				    "==============================================================================$N"
				    "When the transaction has completed, errored out, or timed-out, $N"
				    "  every-other scan, as long as the queue is not empty and we still need to$N"
				    "  pop more items off queue, then call the unload and increment the counter.$N"
				    " $N"
				    "";
				N: XIC(rRPT[7].OS[2])[XIO(rRPT_ALARM.CONTROL.EM) LES(rRPT[7].ACTUAL[0],rRPT[7].SPT[0]) FFU(rRPT_ALARM.BUFFER[1],rRPT_ALARM.BUFFER[0],rRPT_ALARM.CONTROL,?,?) ,ADD(rRPT[7].ACTUAL[0],1,rRPT[7].ACTUAL[0]) ];
				RC: "Continue to pop items from reporting buffer";
				N: LES(rRPT[7].ACTUAL[0],rRPT[7].SPT[0])JMP(POP);
				RC: "Error trap in case actual gets big";
				N: GRT(rRPT[7].ACTUAL[0],rRPT[7].SPT[0])MOV(0,rRPT[7].ACTUAL[0]);
				N: LBL(SKIP_POP)NOP();
				RC: "PHASE COMPLETE - ITEMS HAVE BEEN POPPED$N"
				    "==============================================================================$N"
				    "When the transaction has completed successfully or errored out,$N"
				    "  wait for the items to be popped off the queue, or if queue has been emptied,$N"
				    "   set the complete status bit.$N"
				    " $N"
				    "";
				N: XIC(rRPT[7].STEP.ACTIVE)XIC(rRPT_ALARM.RSSQL[0].Complete)[GEQ(rRPT[7].ACTUAL[0],rRPT[7].SPT[0]) ,XIC(rRPT_ALARM.CONTROL.EM) ]OTE(rRPT[7].STAT.COMPLETE);
				N: [XIO(rRPT[7].STEP.ACTIVE) ONS(rRPT[7].OS[0]) GRT(rRPT[7].TMR[2].ACC,rRPT[7].ACTUAL[1]) MOV(rRPT[7].TMR[2].ACC,rRPT[7].ACTUAL[1]) ,XIC(rRPT[7].STEP.ACTIVE) MOV(300000,rRPT[7].TMR[2].PRE) TON(rRPT[7].TMR[2],?,?) ];
		END_ROUTINE

		ROUTINE _128_RPT_EVENT 
				N: NOP();
				N: [XIC(rRPT[8].STEP.SETTLE) ,XIC(rRPT[8].STEP.INITIALIZE) ]COP(cBLANK_TRANSACTION[0],rRPT_EVENT.RSSQL[0],41)MOV(0,rRPT[8].ACTUAL[0]);
				N: MOV(1,X);
				N: LBL(RSSQL)XIC(rRPT[8].STEP.ACTIVE)[GEQ(rRPT[8].SPT[0],X) GEQ(rRPT_EVENT.CONTROL.POS,X) OTE(rRPT_EVENT.RSSQL[X].Trigger) ,LES(rRPT[8].SPT[0],X) OTE(rRPT_EVENT.RSSQL[X].Inhibit) ];
				N: MOV(15000,rRPT_EVENT.RSSQL[X].FaultTimer.PRE)XIC(rRPT[8].STEP.ACTIVE)XIC(rRPT_EVENT.RSSQL[X].Trigger)XIO(rRPT_EVENT.RSSQL[X].BindResult.0)TON(rRPT_EVENT.RSSQL[X].FaultTimer,?,?);
				N: [XIO(rRPT_EVENT.RSSQL[X].FaultTimer.DN) ,]XIC(rRPT_EVENT.RSSQL[X].BindResult.0)[XIO(rRPT_EVENT.RSSQL[X].BindResult.1) OTE(rRPT_EVENT.RSSQL[X].Complete) ,XIC(rRPT_EVENT.RSSQL[X].BindResult.1) OTE(rRPT_EVENT.RSSQL[X].Error) ];
				N: [XIC(rRPT_EVENT.RSSQL[X].Complete) ,XIC(rRPT_EVENT.RSSQL[X].FaultTimer.DN) ,XIC(rRPT_EVENT.RSSQL[X].Error) ,XIC(rRPT_EVENT.RSSQL[X].Inhibit) ]OTE(rRPT_EVENT.RSSQL[X].Done);
				N: ADD(1,X,X)LEQ(X,20)JMP(RSSQL);
				N: XIC(rRPT[8].STEP.ACTIVE)XIC(rRPT_EVENT.RSSQL[1].Done)XIC(rRPT_EVENT.RSSQL[2].Done)XIC(rRPT_EVENT.RSSQL[3].Done)XIC(rRPT_EVENT.RSSQL[4].Done)XIC(rRPT_EVENT.RSSQL[5].Done)XIC(rRPT_EVENT.RSSQL[6].Done)XIC(rRPT_EVENT.RSSQL[7].Done)XIC(rRPT_EVENT.RSSQL[8].Done)XIC(rRPT_EVENT.RSSQL[9].Done)XIC(rRPT_EVENT.RSSQL[10].Done)XIC(rRPT_EVENT.RSSQL[11].Done)XIC(rRPT_EVENT.RSSQL[12].Done)XIC(rRPT_EVENT.RSSQL[13].Done)XIC(rRPT_EVENT.RSSQL[14].Done)XIC(rRPT_EVENT.RSSQL[15].Done)XIC(rRPT_EVENT.RSSQL[16].Done)XIC(rRPT_EVENT.RSSQL[17].Done)XIC(rRPT_EVENT.RSSQL[18].Done)XIC(rRPT_EVENT.RSSQL[19].Done)XIC(rRPT_EVENT.RSSQL[20].Done)MOV(1000,rRPT[8].TMR[5].PRE)TON(rRPT[8].TMR[5],?,?);
				N: XIO(cTransactionManagerWatchdog.EN)XIC(rRPT[8].TMR[5].DN)OTE(rRPT_EVENT.RSSQL[0].Complete);
				N: XIO(rRPT_EVENT.RSSQL[0].Complete)JMP(SKIP_POP);
				N: LBL(POP)NOP();
				N: XIO(rRPT[8].OS[2])OTE(rRPT[8].OS[2]);
				N: XIC(rRPT[8].OS[2])[XIO(rRPT_EVENT.CONTROL.EM) LES(rRPT[8].ACTUAL[0],rRPT[8].SPT[0]) FFU(rRPT_EVENT.BUFFER[1],rRPT_EVENT.BUFFER[0],rRPT_EVENT.CONTROL,?,?) ,ADD(rRPT[8].ACTUAL[0],1,rRPT[8].ACTUAL[0]) ];
				N: LES(rRPT[8].ACTUAL[0],rRPT[8].SPT[0])JMP(POP);
				N: GRT(rRPT[8].ACTUAL[0],rRPT[8].SPT[0])MOV(0,rRPT[8].ACTUAL[0]);
				N: LBL(SKIP_POP)NOP();
				N: XIC(rRPT[8].STEP.ACTIVE)XIC(rRPT_EVENT.RSSQL[0].Complete)[GEQ(rRPT[8].ACTUAL[0],rRPT[8].SPT[0]) ,XIC(rRPT_EVENT.CONTROL.EM) ]OTE(rRPT[8].STAT.COMPLETE);
				N: [XIO(rRPT[8].STEP.ACTIVE) ONS(rRPT[8].OS[0]) GRT(rRPT[8].TMR[2].ACC,rRPT[8].ACTUAL[1]) MOV(rRPT[8].TMR[2].ACC,rRPT[8].ACTUAL[1]) ,XIC(rRPT[8].STEP.ACTIVE) MOV(300000,rRPT[8].TMR[2].PRE) TON(rRPT[8].TMR[2],?,?) ];
				RC: "Maintain a record of the high water mark, i.e. the max number of transacations ever to be in the queue.$N"
				    " $N"
				    "";
				N: GEQ(rRPT_EVENT.CONTROL.POS,rRPT[8].ACTUAL[3])MOV(rRPT_EVENT.CONTROL.POS,rRPT[8].ACTUAL[3]);
		END_ROUTINE

		ROUTINE _140_INVENTORY_UPDATE 
				N: NOP();
				N: [LEQ(rINV_LOCATION_UPDATE.STEP_INDEX,0) ,EQU(rINV_LOCATION_UPDATE.STEP_INDEX,4) ]MOV(1,rINV_LOCATION_UPDATE.STEP_INDEX);
				N: EQU(rINV_LOCATION_UPDATE.STEP_INDEX,1)[XIC(rINV_LOCATION_UPDATE.DELAY.DN) [MOV(2,rINV_LOCATION_UPDATE.STEP_INDEX) ,MOV(rINV_LOCATION_UPDATE.INDEX,rINV_LOCATION_UPDATE.START_INDEX) ] ,TON(rINV_LOCATION_UPDATE.DELAY,?,?) ];
				N: NEQ(rINV_LOCATION_UPDATE.STEP_INDEX,2)JMP(SKIP_LOAd);
				N: MOV(0,X)MOV(0,cLocationLoadIterations);
				N: LBL(FOR_EACH_TRANS)ADD(1,X,X);
				N: LBL(NOT_FOUND)[GRT(rINV_LOCATION_UPDATE.INDEX,rINV_LOCATION_UPDATE.MAX_INDEX) MOV(1,rINV_LOCATION_UPDATE.INDEX) ,GRT(cLocationLoadIterations,rINV_LOCATION_UPDATE.MAX_INDEX) MOV(1,rINV_LOCATION_UPDATE.STEP_INDEX) JMP(SKIP_LOAd) ];
				N: MOV(rINV_LOCATION_UPDATE.INDEX,Y)[LES(rINV_LOCATION_UPDATE.INDEX,rINV_LOCATION_UPDATE.START_INDEX) JMP(SKIP_LOAd) ,GEQ(rINV_LOCATION_UPDATE.INDEX,rINV_LOCATION_UPDATE.START_INDEX) [EQU(rINV_LOCATION[Y].INDEX,0) ADD(1,rINV_LOCATION_UPDATE.INDEX,rINV_LOCATION_UPDATE.INDEX) ADD(1,cLocationLoadIterations,cLocationLoadIterations) JMP(NOT_FOUND) ,GRT(rINV_LOCATION[Y].INDEX,0) COP(rINV_LOCATION[Y],rINV_LOCATION_UPDATE.LOCATION[X],1) ADD(1,rINV_LOCATION_UPDATE.INDEX,rINV_LOCATION_UPDATE.INDEX) ] ];
				N: LES(X,5)JMP(FOR_EACH_TRANS);
				N: LBL(SKIP_LOAd)EQU(rINV_LOCATION_UPDATE.STEP_INDEX,2)MOV(3,rINV_LOCATION_UPDATE.STEP_INDEX);
				N: EQU(rINV_LOCATION_UPDATE.STEP_INDEX,3)XIC(rINV_LOCATION_UPDATE.RSSQL[1].Done)XIC(rINV_LOCATION_UPDATE.RSSQL[2].Done)XIC(rINV_LOCATION_UPDATE.RSSQL[3].Done)XIC(rINV_LOCATION_UPDATE.RSSQL[4].Done)XIC(rINV_LOCATION_UPDATE.RSSQL[5].Done)MOV(4,rINV_LOCATION_UPDATE.STEP_INDEX);
				N: NEQ(rINV_LOCATION_UPDATE.STEP_INDEX,3)NEQ(rINV_LOCATION_UPDATE.STEP_INDEX,4)JMP(SKIP_TRANSACTION);
				N: MOV(1,X);
				N: LBL(RSSQL)EQU(rINV_LOCATION_UPDATE.STEP_INDEX,3)[GRT(rINV_LOCATION_UPDATE.LOCATION[X].INDEX,0) OTE(rINV_LOCATION_UPDATE.RSSQL[X].Trigger) ,EQU(rINV_LOCATION_UPDATE.LOCATION[X].INDEX,0) OTE(rINV_LOCATION_UPDATE.RSSQL[X].Inhibit) ];
				N: MOV(20000,rINV_LOCATION_UPDATE.RSSQL[X].FaultTimer.PRE)EQU(rINV_LOCATION_UPDATE.STEP_INDEX,3)XIC(rINV_LOCATION_UPDATE.RSSQL[X].Trigger)TON(rINV_LOCATION_UPDATE.RSSQL[X].FaultTimer,?,?);
				N: XIO(rINV_LOCATION_UPDATE.RSSQL[X].FaultTimer.DN)XIC(rINV_LOCATION_UPDATE.RSSQL[X].BindResult.0)[XIO(rINV_LOCATION_UPDATE.RSSQL[X].BindResult.1) OTE(rINV_LOCATION_UPDATE.RSSQL[X].Complete) ,XIC(rINV_LOCATION_UPDATE.RSSQL[X].BindResult.1) OTE(rINV_LOCATION_UPDATE.RSSQL[X].Error) ];
				N: [XIC(rINV_LOCATION_UPDATE.RSSQL[X].Complete) ,XIC(rINV_LOCATION_UPDATE.RSSQL[X].Error) ,XIC(rINV_LOCATION_UPDATE.RSSQL[X].FaultTimer.DN) ,XIC(rINV_LOCATION_UPDATE.RSSQL[X].Inhibit) ]OTE(rINV_LOCATION_UPDATE.RSSQL[X].Done);
				N: EQU(rINV_LOCATION_UPDATE.STEP_INDEX,4)GRT(rINV_LOCATION_UPDATE.LOCATION[X].INDEX,0)XIC(rINV_LOCATION_UPDATE.RSSQL[X].Complete)[MOV(rINV_LOCATION_UPDATE.LOCATION[X].INDEX,Y) ,MOV(rINV_LOCATION_UPDATE.LOCATION[X].THEORY,rINV_LOCATION[Y].THEORY) ,MOV(rINV_LOCATION_UPDATE.LOCATION[X].ID,rINV_LOCATION[Y].ID) ,COP(rINV_LOCATION_UPDATE.LOCATION[X].NAME,rINV_LOCATION[Y].NAME,1) ,MOV(rINV_LOCATION_UPDATE.LOCATION[X].INGREDIENT_ID,rINV_LOCATION[Y].INGREDIENT_ID) ,COP(rINV_LOCATION_UPDATE.LOCATION[X].INGREDIENT_CODE,rINV_LOCATION[Y].INGREDIENT_CODE,1) ,COP(rINV_LOCATION_UPDATE.LOCATION[X].INGREDIENT_NAME,rINV_LOCATION[Y].INGREDIENT_NAME,1) ];
				N: EQU(rINV_LOCATION_UPDATE.STEP_INDEX,4)COP(rINV_LOCATION_UPDATE.RSSQL[0],rINV_LOCATION_UPDATE.RSSQL[X],1);
				N: ADD(1,X,X)LEQ(X,5)JMP(RSSQL);
				N: LBL(SKIP_TRANSACTION)NOP();
				N: NOP();
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM
