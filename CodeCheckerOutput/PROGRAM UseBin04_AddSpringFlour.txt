	PROGRAM UseBin04_AddSpringFlour (Description := "$NProgram=$'PH$'$NClass=$'SILO.TO.USEBIN:01.01.01$'$N",
	                                 MAIN := "_000_Main",
	                                 MODE := 0,
	                                 DisableFlag := 0,
	                                 UseAsFolder := 0)
		TAG
			AccessPanelOpen OF cDI[92] ;
			AccessPanelOpen_Pastry OF cDI[99] ;
			Activator : CB_DO  := [1026,0,0,[[0,0,0,200102600,[0,0,0]],[0,0,0,200102601,[0,0,0]],[64,0,0,200102602,[0,0,0]]],[0,-1,-1],[269487377,0,4,1],[[-1071875494,3000
					,1493],[1864790,3000,0],[1864837,10000,0],[0,0,0],[0,0,0]],[[0,10000,0],[0,20000,0],[49140,45000,0]],[0,0,0,0,0,0],[0,[0,0,0,0,0,0,0,0,0,0],[0,0,0],0
					,0,0,0],[[1],[3],[1,0,[1,0,0,0],[1,0,0,0,0,0],[1,0]],[3],[3,1026,102600,102599],[[3],[3],[1]],[7,10000,20000,[-1071875494,30000,1540]]],[2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0],[0],[[536870912,0,7700],[-1071875498,3600000,1378020],2.10000000e+001,0,0.00000000e+000,0.00000000e+000
					,7],[[[0,0,0],[0,0,0]],[[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0]]]];
			Airlock : CB_DO  := [1027,0,104,[[0,0,0,200102700,[0,0,0]],[0,0,0,200102701,[0,0,0]],[0,0,0,200102702,[0,0,0]]],[0,-1,-1],[17829137,0,4,1],[[-1608746406,3000
					,3018],[1081731,3000,0],[1081786,10000,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[0,0,0,0,0,0],[0,[0,0,0,0,0,0,0,0,0,0],[0,0,0],0,0,0,0],[[1],[3],[1,0,[1,0,0,0],[1,0,0,0,0
					,0],[1,0]],[3],[3,1027,102700,102699],[[3],[3],[3]],[1,0,0,[0,0,0]]],[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],[32],[[536870912,0,110],[-1071875498,3600000,3564644
					],6.30000000e+001,0,0.00000000e+000,0.00000000e+000,7],[[[0,0,0],[0,0,0]],[[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0]]]];
			AOI : CB_PHASE_AOI  := [[3],[3,10070000],[3,[0,1015]],[3],[1,0.00000000e+000],[3],[1,0.00000000e+000,0.00000000e+000],[3],[3,1007,100700,100699
					],[[3],[1],[1],[1],[1],[1],[1],[1]],[3,16,15,15],[1,[[1,0,0],[[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],0,0]],0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,[1,0.00000000e+000,0.00000000e+000],0.00000000e+000
					],[1,0.00000000e+000,0.00000000e+000]];
			Arb00 OF cDO[93] ;
			AutoRunActivator OF Phase.CM.AutoRun[13] (RADIX := Decimal);
			AutoRunAirlockMotor OF Phase.CM.AutoRun[12] (RADIX := Decimal);
			AutoRunBlower OF Phase.CM.AutoRun[10] (RADIX := Decimal);
			AutoRunDustCollector OF Phase.CM.AutoRun[6] (RADIX := Decimal);
			AutoRunFeederMotor OF Phase.CM.AutoRun[11] (RADIX := Decimal);
			AutoRunPath OF Phase.CM.AutoRun[1] (RADIX := Decimal);
			AutoRunSifterMotor OF Phase.CM.AutoRun[4] (RADIX := Decimal);
			BlowerMotor OF cDO[93] ;
			BlowerPressure OF cAI[34] ;
			DehumidifierFault OF cDO[436] ;
			DustCollector OF cDO[185] ;
			EmptyTubeTimer OF Phase.TMR[3] ;
			EStop OF cDI[5] ;
			Feeder : CB_DO  := [1028,0,0,[[0,0,0,200102800,[0,0,0]],[0,0,0,200102801,[0,0,0]],[64,0,0,200102802,[0,0,0]]],[0,-1,-1],[286264593,0,4,1],[[-1608746452,3000
					,3020],[1081582,3000,0],[1081636,10000,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[0,0,0,0,0,0],[0,[0,0,0,0,0,0,0,0,0,0],[0,0,0],0,0,0,0],[[1],[3],[1,0,[1,0,0,0],[1,0,0,0,0
					,0],[1,0]],[3],[3,1028,102800,102799],[[3],[3],[1]],[1,0,0,[0,0,0]]],[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],[0],[[536870912,0,111],[-1071875544,3600000,3014937
					],6.50000000e+001,0,0.00000000e+000,0.00000000e+000,7],[[[0,0,0],[0,0,0]],[[0,0,0,0],[0,0,0,0]],[[0,0,0,0],[0,0,0,0]]]];
			HighLevel OF cDI[140] ;
			LowLevel OF cDI[139] ;
			OIT : CB_OIT  := [[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],0,0,[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],0,0,0,255066192,0,0,[0,0,0,0,0,0,0,0,0,0],[0,0,0,0],0,[0,[0,0,0]],[0,[0,0,0]],0,0,0];
			Phase OF cPHZ[7] (Usage := Public);
			PhaseClass OF cPHZ_CLASS[18] (Usage := Public);
			ph_Mixer01_AddSpringFlour OF cPHZ[34] ;
			ph_Mixer02_AddSpringFlour OF cPHZ[52] ;
			SettingPurgeTimeWaitingForLowLowPressure : REAL (RADIX := Float) := 0.00000000e+000;
			SettingPurgeTimeWaitingForLowPressure OF Phase.USER.SETTINGS[0] (RADIX := Float);
			SettingTimeUntilFinalReading OF Phase.USER.SETTINGS[5] (RADIX := Float);
			SifterAccessPanelProx OF cDI[92] ;
			SifterMotor OF cDO[92] ;
			SifterPressureSwitch OF cDI[90] ;
			SifterTailingsProx OF cDI[91] ;
			Silo01 OF cUNIT[4] ;
			Silo01_Activator OF cDO[26] ;
			Silo01_Airlock OF cDO[27] ;
			Silo01_AirlockSpeed OF cAO[10] ;
			Silo01_Feeder OF cDO[28] ;
			Silo01_Level OF cAI[10] ;
			Silo01_LowLevel OF cDI[36] ;
			Silo01_Selected OF cDI[37] ;
			Silo02 OF cUNIT[5] ;
			Silo02_Activator OF cDO[34] ;
			Silo02_Airlock OF cDO[35] ;
			Silo02_Feeder OF cDO[36] ;
			Silo02_Level OF cAI[13] ;
			Silo02_LowLevel OF cDI[43] ;
			Silo02_Selected OF cDI[44] ;
			SiloLevel : CB_AI  := [1010,0,5,[[0,0,0,210101000,[0,5000,0]],[0,0,0,210101001,[0,5000,0]],[0,0,0,210101002,[0,5000,0]],[0,0,0,210101003,[0,5000,0]],[0,0,0
					,210101004,[0,5000,0]],[0,0,0,210101005,[0,5000,0]],[0,0,0,210101006,[0,5000,0]],[0,0,0,210101007,[0,0,0]]],[0,-1,0],[1],8.82915592e+000
					,2.00000000e+001,4.00000000e+000,2.97423706e+002,0.00000000e+000,0.00000000e+000,4.26000000e+002
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,8.82915592e+000,[4.68100000e+003,0.00000000e+000
					,[3536993,10000,0],0],[2.00000000e+001,1.00000000e+000,[3131,2000,0],256],[1.70000000e+002,1.00000000e+000
					,[900571,5000,0],256],[4.15000000e+002,1.00000000e+000,[2782806,30000,0],256],[4.20000000e+002,1.00000000e+000
					,[2787458,2000,0],256],[2.97461121e+002,10000,2.81561279e+000,[-1071875494,9999999,8070],[1.00000000e+000
					,0.00000000e+000,[1848243,30000,0],256],[2.00000000e+000,0.00000000e+000,[1848243,30000,0],256]],[0,0,0,0
					,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0],0.00000000e+000,[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[3537032,10000,0]],[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],[0,[0,0,0,0,0,0,0,0
					,0,0],[0,0,0],0,0,0,0],[[1,0,[1,0,0,0],[1,0,0,0,0,0],[1,0]],[3,8.82915592e+000,2.00000000e+001,4.00000000e+000,0.00000000e+000
					,4.26000000e+002,2.97423706e+002,5.32500000e+002,-2.66250000e+001],[3,2.97423706e+002],[3],[1,0.00000000e+000
					],[[3],[3],[3],[3],[3],[3],[3],[1]]],[0.00000000e+000,0,0.00000000e+000,0.00000000e+000,0],[63],0.00000000e+000,[1,[0,0,0],0.00000000e+000
					,0,1.00000000e+000,-3.42669678e+000,8.04388881e-001,3.00850400e+002,[-1071875504,2147483647
					,610557],0]];
			SiloLowLevel : CB_DI  := [1036,0,0,[[32,0,0,230103600,[0,0,0]],[0,0,0,230103601,[0,0,0]],[0,0,0,230103602,[0,0,0]]],[1,0,0],[4097],[[2013244,5000,0],[-1608746406
					,5000,5046],[105816,5000,0]],[0,0,0],[[[3],[3],[1]]],[0,[[0,0,0],[0,0,0]],[[0],[0]],[[0],[0]]]];
			Unit OF cUNIT[19] ;
			ValidPath OF Phase.USER.STAT.1 (RADIX := Decimal);
		END_TAG

		ROUTINE _000_FirstScan 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'SILO.TO.USEBIN:01.01.01$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.TYPE$'$N"
				    "Function=$'TYPE$'$N"
				    "";
				N: MOV(18,PhaseClass.TYPE);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.INDEX.SETTING$'$N"
				    "Function=$'INDEX.SETTING$'$N"
				    "";
				N: MOV(Unit.ARRAY_INDEX,Phase.INDEX)MOV(PhaseClass.TYPE,Phase.TYPE)MOV(PhaseClass.ID,Phase.CLASS)COP(PhaseClass.NAME,Phase.CLASS_NAME,1)COP(PhaseClass.TYPE_NAME,Phase.TYPE_NAME,1);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.DISPLAY.MASK.SETTING$'$N"
				    "Function=$'DISPLAY.MASK.SETTING$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.CLASS.PARAMETERS$'$N"
				    "Function=$'CLASS.PARAMETERS$'$N"
				    "";
				N: PhaseClassParameter(AOI.PhaseClassParameter,PhaseClass,Phase.USER,Phase.DISPLAY_MASK,Phase.TYPE_MASK);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.SECTION.FIRSTSCAN.SETTING$'$N"
				    "Function=$'STANDARD.PHASE.SECTION.FIRSTSCAN.SETTING$'$N"
				    "";
				N: PhaseClassParameter(AOI.PhaseClassParameter,PhaseClass,Phase.USER,Phase.DISPLAY_MASK,Phase.TYPE_MASK);
				RC: "Template=$'PHASE.PHASE.MATERIAL.BLOWER.TRANSFER.TO.HOPPER$'$N"
				    "Function=$'SETTING.PURGE.TIME$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: LES(SettingPurgeTimeWaitingForLowPressure,30)MOV(120,SettingPurgeTimeWaitingForLowPressure);
				RC: "Template=$'PHASE.PHASE.MATERIAL.BLOWER.TRANSFER.TO.HOPPER$'$N"
				    "Function=$'SETTING.RECORD.STEP.TIME$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: MOV(2000,Phase.STEP_TMR.RECORD.PRE);
		END_ROUTINE

		ROUTINE _000_Main 
				N: NOP();
				N: XIC(S:FS)JSR(_000_FirstScan,0);
				N: XIC(Phase.STATE.IDLE)XIC(Phase.STATE.RUNNING)XIC(Phase.STATE.HELD)XIC(Phase.STATE.COMPLETE)XIC(Phase.STATE.ABORTED)XIC(Phase.STATE.STOPPED)NOP();
				N: XIC(Phase.STATE.HOLDING)XIC(Phase.STATE.RESTARTING)XIC(Phase.STATE.ABORTING)XIC(Phase.STATE.STOPPING)NOP();
				N: [XIC(Phase.CMD.START) XIC(Phase.CMD.HOLD) XIC(Phase.CMD.RESTART) XIC(Phase.CMD.STOP) XIC(Phase.CMD.ABORT) XIC(Phase.CMD.RESET) ,MOV(Phase.STATE_NO,Phase.STATE_NO) MOV(Phase.STEP_INDEX,Phase.STEP_INDEX) MOV(Phase.MSG.FAULT,Phase.MSG.FAULT) ,XIC(BlowerMotor.STAT.ON_OPEN) XIC(Feeder.STAT.ON_OPEN) XIC(Activator.STAT.ENERGIZE) ]NOP();
				N: JSR(_120_PermissiveFaultAndMessaging,0);
				N: PhaseMode(AOI.Mode,Phase,cPHZ[0].MSG)PhaseCommon(AOI.Common,Phase)PhaseStepIndex(AOI.StepIndex,Phase)PhaseStateTransition(AOI.StateTransition,Phase.CMD,Phase.STAT,Phase.STATE,Phase.STATE_NO);
				N: JSR(_050_StepControl,0);
				N: JSR(_110_ControlModule,0);
				N: JSR(_130_Alarming,0);
				N: PhaseStepMapping(AOI.StepMapping,Phase);
				N: PhaseBypass(AOI.Bypass,Phase);
				N: JSR(_100_Arbitration,0);
		END_ROUTINE

		ROUTINE _050_StepControl 
				N: NOP();
				N: XIC(cSETUP.SIMULATION.Enabled)XIC(cSETUP.SIMULATION.PHASE)RET();
				RC: "Location index assignments$N"
				    "Set from/to indices, based on silo selection if necessary";
				N: [XIC(Silo01_Selected.STAT.ON) MOV(1,Phase.INV.LOCATION_INDEX_FROM) ,XIC(Silo02_Selected.STAT.ON) MOV(2,Phase.INV.LOCATION_INDEX_FROM) ,MOV(18,Phase.INV.LOCATION_INDEX_TO) ];
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,1)MOV(2000,Phase.STEP_INDEX_GOTO);
				RC: "When the phase starts up, unless the tank is low, goto the wait step$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)LIM(2000,Phase.STEP_INDEX,2999)GEQ(Phase.STEP_TMR.CurrentStepIndex.ACC,Phase.STEP_TMR.RECORD.PRE)MOV(3010,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,3000)[XIC(Phase.STAT.PERMISSIVE) MOV(4000,Phase.STEP_INDEX_GOTO) ,XIC(HighLevel.STAT.ON) MOV(3010,Phase.STEP_INDEX_GOTO) ];
				RC: "Wait for usebin low level, then restart by returning to permissive step$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,3010)[XIC(LowLevel.STAT.ON) ,XIC(Phase.CMD.RESTART) ]MOV(3000,Phase.STEP_INDEX_GOTO);
				N: NOP();
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4000)XIC(ValidPath)MOV(4070,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4070)XIC(SifterMotor.STAT.ON_OPEN_DELAY)MOV(4100,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4100)XIC(BlowerMotor.STAT.ON_OPEN_DELAY)MOV(4270,Phase.STEP_INDEX_GOTO);
				RC: "$007F";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4270)GEQ(Phase.STEP_TMR.CurrentStepIndex.ACC,7000)MOV(5000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)LIM(4210,Phase.STEP_INDEX,5999)XIC(HighLevel.STAT.ON)MOV(6000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)LIM(4210,Phase.STEP_INDEX,5999)XIC(BlowerPressure.Lo.ACTIVE)XIO(BlowerPressure.LoLo.ACTIVE)TON(EmptyTubeTimer,?,?);
				N: XIC(Phase.STATE.RUNNING)[LIM(6000,Phase.STEP_INDEX,6999) ,EQU(Phase.STEP_INDEX_GOTO,6000) ][XIC(BlowerMotor.STAT.INTERLOCK) ,XIC(SifterMotor.STAT.INTERLOCK) ]MOV(7000,Phase.STEP_INDEX)MOV(7000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,6000)[XIC(BlowerPressure.Lo.ACTIVE) ,XIC(BlowerPressure.HiHi.ACTIVE) ,XIC(BlowerPressure.Hi.ACTIVE) GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,15) ,GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,SettingPurgeTimeWaitingForLowPressure) OTL(Phase.ALARM[3].ACTIVE) ]MOV(6010,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,6010)GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,SettingTimeUntilFinalReading)MOV(6020,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,6020)[LES(BlowerPressure.SCALED,BlowerPressure.LoLo.LIM) ,GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,30) ][XIC(Phase.TMR[1].DN) MOV(7000,Phase.STEP_INDEX_GOTO) ,TON(Phase.TMR[1],?,?) ];
				RC: "Wait for usebin low level, then restart by returning to permissive step$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,7000)MOV(3010,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,8000)MOV(9000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,10000)OTE(Phase.STAT.RUNNING_COMPLETE);
				N: NOP();
				N: XIC(Phase.STATE.Oneshot.Holding)[GEQ(Phase.STEP_INDEX,6000) MOV(Phase.STEP_INDEX,Phase.STEP_INDEX_GOTO_ON_RESTART) ,LES(Phase.STEP_INDEX,6000) MOV(2900,Phase.STEP_INDEX_GOTO_ON_RESTART) ];
				N: XIC(Phase.STATE.HOLDING)EQU(Phase.STEP_INDEX,2000)GEQ(Phase.STEP_TMR.CurrentStepIndex.ACC,Phase.STEP_TMR.RECORD.PRE)MOV(2900,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.HOLDING)LIM(2001,Phase.STEP_INDEX,2999)MOV(3000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.HOLDING)LIM(3000,Phase.STEP_INDEX,4199)MOV(7000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.HOLDING)LIM(4200,Phase.STEP_INDEX,5999)MOV(6000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.HOLDING)[LIM(6000,Phase.STEP_INDEX,6999) ,EQU(Phase.STEP_INDEX_GOTO,6000) ][XIC(BlowerMotor.STAT.INTERLOCK) ,XIC(SifterMotor.STAT.INTERLOCK) ]MOV(7000,Phase.STEP_INDEX)MOV(7000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.HOLDING)EQU(Phase.STEP_INDEX,6000)[XIC(BlowerPressure.Lo.ACTIVE) ,XIC(BlowerPressure.HiHi.ACTIVE) ,XIC(BlowerPressure.Hi.ACTIVE) GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,20) ,GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,SettingPurgeTimeWaitingForLowPressure) ]MOV(6010,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.HOLDING)EQU(Phase.STEP_INDEX,6010)GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,SettingTimeUntilFinalReading)MOV(6020,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.HOLDING)EQU(Phase.STEP_INDEX,6020)[LES(BlowerPressure.SCALED,BlowerPressure.LoLo.LIM) ,GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,30) ]MOV(7000,Phase.STEP_INDEX_GOTO);
				N: NOP();
				N: XIC(Phase.STATE.HOLDING)GEQ(Phase.STEP_INDEX,7000)OTE(Phase.STAT.HOLDING_COMPLETE);
				N: NOP();
				N: XIC(Phase.STATE.Oneshot.Restarting)GRT(Phase.STEP_INDEX_GOTO_ON_RESTART,0)MOV(Phase.STEP_INDEX_GOTO_ON_RESTART,Phase.STEP_INDEX_GOTO)MOV(-1,Phase.STEP_INDEX_GOTO_ON_RESTART);
				N: NOP();
				N: XIC(Phase.STATE.RESTARTING)[XIC(Phase.STEP_TMR.RESTARTING.DN) OTE(Phase.STAT.RESTARTING_COMPLETE) ,TON(Phase.STEP_TMR.RESTARTING,?,?) ];
				N: NOP();
				N: XIC(Phase.STATE.STOPPING)LIM(1,Phase.STEP_INDEX,4199)MOV(7000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)LIM(4200,Phase.STEP_INDEX,5999)MOV(6000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)[LIM(6000,Phase.STEP_INDEX,6999) ,EQU(Phase.STEP_INDEX_GOTO,6000) ][XIC(BlowerMotor.STAT.INTERLOCK) ,XIC(SifterMotor.STAT.INTERLOCK) ]MOV(7000,Phase.STEP_INDEX)MOV(7000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,6000)[XIC(BlowerPressure.Lo.ACTIVE) ,GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,SettingPurgeTimeWaitingForLowPressure) ]MOV(6010,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,6010)GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,SettingTimeUntilFinalReading)MOV(6020,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,6020)[LES(BlowerPressure.SCALED,BlowerPressure.LoLo.LIM) ,GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,30) ][XIC(Phase.TMR[2].DN) MOV(7000,Phase.STEP_INDEX_GOTO) ,TON(Phase.TMR[2],?,?) ];
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,7000)MOV(8000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,8000)MOV(9000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)LIM(9000,Phase.STEP_INDEX,9999)MOV(10000,Phase.STEP_INDEX_GOTO);
				N: NOP();
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,10000)OTE(Phase.STAT.STOPPING_COMPLETE);
				N: NOP();
				N: XIC(Phase.STATE.Oneshot.Aborting)MOV(10000,Phase.STEP_INDEX_GOTO);
				N: NOP();
				N: XIC(Phase.STATE.ABORTING)EQU(Phase.STEP_INDEX,10000)OTE(Phase.STAT.ABORTING_COMPLETE);
				N: NOP();
				N: XIC(Phase.STATE.Oneshot.Idle)MOV(0,Phase.STEP_INDEX_GOTO_ON_RESTART)OTU(Phase.STAT.OUT_TOL)OTU(Phase.PREACT.PreactOutOfLimitHigh)OTU(Phase.PREACT.PreactOutOfLimitLow);
				N: XIC(Phase.STATE.RUNNING)[EQU(Phase.STEP_INDEX,9010) ,EQU(Phase.STEP_INDEX,2010) ]OTE(Phase.STAT.ACK_REQUIRED);
				N: XIC(Phase.STATE.DONE)OTL(Phase.CMD.RESET);
		END_ROUTINE

		ROUTINE _100_Arbitration 
				N: NOP();
				N: [XIC(Phase.NEEDS.LIST[0].ACQUIRED) ,EQU(Phase.NEEDS.LIST[0].OBJECT_INDEX,0) ][XIC(Phase.NEEDS.LIST[1].ACQUIRED) ,EQU(Phase.NEEDS.LIST[1].OBJECT_INDEX,0) ][XIC(Phase.NEEDS.LIST[2].ACQUIRED) ,EQU(Phase.NEEDS.LIST[2].OBJECT_INDEX,0) ][XIC(Phase.NEEDS.LIST[3].ACQUIRED) ,EQU(Phase.NEEDS.LIST[3].OBJECT_INDEX,0) ][XIC(Phase.NEEDS.LIST[4].ACQUIRED) ,EQU(Phase.NEEDS.LIST[4].OBJECT_INDEX,0) ]OTE(Phase.NEEDS.OWNS_ALL_REQUIRED);
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.RESTARTING) ]EQU(Phase.STEP_INDEX,3000)XIC(Phase.STEP.FirstScanInStepIndex)OTL(Phase.NEEDS.StartArbitration);
				N: [XIC(Phase.STATE.IDLE) ,XIC(Phase.STATE.RUNNING) [EQU(Phase.STEP_INDEX,3010) ,LIM(7000,Phase.STEP_INDEX,8000) ] ,XIC(Phase.STATE.DONE) ,XIC(Phase.STATE.HELD) ]OTE(Phase.NEEDS.Release);
				N: [XIC(Phase.NEEDS.StartArbitration) MOV(0,Phase.NEEDS.LIST_INDEX) OTL(Phase.NEEDS.Arbitrating) OTU(Phase.NEEDS.StartArbitration) ,XIC(Phase.NEEDS.Arbitrating) XIC(Phase.NEEDS.OWNS_ALL_REQUIRED) OTU(Phase.NEEDS.Arbitrating) ];
				N: [EQU(Arb00.ARB.OWNER,Phase.ID) OTE(Phase.NEEDS.LIST[0].ACQUIRED) ,XIC(Phase.NEEDS.Arbitrating) EQU(Phase.NEEDS.LIST_INDEX,0) [XIO(Phase.NEEDS.LIST[0].REQUESTED) EQU(Arb00.ARB.RQ,0) MOV(Phase.ID,Arb00.ARB.RQ) OTL(Phase.NEEDS.LIST[0].REQUESTED) ,XIC(Phase.NEEDS.LIST[0].ACQUIRED) OTU(Phase.NEEDS.LIST[0].REQUESTED) MOV(1,Phase.NEEDS.LIST_INDEX) ] ,XIC(Phase.NEEDS.Release) EQU(Arb00.ARB.OWNER,Phase.ID) MOV(Phase.ID,Arb00.ARB.RELEASE) ,MOV(cCOMMON.DO_OBJECT_NUMBER,Phase.NEEDS.LIST[0].OBJECT_TYPE) MOV(Arb00.ID,Phase.NEEDS.LIST[0].OBJECT_INDEX) ];
				N: MOV(0,Phase.NEEDS.LIST[1].OBJECT_TYPE)MOV(0,Phase.NEEDS.LIST[1].OBJECT_INDEX);
				N: MOV(0,Phase.NEEDS.LIST[2].OBJECT_TYPE)MOV(0,Phase.NEEDS.LIST[2].OBJECT_INDEX);
				N: MOV(0,Phase.NEEDS.LIST[3].OBJECT_TYPE)MOV(0,Phase.NEEDS.LIST[3].OBJECT_INDEX);
				N: MOV(0,Phase.NEEDS.LIST[4].OBJECT_TYPE)MOV(0,Phase.NEEDS.LIST[4].OBJECT_INDEX);
		END_ROUTINE

		ROUTINE _110_ControlModule 
				N: NOP();
				N: XIC(cSETUP.SIMULATION.Enabled)XIC(cSETUP.SIMULATION.PHASE)RET();
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.HOLDING) ,XIC(Phase.STATE.STOPPING) ]LIM(4000,Phase.STEP_INDEX,6010)OTE(AutoRunPath);
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.HOLDING) ,XIC(Phase.STATE.STOPPING) ]LIM(4100,Phase.STEP_INDEX,6010)OTE(AutoRunBlower);
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.HOLDING) ,XIC(Phase.STATE.STOPPING) ]LIM(4040,Phase.STEP_INDEX,6010)OTE(AutoRunDustCollector);
				RC: "$007F";
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.HOLDING) ,XIC(Phase.STATE.STOPPING) ]LIM(4070,Phase.STEP_INDEX,6010)OTE(AutoRunSifterMotor);
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.HOLDING) ,XIC(Phase.STATE.STOPPING) ]LIM(4280,Phase.STEP_INDEX,6010)OTE(AutoRunFeederMotor);
				N: XIC(Phase.STATE.RUNNING)LIM(4290,Phase.STEP_INDEX,5000)OTE(AutoRunAirlockMotor);
				N: XIC(Phase.STATE.RUNNING)LIM(4280,Phase.STEP_INDEX,5000)OTE(AutoRunActivator);
				N: [XIC(Silo01_Selected.STAT.ON) COP(Silo01_Activator,Activator,1) COP(Silo01_Airlock,Airlock,1) COP(Silo01_Feeder,Feeder,1) COP(Silo01_Level,SiloLevel,1) COP(Silo01_LowLevel,SiloLowLevel,1) ,XIC(Silo02_Selected.STAT.ON) COP(Silo02_Activator,Activator,1) COP(Silo02_Airlock,Airlock,1) COP(Silo02_Feeder,Feeder,1) COP(Silo02_Level,SiloLevel,1) COP(Silo02_LowLevel,SiloLowLevel,1) ];
				N: [XIC(Phase.CMD.START) ,XIC(Phase.CMD.RESTART) ]OTU(Phase.ALARM[3].ACTIVE)OTL(DustCollector.CMD.RESET)[XIC(Silo01_Selected.STAT.ON) OTL(Silo01_Activator.CMD.RESET) OTL(Silo01_Airlock.CMD.RESET) OTL(Silo01_Feeder.CMD.RESET) OTL(Silo01_Level.CMD.RESET) OTL(Silo01_LowLevel.CMD.RESET) ,XIC(Silo02_Selected.STAT.ON) OTL(Silo02_Activator.CMD.RESET) OTL(Silo02_Airlock.CMD.RESET) OTL(Silo02_Feeder.CMD.RESET) OTL(Silo02_Level.CMD.RESET) OTL(Silo02_LowLevel.CMD.RESET) ];
		END_ROUTINE

		ROUTINE _120_PermissiveFaultAndMessaging 
				N: NOP();
				RC: "$N"
				    "";
				N: OTE(ValidPath);
				RC: "$N"
				    "";
				N: [MOV(0,Phase.MSG.PERM) ,XIO(SifterMotor.STAT.AUTO) MOV(1,Phase.MSG.PERM) ,XIO(Feeder.STAT.AUTO) MOV(3,Phase.MSG.PERM) ,XIO(Airlock.STAT.AUTO) MOV(4,Phase.MSG.PERM) ,XIO(Activator.STAT.AUTO) MOV(5,Phase.MSG.PERM) ,XIO(BlowerMotor.STAT.AUTO) MOV(6,Phase.MSG.PERM) ,XIO(DustCollector.STAT.AUTO) MOV(7,Phase.MSG.PERM) ,EQU(Phase.MSG.PERM,0) OTE(Phase.STAT.PERMISSIVE) ];
				RC: "$N"
				    "";
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.RESTARTING) ]EQU(Phase.MSG.FAULT,0)[XIC(EStop.STAT.FAULT) MOV(21,Phase.MSG.FAULT) ,XIC(AutoRunSifterMotor) XIC(SifterMotor.STAT.INTERLOCK) MOV(22,Phase.MSG.FAULT) ,XIC(SifterMotor.STAT.FAULT) MOV(23,Phase.MSG.FAULT) ,XIC(Feeder.STAT.FAULT) MOV(24,Phase.MSG.FAULT) ,XIC(Airlock.STAT.FAULT) MOV(25,Phase.MSG.FAULT) ,XIC(Activator.STAT.FAULT) MOV(26,Phase.MSG.FAULT) ,XIC(BlowerPressure.STAT.FAULT) MOV(27,Phase.MSG.FAULT) ,XIC(BlowerPressure.HiHi.ACTIVE) MOV(28,Phase.MSG.FAULT) ,EQU(Phase.STEP_INDEX,5000) XIC(BlowerPressure.LoLo.ACTIVE) MOV(29,Phase.MSG.FAULT) ,XIC(AutoRunBlower) XIC(BlowerMotor.STAT.INTERLOCK) MOV(30,Phase.MSG.FAULT) ,XIC(BlowerMotor.STAT.FAULT) MOV(31,Phase.MSG.FAULT) ,XIC(AutoRunBlower) XIO(ValidPath) MOV(32,Phase.MSG.FAULT) ,XIC(AutoRunDustCollector) XIC(DustCollector.STAT.FAULT) MOV(33,Phase.MSG.FAULT) ,[XIC(SifterTailingsProx.STAT.ON) ,XIC(SifterTailingsProx.STAT.FAULT) ] MOV(39,Phase.MSG.FAULT) ,[XIC(HighLevel.STAT.FAULT) ,XIC(LowLevel.STAT.FAULT) ] MOV(40,Phase.MSG.FAULT) ,LIM(4000,Phase.STEP_INDEX,6999) XIC(AccessPanelOpen.STAT.ON) MOV(41,Phase.MSG.FAULT) ,XIC(cSETUP.SIMULATION.Enabled) XIC(cSETUP.SIMULATION.PHASE) MOV(0,Phase.MSG.FAULT) ];
				N: [MOV(0,Phase.MSG.MSG) ,XIC(Phase.STAT.BYPASS) XIO(Phase.STEP.RECORD) MOV(61,Phase.MSG.MSG) ,XIC(Phase.STAT.BYPASS) XIC(Phase.STEP.RECORD) MOV(62,Phase.MSG.MSG) ,XIC(Phase.STATE.HELD) XIO(Phase.STAT.FAULTED) MOV(63,Phase.MSG.MSG) ];
				N: MakeMessageNumberGloballyUnique(AOI.Message,Phase.ID,Phase.MSG);
				N: [LIM(2000,Phase.STEP_INDEX,3000) NEQ(Phase.MSG.PERM,0) MOV(Phase.MSG.PERM,Phase.MSG.MSG) ,GEQ(Phase.STEP_INDEX,3000) NEQ(Phase.MSG.FAULT,0) MOV(Phase.MSG.FAULT,Phase.MSG.MSG) ,EQU(Phase.MSG.FAULT,0) EQU(Phase.MSG.PERM,0) ONS(Phase.MSG.OS.1) CLR(Phase.MSG.MSG) ];
		END_ROUTINE

		ROUTINE _130_Alarming 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'SILO.TO.USEBIN:01.01.01$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.ALARM.FAULT$'$N"
				    "Function=$'ALARM.FAULT$'$N"
				    "";
				N: [XIC(Phase.STAT.FAULTED) OTE(Phase.ALARM[0].ACTIVE) ,AlarmControl(AOI.AlarmControl[0],Phase.ALARM[0],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM
