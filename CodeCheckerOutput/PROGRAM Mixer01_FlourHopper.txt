	PROGRAM Mixer01_FlourHopper (Description := "$NProgram=$'EM$'$NClass=$'SCALEHOPPER.01.02$'$N",
	                             MAIN := "_Main",
	                             MODE := 0,
	                             DisableFlag := 0,
	                             UseAsFolder := 0)
		TAG
			BlowerPressure OF cAI[60] ;
			DischargeValve OF cDO[463] ;
			DischargeValve_IO_Closed OF iRack5:6:I.Data.14 (RADIX := Decimal);
			DischargeValve_IO_Opened OF iRack5:6:I.Data.13 (RADIX := Decimal);
			DischargeValve_IO_Output OF iRack5:11:O.Data.18 (RADIX := Decimal);
			EStop OF cDI[5] ;
			Evasor OF cDO[464] ;
			EvasorPulseOnOff : PulseOnOff  := [0,250,3000,[0,0,0]];
			Evasor_IO_Output OF iRack5:11:O.Data.24 (RADIX := Decimal);
			FeederSpeed OF cAO[200] ;
			MixerCommunicationOK OF cDI[331] ;
			MixerInletGate OF cDO[445] ;
			MixerInletGate_minors OF cDO[446] ;
			Null : CB_NULL  := [[0,0,0,[[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]]],[0,0,0],[0],[[0,0,0],[0,0,0],[0,0,0]],[0,0,0],[[[1],[1],[1]]],[0,[[0,0,0],[0,0,0]],[[0],[0]],[[0],[0]]]],[0,0,0,[[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]]],[0,0,0
					],[0,0,0,0],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[0,0,0,0,0,0],[0,[0,0,0,0,0,0,0,0,0,0],[0,0,0],0,0,0,0],[[1],[1],[1,0,[1,0,0,0],[1,0,0,0,0,0],[1,0]],[1],[1,0,0,0],[[1],[1],[1]],[1,0,0,[0,0
					,0]]],[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0],[0],[[0,0,0],[0,0,0],0.00000000e+000,0,0.00000000e+000,0.00000000e+000,0],[[[0,0,0],[0,0,0]],[[0,0,0,0],[0,0
					,0,0]],[[0,0,0,0],[0,0,0,0]]]],[0,0,0,[[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]]],[0,0,0],[0],0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,[0.00000000e+000,0.00000000e+000
					,[0,0,0],0],[0.00000000e+000,0.00000000e+000,[0,0,0],0],[0.00000000e+000,0.00000000e+000,[0,0,0],0],[0.00000000e+000
					,0.00000000e+000,[0,0,0],0],[0.00000000e+000,0.00000000e+000,[0,0,0],0],[0.00000000e+000,0,0.00000000e+000
					,[0,0,0],[0.00000000e+000,0.00000000e+000,[0,0,0],0],[0.00000000e+000,0.00000000e+000,[0,0,0],0]],[0,0,0,0,0,0,0,0,0,0
					,0,0,0],[0,0,0,0,0,0],0.00000000e+000,[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],[0,[0,0,0,0,0,0,0,0,0,0],[0,0,0],0,0,0,0],[[1,0,[1,0,0,0
					],[1,0,0,0,0,0],[1,0]],[1,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000],[1,0.00000000e+000],[1],[1,0.00000000e+000],[[1],[1],[1
					],[1],[1],[1],[1],[1]]],[0.00000000e+000,0,0.00000000e+000,0.00000000e+000,0],[0],0.00000000e+000,[0,[0,0,0],0.00000000e+000
					,0,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,[0,0,0],0]],[0,0,0,[[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0
					,0]],[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]]],[0,0,0],[0,0],[0,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000]],0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,[[0,0.00000000e+000,0.00000000e+000,0,[0,0,0],[0,0,0]],[0,0.00000000e+000,0.00000000e+000
					,0,[0,0,0],[0,0,0]],[0,[0,0,0]]],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					],[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],[0,0,0,0,0,0],[0,[0,0,0,0,0,0,0,0,0,0],[0,0,0],0,0,0,0],[0],[[1],[1]]],[0,0,0,0,0,0,0,0,[[0,0,0,0
					,[0,0,0]],[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]],[0,0,0,0,[0,0,0]]],[0,0,0],[0],[[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0]],[0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000],[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000],[0,[0,0],0],[0],0,0,0,0,0,0,[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],0.00000000e+000,0.00000000e+000
					,0.00000000e+000],[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000],[[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0]],0,0,0,0,[0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000],[0,0,0,0,0],0,0,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0,0,0,0,0,0],[0,0,0,0,0,0,0],[2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0
					,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0,2#0],[0,0,0,0,0,0,0,0,0
					,[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					]],[0,[0,0,0,0,0,0,0,0,0,0],[0,0,0],0,0,0,0],[0,0,[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0],[0],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],[0.00000000e+000,0.00000000e+000,0.00000000e+000,[[1,0,0],[[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0],0,0]],0,0,0,0],[[1,0,0,15,10,0.00000000e+000,0.00000000e+000,0.00000000e+000,0,0,0]]]];
			OIT OF dOIT[1] ;
			ph_HopperAddPastryFlour OF cPHZ[33] ;
			ph_HopperAddSpringFlour OF cPHZ[34] ;
			ph_HopperDump OF cPHZ[24] ;
			PowerInput OF cDI[442] ;
			PowerOutput OF cDI[443] ;
			PowerSafety OF cDI[444] ;
			ReliefValve OF cDO[468] ;
			ReliefValve_IO_Output OF iRack5:10:O.Data.30 (RADIX := Decimal);
			SeparatorValve01 OF cDO[466] ;
			SeparatorValve01_IO_Closed OF iRack5:7:I.Data.23 (RADIX := Decimal);
			SeparatorValve01_IO_Opened OF iRack5:7:I.Data.24 (RADIX := Decimal);
			SeparatorValve01_IO_Output OF iRack5:11:O.Data.22 (RADIX := Decimal);
			SeparatorValve02 OF cDO[467] ;
			SeparatorValve02_IO_Closed : BOOL (RADIX := Decimal) := 1;
			SeparatorValve02_IO_Opened : BOOL (RADIX := Decimal) := 0;
			SeparatorValve02_IO_Output : BOOL (RADIX := Decimal) := 0;
			Unit OF cUNIT[48] ;
			Vibrator OF cDO[465] ;
			VibratorPulseOnOff : PulseOnOff  := [0,250,3000,[0,0,0]];
			Vibrator_IO_Output OF iRack5:11:O.Data.16 (RADIX := Decimal);
			Weight OF cAI[199] ;
			Weight_IO_Command OF iWI504:O.MB1.Command (RADIX := Binary);
			Weight_IO_DataOkay OF iWI504:I.MB1.Data_Okay (RADIX := Decimal);
			Weight_IO_Value OF iWI504:I.MB1.Measuring_Value (RADIX := Float);
		END_TAG

		ROUTINE DischargeValve 
				RC: "Type=$'CONTROL.MODULE$'$N"
				    "EquipmentModule=$'SCALEHOPPER.01.02.Valve.Mixer01_FlourHopper$'$N"
				    "ControlModule=$'Valve.DischargeValve$'$N"
				    "";
				N: NOP();
				RC: "$N"
				    "";
				N: XIC(ph_HopperDump.CM.AutoRun[10])OTE(DischargeValve.STAT.AUTO_RUN);
				RC: "$N"
				    "";
				N: [MOV(0,DischargeValve.MSG.PERM) ,[XIO(MixerInletGate.STAT.ON_OPEN_DELAY) ,XIC(MixerInletGate.STAT.FAULT) ] MOV(1,DischargeValve.MSG.PERM) ,[XIC(MixerCommunicationOK.STAT.OFF) ,XIC(MixerCommunicationOK.STAT.FAULT) ] MOV(2,DischargeValve.MSG.PERM) ,EQU(DischargeValve.MSG.PERM,0) OTE(DischargeValve.STAT.PERMISSIVE) ];
				RC: "$N"
				    "";
				N: [MOV(0,DischargeValve.MSG.INTRLK) ,XIC(EStop.STAT.FAULT) MOV(21,DischargeValve.MSG.INTRLK) ,NEQ(DischargeValve.MSG.INTRLK,0) OTE(DischargeValve.STAT.INTERLOCK) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.VALVE.FAULT$'$N"
				    "Function=$'VALVE.FAULT$'$N"
				    "[Description]$N"
				    "";
				N: [XIC(DischargeValve.STAT.ENERGIZE) [XIO(DischargeValve.STAT.ON_OPEN) ,XIC(DischargeValve.STAT.OFF_CLOSED) ] ,XIO(DischargeValve.STAT.ENERGIZE) [XIC(DischargeValve.STAT.ON_OPEN) ,XIO(DischargeValve.STAT.OFF_CLOSED) ] ,XIC(DischargeValve.STAT.FAULT) ]XIO(DischargeValve.CMD.RESET)[XIC(DischargeValve.DELAY.FAULT.DN) OTE(DischargeValve.STAT.FAULT) ,TON(DischargeValve.DELAY.FAULT,?,?) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.STATUS.MESSAGE.VALVE$'$N"
				    "Function=$'STATUS.MESSAGE.VALVE$'$N"
				    "[Description]$N"
				    "";
				N: [MOV(0,DischargeValve.MSG.MSG) ,XIC(DischargeValve.STAT.ENERGIZE) XIC(DischargeValve.STAT.OFF_CLOSED) MOV(61,DischargeValve.MSG.MSG) ,XIO(DischargeValve.STAT.ENERGIZE) XIO(DischargeValve.STAT.OFF_CLOSED) MOV(62,DischargeValve.MSG.MSG) ,XIC(DischargeValve.STAT.ENERGIZE) XIO(DischargeValve.STAT.ON_OPEN) MOV(63,DischargeValve.MSG.MSG) ,XIO(DischargeValve.STAT.ENERGIZE) XIC(DischargeValve.STAT.ON_OPEN) MOV(64,DischargeValve.MSG.MSG) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.STATUS.MESSAGE.SELECT$'$N"
				    "Function=$'STATUS.MESSAGE$'$N"
				    "[Description]$N"
				    "";
				N: [XIC(DischargeValve.STAT.AUTO_RUN) NEQ(DischargeValve.MSG.PERM,0) MOV(DischargeValve.MSG.PERM,DischargeValve.MSG.MSG) ,NEQ(DischargeValve.MSG.INTRLK,0) MOV(DischargeValve.MSG.INTRLK,DischargeValve.MSG.MSG) ,NEQ(DischargeValve.MSG.FAULT,0) MOV(DischargeValve.MSG.FAULT,DischargeValve.MSG.MSG) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.STATUS.MESSAGE.NUMBER.UNIQUE$'$N"
				    "Function=$'MAKE.CM.MESSAGENUMBER.UNIQUE$'$N"
				    "";
				N: MakeMessageNumberGloballyUnique(DischargeValve.AOI.Message,DischargeValve.ID,DischargeValve.MSG);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.DISCRETE.OUTPUT.CONTROL$'$N"
				    "Function=$'DISCRETE.OUTPUT.CONTROL$'$N"
				    "";
				N: DiscreteOutputControl(DischargeValve.AOI.Control,DischargeValve.CMD,DischargeValve.STAT);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.DISCRETE.IO.OUTPUT.VALVE.OPNCLS.FEEDBACK$'$N"
				    "Function=$'DISCRETE.OUTPUT.IO.VALVE$'$N"
				    "";
				N: [XIC(DischargeValve.STAT.ENERGIZE) OTE(DischargeValve_IO_Output) ,[XIO(DischargeValve.STAT.ON_OPEN_BYPASS) XIC(DischargeValve_IO_Opened) ,XIC(DischargeValve.STAT.ON_OPEN_BYPASS) XIC(DischargeValve.STAT.ENERGIZE) ] [OTE(DischargeValve.STAT.ON_OPEN) ,XIC(DischargeValve.DELAY.ON.DN) OTE(DischargeValve.STAT.ON_OPEN_DELAY) ,TON(DischargeValve.DELAY.ON,?,?) ] ,[XIO(DischargeValve.STAT.OFF_CLOSED_BYPASS) XIC(DischargeValve_IO_Closed) ,XIC(DischargeValve.STAT.OFF_CLOSED_BYPASS) XIO(DischargeValve.STAT.ENERGIZE) ] [OTE(DischargeValve.STAT.OFF_CLOSED) ,XIC(DischargeValve.DELAY.OFF.DN) OTE(DischargeValve.STAT.OFF_CLOSED_DELAY) ,TON(DischargeValve.DELAY.OFF,?,?) ] ,XIC(PowerInput.STAT.ON) XIC(PowerOutput.STAT.ON) XIC(PowerSafety.STAT.ON) OTE(DischargeValve.STAT.ControlPowerOn) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.DISCRETE.ALARM$'$N"
				    "Function=$'ALARM.STAT.FAULT$'$N"
				    "";
				N: [XIC(DischargeValve.STAT.ControlPowerOn) XIC(DischargeValve.STAT.FAULT) OTE(DischargeValve.ALARM[0].ACTIVE) ,AlarmControl(DischargeValve.AOI.AlarmControl[0],DischargeValve.ALARM[0],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
		END_ROUTINE

		ROUTINE Evasor 
				N: NOP();
				N: XIC(ph_HopperDump.CM.AutoRun[10])[XIC(Evasor.TMR[0].TT) OTE(Evasor.STAT.AUTO_RUN) ,XIO(Evasor.TMR[0].DN) XIO(Evasor.TMR[1].EN) TON(Evasor.TMR[0],?,?) ,XIO(Evasor.TMR[1].DN) XIO(Evasor.TMR[0].EN) TON(Evasor.TMR[1],?,?) ];
				RC: "$N"
				    "";
				N: [MOV(0,Evasor.MSG.PERM) ,XIC(Weight.LoLo.ACTIVE) MOV(1,Evasor.MSG.PERM) ,XIO(DischargeValve.STAT.ON_OPEN) MOV(2,Evasor.MSG.PERM) ,XIO(MixerInletGate.STAT.ON_OPEN) MOV(3,Evasor.MSG.PERM) ,EQU(Evasor.MSG.PERM,0) OTE(Evasor.STAT.PERMISSIVE) ];
				RC: "$N"
				    "";
				N: [MOV(0,Evasor.MSG.INTRLK) ,XIC(EStop.STAT.FAULT) MOV(21,Evasor.MSG.INTRLK) ,NEQ(Evasor.MSG.INTRLK,0) OTE(Evasor.STAT.INTERLOCK) ];
				N: NOP();
				N: MOV(0,Evasor.MSG.MSG);
				N: [XIC(Evasor.STAT.AUTO_RUN) NEQ(Evasor.MSG.PERM,0) MOV(Evasor.MSG.PERM,Evasor.MSG.MSG) ,NEQ(Evasor.MSG.INTRLK,0) MOV(Evasor.MSG.INTRLK,Evasor.MSG.MSG) ,NEQ(Evasor.MSG.FAULT,0) MOV(Evasor.MSG.FAULT,Evasor.MSG.MSG) ];
				N: MakeMessageNumberGloballyUnique(Evasor.AOI.Message,Evasor.ID,Evasor.MSG);
				N: DiscreteOutputControl(Evasor.AOI.Control,Evasor.CMD,Evasor.STAT);
				N: [XIC(Evasor.STAT.ENERGIZE) OTE(Evasor_IO_Output) ,XIC(Evasor.STAT.ENERGIZE) OTE(Evasor.STAT.ON_OPEN) ,XIO(Evasor.STAT.ENERGIZE) OTE(Evasor.STAT.OFF_CLOSED) ];
				N: [XIC(Evasor.STAT.FAULT) OTE(Evasor.ALARM[0].ACTIVE) ,AlarmControl(Evasor.AOI.AlarmControl[0],Evasor.ALARM[0],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
		END_ROUTINE

		ROUTINE ReliefValve 
				RC: "Type=$'CONTROL.MODULE$'$N"
				    "EquipmentModule=$'SCALEHOPPER.01.02.Valve.Mixer01_FlourHopper$'$N"
				    "ControlModule=$'Valve.ReliefValve$'$N"
				    "";
				N: NOP();
				RC: "$N"
				    "";
				N: XIC(ph_HopperDump.CM.AutoRun[11])OTE(ReliefValve.STAT.AUTO_RUN);
				RC: "$N"
				    "";
				N: [MOV(0,ReliefValve.MSG.PERM) ,EQU(ReliefValve.MSG.PERM,0) OTE(ReliefValve.STAT.PERMISSIVE) ];
				RC: "$N"
				    "";
				N: [MOV(0,ReliefValve.MSG.INTRLK) ,XIC(EStop.STAT.FAULT) MOV(21,ReliefValve.MSG.INTRLK) ,NEQ(ReliefValve.MSG.INTRLK,0) OTE(ReliefValve.STAT.INTERLOCK) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.VALVE.FAULT$'$N"
				    "Function=$'VALVE.FAULT$'$N"
				    "[Description]$N"
				    "";
				N: [XIC(ReliefValve.STAT.ENERGIZE) [XIO(ReliefValve.STAT.ON_OPEN) ,XIC(ReliefValve.STAT.OFF_CLOSED) ] ,XIO(ReliefValve.STAT.ENERGIZE) [XIC(ReliefValve.STAT.ON_OPEN) ,XIO(ReliefValve.STAT.OFF_CLOSED) ] ,XIC(ReliefValve.STAT.FAULT) ]XIO(ReliefValve.CMD.RESET)[XIC(ReliefValve.DELAY.FAULT.DN) OTE(ReliefValve.STAT.FAULT) ,TON(ReliefValve.DELAY.FAULT,?,?) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.STATUS.MESSAGE.VALVE$'$N"
				    "Function=$'STATUS.MESSAGE.VALVE$'$N"
				    "[Description]$N"
				    "";
				N: [MOV(0,ReliefValve.MSG.MSG) ,XIC(ReliefValve.STAT.ENERGIZE) XIC(ReliefValve.STAT.OFF_CLOSED) MOV(61,ReliefValve.MSG.MSG) ,XIO(ReliefValve.STAT.ENERGIZE) XIO(ReliefValve.STAT.OFF_CLOSED) MOV(62,ReliefValve.MSG.MSG) ,XIC(ReliefValve.STAT.ENERGIZE) XIO(ReliefValve.STAT.ON_OPEN) MOV(63,ReliefValve.MSG.MSG) ,XIO(ReliefValve.STAT.ENERGIZE) XIC(ReliefValve.STAT.ON_OPEN) MOV(64,ReliefValve.MSG.MSG) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.STATUS.MESSAGE.SELECT$'$N"
				    "Function=$'STATUS.MESSAGE$'$N"
				    "[Description]$N"
				    "";
				N: [XIC(ReliefValve.STAT.AUTO_RUN) NEQ(ReliefValve.MSG.PERM,0) MOV(ReliefValve.MSG.PERM,ReliefValve.MSG.MSG) ,NEQ(ReliefValve.MSG.INTRLK,0) MOV(ReliefValve.MSG.INTRLK,ReliefValve.MSG.MSG) ,NEQ(ReliefValve.MSG.FAULT,0) MOV(ReliefValve.MSG.FAULT,ReliefValve.MSG.MSG) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.STATUS.MESSAGE.NUMBER.UNIQUE$'$N"
				    "Function=$'MAKE.CM.MESSAGENUMBER.UNIQUE$'$N"
				    "";
				N: MakeMessageNumberGloballyUnique(ReliefValve.AOI.Message,ReliefValve.ID,ReliefValve.MSG);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.DISCRETE.OUTPUT.CONTROL$'$N"
				    "Function=$'DISCRETE.OUTPUT.CONTROL$'$N"
				    "";
				N: DiscreteOutputControl(ReliefValve.AOI.Control,ReliefValve.CMD,ReliefValve.STAT);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.DISCRETE.IO.OUTPUT.VALVE.NO.FEEDBACK$'$N"
				    "Function=$'DISCRETE.OUTPUT.IO.VALVE$'$N"
				    "";
				N: [XIC(ReliefValve.STAT.ENERGIZE) OTE(ReliefValve_IO_Output) ,XIC(ReliefValve.STAT.ENERGIZE) [OTE(ReliefValve.STAT.ON_OPEN) ,XIC(ReliefValve.DELAY.ON.DN) OTE(ReliefValve.STAT.ON_OPEN_DELAY) ,TON(ReliefValve.DELAY.ON,?,?) ] ,XIO(ReliefValve.STAT.ENERGIZE) OTE(ReliefValve.STAT.OFF_CLOSED) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.DISCRETE.ALARM$'$N"
				    "Function=$'ALARM.STAT.FAULT$'$N"
				    "";
				N: [XIC(ReliefValve.STAT.FAULT) OTE(ReliefValve.ALARM[0].ACTIVE) ,AlarmControl(ReliefValve.AOI.AlarmControl[0],ReliefValve.ALARM[0],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
		END_ROUTINE

		ROUTINE SeparatorValve01 
				RC: "Type=$'CONTROL.MODULE$'$N"
				    "EquipmentModule=$'SCALEHOPPER.01.02.Valve.Mixer01_FlourHopper$'$N"
				    "ControlModule=$'Valve.SeparatorValve01$'$N"
				    "";
				N: NOP();
				RC: "$N"
				    "";
				N: XIC(ph_HopperAddSpringFlour.CM.AutoRun[5])OTE(SeparatorValve01.STAT.AUTO_RUN);
				RC: "$N"
				    "";
				N: [MOV(0,SeparatorValve01.MSG.PERM) ,EQU(SeparatorValve01.MSG.PERM,0) OTE(SeparatorValve01.STAT.PERMISSIVE) ];
				RC: "$N"
				    "";
				N: [MOV(0,SeparatorValve01.MSG.INTRLK) ,XIC(EStop.STAT.FAULT) MOV(21,SeparatorValve01.MSG.INTRLK) ,NEQ(SeparatorValve01.MSG.INTRLK,0) OTE(SeparatorValve01.STAT.INTERLOCK) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.VALVE.FAULT$'$N"
				    "Function=$'VALVE.FAULT$'$N"
				    "[Description]$N"
				    "";
				N: [XIC(SeparatorValve01.STAT.ENERGIZE) [XIO(SeparatorValve01.STAT.ON_OPEN) ,XIC(SeparatorValve01.STAT.OFF_CLOSED) ] ,XIO(SeparatorValve01.STAT.ENERGIZE) [XIC(SeparatorValve01.STAT.ON_OPEN) ,XIO(SeparatorValve01.STAT.OFF_CLOSED) ] ,XIC(SeparatorValve01.STAT.FAULT) ]XIO(SeparatorValve01.CMD.RESET)[XIC(SeparatorValve01.DELAY.FAULT.DN) OTE(SeparatorValve01.STAT.FAULT) ,TON(SeparatorValve01.DELAY.FAULT,?,?) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.STATUS.MESSAGE.VALVE$'$N"
				    "Function=$'STATUS.MESSAGE.VALVE$'$N"
				    "[Description]$N"
				    "";
				N: [MOV(0,SeparatorValve01.MSG.MSG) ,XIC(SeparatorValve01.STAT.ENERGIZE) XIC(SeparatorValve01.STAT.OFF_CLOSED) MOV(61,SeparatorValve01.MSG.MSG) ,XIO(SeparatorValve01.STAT.ENERGIZE) XIO(SeparatorValve01.STAT.OFF_CLOSED) MOV(62,SeparatorValve01.MSG.MSG) ,XIC(SeparatorValve01.STAT.ENERGIZE) XIO(SeparatorValve01.STAT.ON_OPEN) MOV(63,SeparatorValve01.MSG.MSG) ,XIO(SeparatorValve01.STAT.ENERGIZE) XIC(SeparatorValve01.STAT.ON_OPEN) MOV(64,SeparatorValve01.MSG.MSG) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.STATUS.MESSAGE.SELECT$'$N"
				    "Function=$'STATUS.MESSAGE$'$N"
				    "[Description]$N"
				    "";
				N: [XIC(SeparatorValve01.STAT.AUTO_RUN) NEQ(SeparatorValve01.MSG.PERM,0) MOV(SeparatorValve01.MSG.PERM,SeparatorValve01.MSG.MSG) ,NEQ(SeparatorValve01.MSG.INTRLK,0) MOV(SeparatorValve01.MSG.INTRLK,SeparatorValve01.MSG.MSG) ,NEQ(SeparatorValve01.MSG.FAULT,0) MOV(SeparatorValve01.MSG.FAULT,SeparatorValve01.MSG.MSG) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.STATUS.MESSAGE.NUMBER.UNIQUE$'$N"
				    "Function=$'MAKE.CM.MESSAGENUMBER.UNIQUE$'$N"
				    "";
				N: MakeMessageNumberGloballyUnique(SeparatorValve01.AOI.Message,SeparatorValve01.ID,SeparatorValve01.MSG);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.DISCRETE.OUTPUT.CONTROL$'$N"
				    "Function=$'DISCRETE.OUTPUT.CONTROL$'$N"
				    "";
				N: DiscreteOutputControl(SeparatorValve01.AOI.Control,SeparatorValve01.CMD,SeparatorValve01.STAT);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.DISCRETE.IO.OUTPUT.VALVE.OPNCLS.FEEDBACK$'$N"
				    "Function=$'DISCRETE.OUTPUT.IO.VALVE$'$N"
				    "";
				N: [XIC(SeparatorValve01.STAT.ENERGIZE) OTE(SeparatorValve01_IO_Output) ,[XIO(SeparatorValve01.STAT.ON_OPEN_BYPASS) XIC(SeparatorValve01_IO_Opened) ,XIC(SeparatorValve01.STAT.ON_OPEN_BYPASS) XIC(SeparatorValve01.STAT.ENERGIZE) ] [OTE(SeparatorValve01.STAT.ON_OPEN) ,XIC(SeparatorValve01.DELAY.ON.DN) OTE(SeparatorValve01.STAT.ON_OPEN_DELAY) ,TON(SeparatorValve01.DELAY.ON,?,?) ] ,[XIO(SeparatorValve01.STAT.OFF_CLOSED_BYPASS) XIC(SeparatorValve01_IO_Closed) ,XIC(SeparatorValve01.STAT.OFF_CLOSED_BYPASS) XIO(SeparatorValve01.STAT.ENERGIZE) ] [OTE(SeparatorValve01.STAT.OFF_CLOSED) ,XIC(SeparatorValve01.DELAY.OFF.DN) OTE(SeparatorValve01.STAT.OFF_CLOSED_DELAY) ,TON(SeparatorValve01.DELAY.OFF,?,?) ] ,XIC(PowerInput.STAT.ON) XIC(PowerOutput.STAT.ON) XIC(PowerSafety.STAT.ON) OTE(SeparatorValve01.STAT.ControlPowerOn) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.DISCRETE.ALARM$'$N"
				    "Function=$'ALARM.STAT.FAULT$'$N"
				    "";
				N: [XIC(SeparatorValve01.STAT.ControlPowerOn) XIC(SeparatorValve01.STAT.FAULT) OTE(SeparatorValve01.ALARM[0].ACTIVE) ,AlarmControl(SeparatorValve01.AOI.AlarmControl[0],SeparatorValve01.ALARM[0],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
		END_ROUTINE

		ROUTINE SeparatorValve02 
				RC: "Type=$'CONTROL.MODULE$'$N"
				    "EquipmentModule=$'SCALEHOPPER.01.02.Valve.Mixer01_FlourHopper$'$N"
				    "ControlModule=$'Valve.SeparatorValve02$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.TYPE$'$N"
				    "Function=$'SET.CM.TYPE$'$N"
				    "";
				N: MOV(0,SeparatorValve02.TYPE)NOP();
				RC: "$N"
				    "";
				N: XIC(ph_HopperAddPastryFlour.CM.AutoRun[5])OTE(SeparatorValve02.STAT.AUTO_RUN);
				RC: "$N"
				    "";
				N: [MOV(0,SeparatorValve02.MSG.PERM) ,EQU(SeparatorValve02.MSG.PERM,0) OTE(SeparatorValve02.STAT.PERMISSIVE) ];
				RC: "$N"
				    "";
				N: [MOV(0,SeparatorValve02.MSG.INTRLK) ,XIC(EStop.STAT.FAULT) MOV(21,SeparatorValve02.MSG.INTRLK) ,NEQ(SeparatorValve02.MSG.INTRLK,0) OTE(SeparatorValve02.STAT.INTERLOCK) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.VALVE.FAULT$'$N"
				    "Function=$'VALVE.FAULT$'$N"
				    "[Description]$N"
				    "";
				N: [XIC(SeparatorValve02.STAT.ENERGIZE) [XIO(SeparatorValve02.STAT.ON_OPEN) ,XIC(SeparatorValve02.STAT.OFF_CLOSED) ] ,XIO(SeparatorValve02.STAT.ENERGIZE) [XIC(SeparatorValve02.STAT.ON_OPEN) ,XIO(SeparatorValve02.STAT.OFF_CLOSED) ] ,XIC(SeparatorValve02.STAT.FAULT) ]XIO(SeparatorValve02.CMD.RESET)[XIC(SeparatorValve02.DELAY.FAULT.DN) OTE(SeparatorValve02.STAT.FAULT) ,TON(SeparatorValve02.DELAY.FAULT,?,?) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.STATUS.MESSAGE.VALVE$'$N"
				    "Function=$'STATUS.MESSAGE.VALVE$'$N"
				    "[Description]$N"
				    "";
				N: [MOV(0,SeparatorValve02.MSG.MSG) ,XIC(SeparatorValve02.STAT.ENERGIZE) XIC(SeparatorValve02.STAT.OFF_CLOSED) MOV(61,SeparatorValve02.MSG.MSG) ,XIO(SeparatorValve02.STAT.ENERGIZE) XIO(SeparatorValve02.STAT.OFF_CLOSED) MOV(62,SeparatorValve02.MSG.MSG) ,XIC(SeparatorValve02.STAT.ENERGIZE) XIO(SeparatorValve02.STAT.ON_OPEN) MOV(63,SeparatorValve02.MSG.MSG) ,XIO(SeparatorValve02.STAT.ENERGIZE) XIC(SeparatorValve02.STAT.ON_OPEN) MOV(64,SeparatorValve02.MSG.MSG) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.STATUS.MESSAGE.SELECT$'$N"
				    "Function=$'STATUS.MESSAGE$'$N"
				    "[Description]$N"
				    "";
				N: [XIC(SeparatorValve02.STAT.AUTO_RUN) NEQ(SeparatorValve02.MSG.PERM,0) MOV(SeparatorValve02.MSG.PERM,SeparatorValve02.MSG.MSG) ,NEQ(SeparatorValve02.MSG.INTRLK,0) MOV(SeparatorValve02.MSG.INTRLK,SeparatorValve02.MSG.MSG) ,NEQ(SeparatorValve02.MSG.FAULT,0) MOV(SeparatorValve02.MSG.FAULT,SeparatorValve02.MSG.MSG) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.STATUS.MESSAGE.NUMBER.UNIQUE$'$N"
				    "Function=$'MAKE.CM.MESSAGENUMBER.UNIQUE$'$N"
				    "";
				N: MakeMessageNumberGloballyUnique(SeparatorValve02.AOI.Message,SeparatorValve02.ID,SeparatorValve02.MSG);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.DISCRETE.OUTPUT.CONTROL$'$N"
				    "Function=$'DISCRETE.OUTPUT.CONTROL$'$N"
				    "";
				N: DiscreteOutputControl(SeparatorValve02.AOI.Control,SeparatorValve02.CMD,SeparatorValve02.STAT);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.DISCRETE.IO.OUTPUT.VALVE.OPNCLS.FEEDBACK$'$N"
				    "Function=$'DISCRETE.OUTPUT.IO.VALVE$'$N"
				    "";
				N: [XIC(SeparatorValve02.STAT.ENERGIZE) OTE(SeparatorValve02_IO_Output) ,[XIO(SeparatorValve02.STAT.ON_OPEN_BYPASS) XIC(SeparatorValve02_IO_Opened) ,XIC(SeparatorValve02.STAT.ON_OPEN_BYPASS) XIC(SeparatorValve02.STAT.ENERGIZE) ] [OTE(SeparatorValve02.STAT.ON_OPEN) ,XIC(SeparatorValve02.DELAY.ON.DN) OTE(SeparatorValve02.STAT.ON_OPEN_DELAY) ,TON(SeparatorValve02.DELAY.ON,?,?) ] ,[XIO(SeparatorValve02.STAT.OFF_CLOSED_BYPASS) XIC(SeparatorValve02_IO_Closed) ,XIC(SeparatorValve02.STAT.OFF_CLOSED_BYPASS) XIO(SeparatorValve02.STAT.ENERGIZE) ] [OTE(SeparatorValve02.STAT.OFF_CLOSED) ,XIC(SeparatorValve02.DELAY.OFF.DN) OTE(SeparatorValve02.STAT.OFF_CLOSED_DELAY) ,TON(SeparatorValve02.DELAY.OFF,?,?) ] ,XIC(PowerInput.STAT.ON) XIC(PowerOutput.STAT.ON) XIC(PowerSafety.STAT.ON) OTE(SeparatorValve02.STAT.ControlPowerOn) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.DISCRETE.ALARM$'$N"
				    "Function=$'ALARM.STAT.FAULT$'$N"
				    "";
				N: [XIC(SeparatorValve02.STAT.ControlPowerOn) XIC(SeparatorValve02.STAT.FAULT) OTE(SeparatorValve02.ALARM[0].ACTIVE) ,AlarmControl(SeparatorValve02.AOI.AlarmControl[0],SeparatorValve02.ALARM[0],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
		END_ROUTINE

		ROUTINE Vibrator 
				RC: "Type=$'CONTROL.MODULE$'$N"
				    "EquipmentModule=$'SCALEHOPPER.01.02.Vibrator.Mixer01_FlourHopper$'$N"
				    "ControlModule=$'Vibrator.Vibrator$'$N"
				    "";
				N: NOP();
				RC: "$N"
				    "";
				N: XIC(ph_HopperDump.CM.AutoRun[10])LIM(2250,Evasor.TMR[1].ACC,2750)OTE(Vibrator.STAT.AUTO_RUN);
				RC: "$N"
				    "";
				N: [MOV(0,Vibrator.MSG.PERM) ,XIO(DischargeValve.STAT.ON_OPEN) MOV(2,Vibrator.MSG.PERM) ,XIO(MixerInletGate.STAT.ON_OPEN) MOV(3,Vibrator.MSG.PERM) ,EQU(Vibrator.MSG.PERM,0) OTE(Vibrator.STAT.PERMISSIVE) ];
				RC: "$N"
				    "";
				N: [MOV(0,Vibrator.MSG.INTRLK) ,XIC(EStop.STAT.FAULT) MOV(21,Vibrator.MSG.INTRLK) ,NEQ(Vibrator.MSG.INTRLK,0) OTE(Vibrator.STAT.INTERLOCK) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.FAULT.NONE$'$N"
				    "Function=$'FAULT.NONE$'$N"
				    "[Description]$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.STATUS.MESSAGE.CLEAR$'$N"
				    "Function=$'STATUS.MESSAGE.CLEAR$'$N"
				    "[Description]$N"
				    "";
				N: MOV(0,Vibrator.MSG.MSG);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.STATUS.MESSAGE.SELECT$'$N"
				    "Function=$'STATUS.MESSAGE$'$N"
				    "[Description]$N"
				    "";
				N: [XIC(Vibrator.STAT.AUTO_RUN) NEQ(Vibrator.MSG.PERM,0) MOV(Vibrator.MSG.PERM,Vibrator.MSG.MSG) ,NEQ(Vibrator.MSG.INTRLK,0) MOV(Vibrator.MSG.INTRLK,Vibrator.MSG.MSG) ,NEQ(Vibrator.MSG.FAULT,0) MOV(Vibrator.MSG.FAULT,Vibrator.MSG.MSG) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.STATUS.MESSAGE.NUMBER.UNIQUE$'$N"
				    "Function=$'MAKE.CM.MESSAGENUMBER.UNIQUE$'$N"
				    "";
				N: MakeMessageNumberGloballyUnique(Vibrator.AOI.Message,Vibrator.ID,Vibrator.MSG);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.DISCRETE.OUTPUT.CONTROL$'$N"
				    "Function=$'DISCRETE.OUTPUT.CONTROL$'$N"
				    "";
				N: DiscreteOutputControl(Vibrator.AOI.Control,Vibrator.CMD,Vibrator.STAT);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.DISCRETE.IO.OUTPUT.BASIC$'$N"
				    "Function=$'DISCRETE.OUTPUT.IO.BASIC.CONTROL$'$N"
				    "";
				N: [XIC(Vibrator.STAT.ENERGIZE) OTE(Vibrator_IO_Output) ,XIC(Vibrator.STAT.ENERGIZE) OTE(Vibrator.STAT.ON_OPEN) ,XIO(Vibrator.STAT.ENERGIZE) OTE(Vibrator.STAT.OFF_CLOSED) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.DISCRETE.ALARM$'$N"
				    "Function=$'ALARM.STAT.FAULT$'$N"
				    "";
				N: [XIC(Vibrator.STAT.FAULT) OTE(Vibrator.ALARM[0].ACTIVE) ,AlarmControl(Vibrator.AOI.AlarmControl[0],Vibrator.ALARM[0],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
		END_ROUTINE

		ROUTINE Weight 
				RC: "Type=$'CONTROL.MODULE$'$N"
				    "EquipmentModule=$'SCALEHOPPER.01.02.Scale.Mixer01_FlourHopper$'$N"
				    "ControlModule=$'Scale.Weight$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.ANALOG.TYPE$'$N"
				    "Function=$'SET.CM.TYPE$'$N"
				    "";
				N: MOV(127,Weight.DISPLAY_MASK.BITS)NOP();
				RC: "Template=$'SCALEHOPPER.01.02.SCALE.WEIGHT$'$N"
				    "Function=$'WEIGHT.VALUE$'$N"
				    "[Description]$N"
				    "";
				N: [MOV(Weight_IO_Value,Weight.RAW) ,XIC(Weight_IO_DataOkay) OTE(Weight.STAT.DATA_OK) ,XIC(cCOMMON.ONE_SECOND_PULSE) OTU(Weight_IO_DataOkay) ];
				RC: "Template=$'SCALEHOPPER.01.02.SCALE.WEIGHT$'$N"
				    "Function=$'WEIGHT.VALUE.SCALE$'$N"
				    "[Description]$N"
				    "";
				N: AnalogInputScaling(Weight.AOI.Scaling,Weight.RAW,Weight.RAW_LO,Weight.RAW_HI,Weight.SCALE_LO,Weight.SCALE_HI,Weight.SCALED);
				RC: "Template=$'SCALEHOPPER.01.02.SCALE.WEIGHT$'$N"
				    "Function=$'WEIGHT.VALUE.ZERO$'$N"
				    "[Description]$N"
				    "";
				N: [[XIC(Weight.CMD.BITS.5) ,XIC(Weight.TMR[1].TT) ] LES(Weight.SCALED,25) [TON(Weight.TMR[1],?,?) ,MOV(404,Weight_IO_Command) ] ,XIO(Weight.TMR[1].TT) EQU(Weight_IO_Command,404) MOV(0,Weight_IO_Command) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.ANALOG.COMPARE.LOLO$'$N"
				    "Function=$'ANALOG.COMPARE.LOLO$'$N"
				    "[Description]$N"
				    "";
				N: [LES(Weight.SCALED,Weight.LoLo.LIM) ,XIC(Weight.LoLo.ACTIVE) ]CMP(Weight.SCALED<=(Weight.LoLo.LIM+Weight.LoLo.DEADBAND))[XIC(Weight.LoLo.DELAY.DN) OTE(Weight.LoLo.ACTIVE) ,TON(Weight.LoLo.DELAY,?,?) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.ANALOG.COMPARE.LO$'$N"
				    "Function=$'ANALOG.COMPARE.LO$'$N"
				    "[Description]$N"
				    "";
				N: [LES(Weight.SCALED,Weight.Lo.LIM) ,XIC(Weight.Lo.ACTIVE) ]CMP(Weight.SCALED<=(Weight.Lo.LIM+Weight.Lo.DEADBAND))[XIC(Weight.Lo.DELAY.DN) OTE(Weight.Lo.ACTIVE) ,TON(Weight.Lo.DELAY,?,?) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.ANALOG.COMPARE.HI$'$N"
				    "Function=$'ANALOG.COMPARE.HI$'$N"
				    "[Description]$N"
				    "";
				N: [GRT(Weight.SCALED,Weight.Hi.LIM) ,XIC(Weight.Hi.ACTIVE) ]CMP(Weight.SCALED>=(Weight.Hi.LIM-Weight.Hi.DEADBAND))[XIC(Weight.Hi.DELAY.DN) OTE(Weight.Hi.ACTIVE) ,TON(Weight.Hi.DELAY,?,?) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.ANALOG.COMPARE.HIHI$'$N"
				    "Function=$'ANALOG.COMPARE.HIHI$'$N"
				    "[Description]$N"
				    "";
				N: [GRT(Weight.SCALED,Weight.HiHi.LIM) ,XIC(Weight.HiHi.ACTIVE) ]CMP(Weight.SCALED>=(Weight.HiHi.LIM-Weight.HiHi.DEADBAND))[XIC(Weight.HiHi.DELAY.DN) OTE(Weight.HiHi.ACTIVE) ,TON(Weight.HiHi.DELAY,?,?) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.ANALOG.RATE.CHANGE$'$N"
				    "Function=$'ANALOG.RATE.CHANGE$'$N"
				    "[Description]$N"
				    "";
				N: AnalogInputRate(Weight.AOI.Rate,Weight.SCALED,Weight.RATE);
				RC: "$N"
				    "";
				N: [XIC(ph_HopperAddPastryFlour.CM.AutoRun[20]) ,XIC(ph_HopperAddSpringFlour.CM.AutoRun[20]) ,XIC(ph_HopperDump.CM.AutoRun[20]) ][LES(Weight.RATE.CHANGE,Weight.RATE.Lo.LIM) ,XIC(Weight.RATE.Lo.ACTIVE) ]CMP(Weight.RATE.CHANGE<=(Weight.RATE.Lo.LIM+Weight.RATE.Lo.DEADBAND))[XIC(Weight.RATE.Lo.DELAY.DN) OTE(Weight.RATE.Lo.ACTIVE) ,TON(Weight.RATE.Lo.DELAY,?,?) ];
				RC: "$N"
				    "";
				N: [XIC(ph_HopperAddPastryFlour.CM.AutoRun[20]) ,XIC(ph_HopperAddSpringFlour.CM.AutoRun[20]) ,XIC(ph_HopperDump.CM.AutoRun[20]) ][LES(Weight.RATE.CHANGE,Weight.RATE.LoLo.LIM) ,XIC(Weight.RATE.LoLo.ACTIVE) ]CMP(Weight.RATE.CHANGE<=(Weight.RATE.LoLo.LIM+Weight.RATE.LoLo.DEADBAND))[XIC(Weight.RATE.LoLo.DELAY.DN) OTE(Weight.RATE.LoLo.ACTIVE) ,TON(Weight.RATE.LoLo.DELAY,?,?) ];
				N: XIO(Weight.STAT.DATA_OK)[XIC(Weight.Fault.DELAY.DN) OTE(Weight.STAT.FAULT) OTE(Weight.Fault.ACTIVE) ,MOV(10000,Weight.Fault.DELAY.PRE) TON(Weight.Fault.DELAY,?,?) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.ANALOG.MODE$'$N"
				    "Function=$'ANALOG.MODE$'$N"
				    "[Description]$N"
				    "";
				N: AnalogInputMode(Weight.AOI.Mode,Weight.CMD,Weight.STAT,Weight.MAN_SP,Weight.SCALED);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.ANALOG.ALARM$'$N"
				    "Function=$'ALARM.LOLO$'$N"
				    "";
				N: [XIC(Weight.LoLo.ACTIVE) XIO(Weight.LoLo.DISABLED) OTE(Weight.ALARM[0].ACTIVE) ,AlarmControl(Weight.AOI.AlarmControl[0],Weight.ALARM[0],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.ANALOG.ALARM$'$N"
				    "Function=$'ALARM.LO$'$N"
				    "";
				N: [XIC(Weight.Lo.ACTIVE) XIO(Weight.Lo.DISABLED) OTE(Weight.ALARM[1].ACTIVE) ,AlarmControl(Weight.AOI.AlarmControl[1],Weight.ALARM[1],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.ANALOG.ALARM$'$N"
				    "Function=$'ALARM.HI$'$N"
				    "";
				N: [XIC(Weight.Hi.ACTIVE) XIO(Weight.Hi.DISABLED) OTE(Weight.ALARM[2].ACTIVE) ,AlarmControl(Weight.AOI.AlarmControl[2],Weight.ALARM[2],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.ANALOG.ALARM$'$N"
				    "Function=$'ALARM.HIHI$'$N"
				    "";
				N: [XIC(Weight.HiHi.ACTIVE) XIO(Weight.HiHi.DISABLED) OTE(Weight.ALARM[3].ACTIVE) ,AlarmControl(Weight.AOI.AlarmControl[3],Weight.ALARM[3],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.ANALOG.ALARM$'$N"
				    "Function=$'ALARM.RATE.LO$'$N"
				    "";
				N: [XIC(Weight.RATE.Lo.ACTIVE) XIO(Weight.RATE.Lo.DISABLED) OTE(Weight.ALARM[4].ACTIVE) ,AlarmControl(Weight.AOI.AlarmControl[4],Weight.ALARM[4],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.ANALOG.ALARM$'$N"
				    "Function=$'ALARM.RATE.LOLO$'$N"
				    "";
				N: [XIC(Weight.RATE.LoLo.ACTIVE) XIO(Weight.RATE.LoLo.DISABLED) OTE(Weight.ALARM[5].ACTIVE) ,AlarmControl(Weight.AOI.AlarmControl[5],Weight.ALARM[5],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.CM.ANALOG.ALARM$'$N"
				    "Function=$'ALARM.FAULT$'$N"
				    "";
				N: [XIC(Weight.Fault.ACTIVE) XIO(Weight.Fault.DISABLED) OTE(Weight.ALARM[6].ACTIVE) ,AlarmControl(Weight.AOI.AlarmControl[6],Weight.ALARM[6],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
				N: Arbitration(Weight.AOI.Arbitration,Weight.ARB,Weight.INDEX,1);
		END_ROUTINE

		ROUTINE _FirstScan 
				RC: "$N"
				    "Program=$'EM$'$N"
				    "Class=$'SCALEHOPPER.01.02$'$N"
				    "";
				N: NOP();
		END_ROUTINE

		ROUTINE _Main 
				RC: "$N"
				    "Program=$'EM$'$N"
				    "Class=$'SCALEHOPPER.01.02$'$N"
				    "";
				N: NOP();
				RC: "$N"
				    "Program=$'CM$'$N"
				    "Class=$'SCALE$'$N"
				    "Type=$'AI$'$N"
				    "Device=$'WI504$'$N"
				    "[Description]:Weight$N"
				    "";
				N: JSR(Weight,0);
				RC: "$N"
				    "Program=$'CM$'$N"
				    "Class=$'VALVE$'$N"
				    "Type=$'DO$'$N"
				    "Device=$'BV501$'$N"
				    "[Description]:Discharge Valve$N"
				    "";
				N: JSR(DischargeValve,0);
				RC: "$N"
				    "Program=$'CM$'$N"
				    "Class=$'EVASOR$'$N"
				    "Type=$'DO$'$N"
				    "Device=$'EV504$'$N"
				    "[Description]:Evasor$N"
				    "";
				N: JSR(Evasor,0);
				RC: "$N"
				    "Program=$'CM$'$N"
				    "Class=$'VIBRATOR$'$N"
				    "Type=$'DO$'$N"
				    "Device=$'V504$'$N"
				    "[Description]:Vibrator$N"
				    "";
				N: JSR(Vibrator,0);
				RC: "$N"
				    "Program=$'CM$'$N"
				    "Class=$'VALVE$'$N"
				    "Type=$'DO$'$N"
				    "Device=$'SV501$'$N"
				    "[Description]:Separator Valve 01$N"
				    "";
				N: JSR(SeparatorValve01,0);
				RC: "$N"
				    "Program=$'CM$'$N"
				    "Class=$'VALVE$'$N"
				    "Type=$'DO$'$N"
				    "Device=$'SV500$'$N"
				    "[Description]:Separator Valve 02$N"
				    "";
				N: JSR(SeparatorValve02,0);
				RC: "$N"
				    "Program=$'CM$'$N"
				    "Class=$'VALVE$'$N"
				    "Type=$'DO$'$N"
				    "Device=$'RV500$'$N"
				    "[Description]:Relief Valve$N"
				    "";
				N: JSR(ReliefValve,0);
				RC: "$N"
				    "First Scan Routine Call$N"
				    "This routine will set all defaut configurations for the equipment module and control module settings and parameters.$N"
				    "";
				N: XIC(S:FS)JSR(_FirstScan,0);
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM
