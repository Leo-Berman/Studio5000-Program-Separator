	PROGRAM Mixer04Hopper_AddGEMConcentrate (Description := "$NProgram=$'PH$'$NClass=$'USEBIN.TO.HOPPER:02.01.01$'$N",
	                                         MAIN := "_000_Main",
	                                         MODE := 0,
	                                         DisableFlag := 0,
	                                         UseAsFolder := 0)
		TAG
			ActualAmount OF Phase.ACTUAL[1] (RADIX := Float);
			ActualAmountAccumulator OF Phase.ACTUAL[0] (RADIX := Float);
			ActualAmountAdjustment OF Phase.ACTUAL[3] (RADIX := Float);
			ActualAmountError OF Phase.ACTUAL[2] (RADIX := Float);
			ActualAmountTare OF Phase.ACTUAL[4] (RADIX := Float);
			AOI : CB_PHASE_AOI  := [[3],[3,10720000],[3,[0,1015]],[3],[0,7.99999237e-001],[3],[3,1.00000000e+001,5.62000008e+001],[3],[3,1072,107200,107199
					],[[3],[3],[1],[1],[1],[1],[1],[1]],[3,16,15,15],[1,[[1,0,0],[[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],0,0]],0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,[1,0.00000000e+000,0.00000000e+000],0.00000000e+000
					],[1,0.00000000e+000,0.00000000e+000]];
			Arb00 OF cAI[224] ;
			Arb01 OF cDO[256] ;
			Arb02 OF cAI[74] ;
			AutoRunBlower OF Phase.CM.AutoRun[10] (RADIX := Decimal);
			AutoRunDribble OF Phase.CM.AutoRun[21] (RADIX := Decimal);
			AutoRunDustCollBlockValve OF Phase.CM.AutoRun[7] (RADIX := Decimal);
			AutoRunDustCollector OF Phase.CM.AutoRun[6] (RADIX := Decimal);
			AutoRunFeederMotor OF Phase.CM.AutoRun[11] (RADIX := Decimal);
			AutoRunMonitorFlowrate OF Phase.CM.AutoRun[20] (RADIX := Decimal);
			AutoRunPath OF Phase.CM.AutoRun[1] (RADIX := Decimal);
			BlockValveDustCollector OF cDO[548] ;
			BlockValveInTube OF cDO[244] ;
			BlowerMotor OF cDO[256] ;
			BlowerPressure OF cAI[80] ;
			BlowerRunningTareHopperWeight OF Phase.TMR[0] ;
			BulkBagAirInlet OF cDO[243] ;
			BulkBagWeight OF cAI[74] ;
			DehumidifierFault OF cDO[436] ;
			DischargeValve OF cDO[546] ;
			Diverter1 OF cDO[246] ;
			DryerRunning OF cDI[311] ;
			DustCollector OF cDO[549] ;
			DustCollectorBlockValve OF cDO[548] ;
			EnableDryerRunningInterlock : BOOL (RADIX := Decimal) := 0;
			EStop OF cDI[5] ;
			Feeder OF cDO[239] ;
			MinorsHopperWeight OF cAI[224] ;
			OIT : CB_OIT  := [[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],0,0,[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],0,0,0,109222127,0,0,[0,0,0,0,0,0,0,0,0,0],[0,0,0,0],0,[0,[0,0,0]],[0,[0,0,0]],0,0,0];
			PathOff01 OF cDO[246] ;
			PathOn01 OF cDO[243] ;
			PathOn02 OF cDO[244] ;
			Phase OF cPHZ[72] (Usage := Public);
			PhaseClass OF cPHZ_CLASS[13] (Usage := Public);
			ReliefValve OF cDO[547] ;
			ScaleHopperWeight OF cAI[74] ;
			SettingHopperWeightTareDelay OF Phase.USER.SETTINGS[4] (RADIX := Float);
			SettingPurgeTimeWaitingForLowLowPressure : REAL (RADIX := Float) := 0.00000000e+000;
			SettingPurgeTimeWaitingForLowPressure OF Phase.USER.SETTINGS[0] (RADIX := Float);
			SettingTimeUntilFinalReading OF Phase.USER.SETTINGS[5] (RADIX := Float);
			SourceUnit OF cUNIT[23] ;
			TargetAmount OF Phase.SPT[0] (RADIX := Float);
			TargetAmountAdjustmentLimit OF Phase.SPT[3] (RADIX := Float);
			TargetAmountSetpoint OF Phase.SPT[1] (RADIX := Float);
			TargetAmountTolerance OF Phase.SPT[2] (RADIX := Float);
			Unit OF cUNIT[55] ;
			UsebinWeight OF cAI[74] ;
			ValidPath OF Phase.USER.STAT.1 (RADIX := Decimal);
		END_TAG

		ROUTINE _000_FirstScan 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'USEBIN.TO.HOPPER:02.01.01$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.TYPE$'$N"
				    "Function=$'TYPE$'$N"
				    "";
				N: MOV(13,PhaseClass.TYPE);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.INDEX.SETTING$'$N"
				    "Function=$'INDEX.SETTING$'$N"
				    "";
				N: MOV(Unit.ARRAY_INDEX,Phase.INDEX)MOV(PhaseClass.TYPE,Phase.TYPE)MOV(PhaseClass.ID,Phase.CLASS)COP(PhaseClass.NAME,Phase.CLASS_NAME,1)COP(PhaseClass.TYPE_NAME,Phase.TYPE_NAME,1);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.DISPLAY.MASK.SETTING$'$N"
				    "Function=$'DISPLAY.MASK.SETTING$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.CLASS.PARAMETERS$'$N"
				    "Function=$'CLASS.PARAMETERS$'$N"
				    "";
				N: PhaseClassParameter(AOI.PhaseClassParameter,PhaseClass,Phase.USER,Phase.DISPLAY_MASK,Phase.TYPE_MASK);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.SECTION.FIRSTSCAN.SETTING$'$N"
				    "Function=$'STANDARD.PHASE.SECTION.FIRSTSCAN.SETTING$'$N"
				    "";
				N: PhaseClassParameter(AOI.PhaseClassParameter,PhaseClass,Phase.USER,Phase.DISPLAY_MASK,Phase.TYPE_MASK);
				RC: "Template=$'PHASE.PHASE.MATERIAL.BLOWER.TRANSFER.TO.HOPPER$'$N"
				    "Function=$'SETTING.PURGE.TIME$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: LES(SettingPurgeTimeWaitingForLowPressure,30)MOV(120,SettingPurgeTimeWaitingForLowPressure);
				RC: "Template=$'PHASE.PHASE.MATERIAL.BLOWER.TRANSFER.TO.HOPPER$'$N"
				    "Function=$'SETTING.RECORD.STEP.TIME$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: MOV(2000,Phase.STEP_TMR.RECORD.PRE);
				RC: "Template=$'PHASE.PHASE.MATERIAL.BLOWER.TRANSFER.TO.HOPPER$'$N"
				    "Function=$'SETTING.TARE.HOPPER.TIME$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: LEQ(BlowerRunningTareHopperWeight.PRE,BlowerMotor.DELAY.ON.PRE)ADD(BlowerMotor.DELAY.ON.PRE,5000,BlowerRunningTareHopperWeight.PRE);
		END_ROUTINE

		ROUTINE _000_Main 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'USEBIN.TO.HOPPER:02.01.01$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.FIRSTSCAN$'$N"
				    "Function=$'EXECUTE.FIRSTSCAN$'$N"
				    "";
				N: XIC(S:FS)JSR(_000_FirstScan,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.WATCHWINDOW.STATE$'$N"
				    "Function=$'WATCHWINDOW.PHASE.STATE$'$N"
				    "";
				N: XIC(Phase.STATE.IDLE)XIC(Phase.STATE.RUNNING)XIC(Phase.STATE.HELD)XIC(Phase.STATE.COMPLETE)XIC(Phase.STATE.ABORTED)XIC(Phase.STATE.STOPPED)NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.WATCHWINDOW.STATE.TRANSITION$'$N"
				    "Function=$'WATCHWINDOW.PHASE.STATE.TRANSITION$'$N"
				    "";
				N: XIC(Phase.STATE.HOLDING)XIC(Phase.STATE.RESTARTING)XIC(Phase.STATE.ABORTING)XIC(Phase.STATE.STOPPING)NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.WATCHWINDOW.CONTROL$'$N"
				    "Function=$'WATCHWINDOW.PHASE.CONTROL$'$N"
				    "";
				N: [XIC(Phase.CMD.START) XIC(Phase.CMD.HOLD) XIC(Phase.CMD.RESTART) XIC(Phase.CMD.STOP) XIC(Phase.CMD.ABORT) XIC(Phase.CMD.RESET) ,MOV(Phase.STATE_NO,Phase.STATE_NO) MOV(Phase.STEP_INDEX,Phase.STEP_INDEX) MOV(Phase.MSG.FAULT,Phase.MSG.FAULT) ,MOV(MinorsHopperWeight.SIMULATION_AMOUNT,MinorsHopperWeight.SIMULATION_AMOUNT) MOV(BlowerPressure.SIMULATION_AMOUNT,BlowerPressure.SIMULATION_AMOUNT) ,MOV(ActualAmount,ActualAmount) MOV(TargetAmount,TargetAmount) MOV(TargetAmountSetpoint,TargetAmountSetpoint) ]NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.PERMISSIVES.FAULTS.MESSAGING$'$N"
				    "Function=$'EXECUTE.PERMISSIVES.FAULTS.MESSAGING$'$N"
				    "";
				N: JSR(_120_PermissiveFaultAndMessaging,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.AOI$'$N"
				    "Function=$'AOI$'$N"
				    "";
				N: PhaseMode(AOI.Mode,Phase,cPHZ[0].MSG)PhaseCommon(AOI.Common,Phase)PhaseStepIndex(AOI.StepIndex,Phase)PhaseStateTransition(AOI.StateTransition,Phase.CMD,Phase.STAT,Phase.STATE,Phase.STATE_NO);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.STEPCONTROL$'$N"
				    "Function=$'EXECUTE.STEPCONTROL$'$N"
				    "";
				N: JSR(_050_StepControl,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.CONTROLMODULE$'$N"
				    "Function=$'EXECUTE.CONTROLMODULE$'$N"
				    "";
				N: JSR(_110_ControlModule,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.ALARMING$'$N"
				    "Function=$'EXECUTE.ALARMING$'$N"
				    "";
				N: JSR(_130_Alarming,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.STEP.MAPPING$'$N"
				    "Function=$'STEP.MAPPING$'$N"
				    "";
				N: PhaseStepMapping(AOI.StepMapping,Phase);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.BYPASS$'$N"
				    "Function=$'BYPASS$'$N"
				    "";
				N: PhaseBypass(AOI.Bypass,Phase);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.ARBITRATION$'$N"
				    "Function=$'EXECUTE.ARBITRATION$'$N"
				    "";
				N: JSR(_100_Arbitration,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.MAIN.EXTENDED.FUNCTION$'$N"
				    "Function=$'EXTENDED.FUNCTION$'$N"
				    "";
				N: NOP();
		END_ROUTINE

		ROUTINE _050_StepControl 
				N: NOP();
				N: XIC(cSETUP.SIMULATION.Enabled)XIC(cSETUP.SIMULATION.PHASE)RET();
				RC: "Location index assignments$N"
				    "Set from/to indices, based on silo selection if necessary";
				N: MOV(23,Phase.INV.LOCATION_INDEX_FROM);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,1)MOV(2000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,2000)[GEQ(Phase.STEP_TMR.CurrentStepIndex.ACC,Phase.STEP_TMR.RECORD.PRE) [MOV(3000,Phase.STEP_INDEX_GOTO) ,EQU(TargetAmount,0) MOV(8000,Phase.STEP_INDEX_GOTO) ] ,MOV(0,ActualAmountTare) MOV(0,ActualAmount) MOV(0,ActualAmountAccumulator) ];
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,3000)XIC(Phase.STAT.PERMISSIVE)MOV(4000,Phase.STEP_INDEX_GOTO);
				N: NOP();
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4000)XIC(ValidPath)MOV(4030,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4030)XIC(DustCollectorBlockValve.STAT.ON_OPEN_DELAY)MOV(4100,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4100)XIC(BlowerMotor.STAT.ON_OPEN_DELAY)MOV(4200,Phase.STEP_INDEX_GOTO);
				N: [GEQ(SettingHopperWeightTareDelay,0) MUL(SettingHopperWeightTareDelay,1000,BlowerRunningTareHopperWeight.PRE) ,LES(SettingHopperWeightTareDelay,0) MOV(0,BlowerRunningTareHopperWeight.PRE) ];
				N: [XIC(AutoRunBlower) XIC(BlowerMotor.STAT.ON_OPEN_DELAY) XIO(BlowerPressure.LoLo.ACTIVE) TON(BlowerRunningTareHopperWeight,?,?) ,XIC(Phase.STATE.RUNNING) EQU(Phase.STEP_INDEX,4200) XIC(BlowerRunningTareHopperWeight.DN) [MOV(ActualAmount,ActualAmountAccumulator) MOV(ScaleHopperWeight.SCALED,ActualAmountTare) ,OTL(Phase.STAT.ACTIVE_ONCE) MOV(4210,Phase.STEP_INDEX_GOTO) ] ];
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4210)MOV(4270,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4270)GEQ(Phase.STEP_TMR.CurrentStepIndex.ACC,2000)MOV(4280,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4280)XIC(Feeder.STAT.ON_OPEN_DELAY)MOV(5000,Phase.STEP_INDEX_GOTO);
				N: PhaseTargetAdjustLimit(AOI.TargetAdjustLimit,TargetAmountAdjustmentLimit,ActualAmountAdjustment,TargetAmount,TargetAmountSetpoint,Phase.STAT.MAN);
				N: XIC(Phase.STAT.ACTIVE_ONCE)[XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.HOLDING) ,XIC(Phase.STATE.STOPPING) ]LIM(4210,Phase.STEP_INDEX,6010)CPT(ActualAmount,(ActualAmountTare-ScaleHopperWeight.SCALED)+ActualAmountAccumulator)SUB(ActualAmount,TargetAmount,ActualAmountError);
				N: XIC(Phase.STATE.RUNNING)LIM(4210,Phase.STEP_INDEX,5999)CMP(ActualAmount > TargetAmount - (Phase.PREACT.ACTUAL + Phase.PREACT.DRIBBLE))OTE(Phase.PREACT.DRIBBLING);
				N: XIC(Phase.STATE.RUNNING)LIM(4210,Phase.STEP_INDEX,5999)CMP(ActualAmount > TargetAmount - Phase.PREACT.ACTUAL)MOV(6000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)[EQU(Phase.STEP_INDEX,6000) ,EQU(Phase.STEP_INDEX_GOTO,6000) ]XIC(BlowerMotor.STAT.INTERLOCK)MOV(7000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,6000)[XIC(BlowerPressure.Lo.ACTIVE) ,XIC(BlowerPressure.HiHi.ACTIVE) ,XIC(BlowerPressure.Hi.ACTIVE) GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,15) ,GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,SettingPurgeTimeWaitingForLowPressure) OTL(Phase.ALARM[3].ACTIVE) ]MOV(6010,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,6010)GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,SettingTimeUntilFinalReading)MOV(6020,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,6020)[XIC(BlowerPressure.LoLo.ACTIVE) ,GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,30) ][XIC(Phase.TMR[1].DN) MOV(7000,Phase.STEP_INDEX_GOTO) ,TON(Phase.TMR[1],?,?) ];
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,7000)XIC(Phase.STEP.FirstScanInStepIndex)PhaseCalculatePreact(AOI.CalculatePreact,Phase.PREACT,ActualAmountError)MOV(8000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,8000)MOV(9000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,9000)[GRT(TargetAmountTolerance,0) CMP(ABS(ActualAmountError)>TargetAmountTolerance) OTL(Phase.STAT.OUT_TOL) ,XIO(Phase.STAT.OUT_TOL) MOV(10000,Phase.STEP_INDEX_GOTO) ,XIC(Phase.STAT.OUT_TOL) MOV(9010,Phase.STEP_INDEX_GOTO) ];
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,9010)[XIC(Phase.CMD.ACK) ,XIC(Phase.CMD.ACK_OUT_TOL) ]OTU(Phase.STAT.OUT_TOL)MOV(10000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,10000)OTE(Phase.STAT.RUNNING_COMPLETE);
				N: NOP();
				N: XIC(Phase.STATE.Oneshot.Holding)[GEQ(Phase.STEP_INDEX,6000) MOV(Phase.STEP_INDEX,Phase.STEP_INDEX_GOTO_ON_RESTART) ,LES(Phase.STEP_INDEX,6000) MOV(3000,Phase.STEP_INDEX_GOTO_ON_RESTART) ];
				N: XIC(Phase.STATE.HOLDING)EQU(Phase.STEP_INDEX,2000)[GEQ(Phase.STEP_TMR.CurrentStepIndex.ACC,Phase.STEP_TMR.RECORD.PRE) MOV(3000,Phase.STEP_INDEX_GOTO) ,MOV(0,ActualAmountTare) MOV(0,ActualAmount) MOV(0,ActualAmountAccumulator) ];
				N: XIC(Phase.STATE.HOLDING)LIM(3000,Phase.STEP_INDEX,4209)MOV(7000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.HOLDING)LIM(4210,Phase.STEP_INDEX,5999)MOV(6000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.HOLDING)[EQU(Phase.STEP_INDEX,6000) ,EQU(Phase.STEP_INDEX_GOTO,6000) ]XIC(BlowerMotor.STAT.INTERLOCK)MOV(7000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.HOLDING)EQU(Phase.STEP_INDEX,6000)[XIC(BlowerPressure.Lo.ACTIVE) ,XIC(BlowerPressure.HiHi.ACTIVE) ,XIC(BlowerPressure.Hi.ACTIVE) GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,20) ,GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,SettingPurgeTimeWaitingForLowPressure) ]MOV(6010,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.HOLDING)EQU(Phase.STEP_INDEX,6010)GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,SettingTimeUntilFinalReading)MOV(7000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.HOLDING)EQU(Phase.STEP_INDEX,6020)[XIC(BlowerPressure.LoLo.ACTIVE) ,GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,30) ]MOV(7000,Phase.STEP_INDEX_GOTO);
				N: NOP();
				N: XIC(Phase.STATE.HOLDING)GEQ(Phase.STEP_INDEX,7000)OTE(Phase.STAT.HOLDING_COMPLETE);
				N: NOP();
				N: XIC(Phase.STATE.Oneshot.Restarting)GRT(Phase.STEP_INDEX_GOTO_ON_RESTART,0)MOV(Phase.STEP_INDEX_GOTO_ON_RESTART,Phase.STEP_INDEX_GOTO)MOV(-1,Phase.STEP_INDEX_GOTO_ON_RESTART);
				N: NOP();
				N: XIC(Phase.STATE.RESTARTING)[XIC(Phase.STEP_TMR.RESTARTING.DN) OTE(Phase.STAT.RESTARTING_COMPLETE) ,TON(Phase.STEP_TMR.RESTARTING,?,?) ];
				N: NOP();
				N: XIC(Phase.STATE.STOPPING)LIM(1,Phase.STEP_INDEX,4209)MOV(7000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)LIM(4210,Phase.STEP_INDEX,5999)MOV(6000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)[EQU(Phase.STEP_INDEX,6000) ,EQU(Phase.STEP_INDEX_GOTO,6000) ]XIC(BlowerMotor.STAT.INTERLOCK)MOV(7000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,6000)[XIC(BlowerPressure.Lo.ACTIVE) ,GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,SettingPurgeTimeWaitingForLowPressure) ]MOV(6010,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,6010)GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,SettingTimeUntilFinalReading)MOV(6020,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,6020)[XIC(BlowerPressure.LoLo.ACTIVE) LES(BlowerPressure.SCALED,BlowerPressure.LoLo.LIM) ,GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,30) ][XIC(Phase.TMR[2].DN) MOV(7000,Phase.STEP_INDEX_GOTO) ,TON(Phase.TMR[2],?,?) ];
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,7000)MOV(8000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,8000)MOV(9000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)LIM(9000,Phase.STEP_INDEX,9999)MOV(10000,Phase.STEP_INDEX_GOTO);
				N: NOP();
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,10000)OTE(Phase.STAT.STOPPING_COMPLETE);
				N: NOP();
				N: XIC(Phase.STATE.Oneshot.Aborting)MOV(10000,Phase.STEP_INDEX_GOTO);
				N: NOP();
				N: XIC(Phase.STATE.ABORTING)EQU(Phase.STEP_INDEX,10000)OTE(Phase.STAT.ABORTING_COMPLETE);
				N: NOP();
				N: XIC(Phase.STATE.Oneshot.Idle)MOV(0,Phase.STEP_INDEX_GOTO_ON_RESTART)OTU(Phase.STAT.OUT_TOL)OTU(Phase.PREACT.PreactOutOfLimitHigh)OTU(Phase.PREACT.PreactOutOfLimitLow);
				N: XIC(Phase.STATE.RUNNING)[EQU(Phase.STEP_INDEX,9010) ,EQU(Phase.STEP_INDEX,2010) ]OTE(Phase.STAT.ACK_REQUIRED);
		END_ROUTINE

		ROUTINE _100_Arbitration 
				N: NOP();
				N: [XIC(Phase.NEEDS.LIST[0].ACQUIRED) ,EQU(Phase.NEEDS.LIST[0].OBJECT_INDEX,0) ][XIC(Phase.NEEDS.LIST[1].ACQUIRED) ,EQU(Phase.NEEDS.LIST[1].OBJECT_INDEX,0) ][XIC(Phase.NEEDS.LIST[2].ACQUIRED) ,EQU(Phase.NEEDS.LIST[2].OBJECT_INDEX,0) ][XIC(Phase.NEEDS.LIST[3].ACQUIRED) ,EQU(Phase.NEEDS.LIST[3].OBJECT_INDEX,0) ][XIC(Phase.NEEDS.LIST[4].ACQUIRED) ,EQU(Phase.NEEDS.LIST[4].OBJECT_INDEX,0) ]OTE(Phase.NEEDS.OWNS_ALL_REQUIRED);
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.RESTARTING) ]EQU(Phase.STEP_INDEX,3000)XIC(Phase.STEP.FirstScanInStepIndex)OTL(Phase.NEEDS.StartArbitration);
				N: [XIC(Phase.STATE.IDLE) ,XIC(Phase.STATE.RUNNING) EQU(Phase.STEP_INDEX,8000) ,XIC(Phase.STATE.DONE) ,XIC(Phase.STATE.HELD) ]OTE(Phase.NEEDS.Release);
				N: [XIC(Phase.NEEDS.StartArbitration) MOV(0,Phase.NEEDS.LIST_INDEX) OTL(Phase.NEEDS.Arbitrating) OTU(Phase.NEEDS.StartArbitration) ,XIC(Phase.NEEDS.Arbitrating) XIC(Phase.NEEDS.OWNS_ALL_REQUIRED) OTU(Phase.NEEDS.Arbitrating) ];
				N: [EQU(Arb00.ARB.OWNER,Phase.ID) OTE(Phase.NEEDS.LIST[0].ACQUIRED) ,XIC(Phase.NEEDS.Arbitrating) EQU(Phase.NEEDS.LIST_INDEX,0) [XIO(Phase.NEEDS.LIST[0].REQUESTED) EQU(Arb00.ARB.RQ,0) MOV(Phase.ID,Arb00.ARB.RQ) OTL(Phase.NEEDS.LIST[0].REQUESTED) ,XIC(Phase.NEEDS.LIST[0].ACQUIRED) OTU(Phase.NEEDS.LIST[0].REQUESTED) MOV(1,Phase.NEEDS.LIST_INDEX) ] ,XIC(Phase.NEEDS.Release) EQU(Arb00.ARB.OWNER,Phase.ID) MOV(Phase.ID,Arb00.ARB.RELEASE) ,MOV(cCOMMON.AI_OBJECT_NUMBER,Phase.NEEDS.LIST[0].OBJECT_TYPE) MOV(Arb00.ID,Phase.NEEDS.LIST[0].OBJECT_INDEX) ];
				N: [EQU(Arb01.ARB.OWNER,Phase.ID) OTE(Phase.NEEDS.LIST[1].ACQUIRED) ,XIC(Phase.NEEDS.Arbitrating) EQU(Phase.NEEDS.LIST_INDEX,1) [XIO(Phase.NEEDS.LIST[1].REQUESTED) EQU(Arb01.ARB.RQ,0) MOV(Phase.ID,Arb01.ARB.RQ) OTL(Phase.NEEDS.LIST[1].REQUESTED) ,XIC(Phase.NEEDS.LIST[1].ACQUIRED) OTU(Phase.NEEDS.LIST[1].REQUESTED) MOV(2,Phase.NEEDS.LIST_INDEX) ] ,XIC(Phase.NEEDS.Release) EQU(Arb01.ARB.OWNER,Phase.ID) MOV(Phase.ID,Arb01.ARB.RELEASE) ,MOV(cCOMMON.DO_OBJECT_NUMBER,Phase.NEEDS.LIST[1].OBJECT_TYPE) MOV(Arb01.ID,Phase.NEEDS.LIST[1].OBJECT_INDEX) ];
				N: [EQU(Arb02.ARB.OWNER,Phase.ID) OTE(Phase.NEEDS.LIST[2].ACQUIRED) ,XIC(Phase.NEEDS.Arbitrating) EQU(Phase.NEEDS.LIST_INDEX,2) [XIO(Phase.NEEDS.LIST[2].REQUESTED) EQU(Arb02.ARB.RQ,0) MOV(Phase.ID,Arb02.ARB.RQ) OTL(Phase.NEEDS.LIST[2].REQUESTED) ,XIC(Phase.NEEDS.LIST[2].ACQUIRED) OTU(Phase.NEEDS.LIST[2].REQUESTED) MOV(3,Phase.NEEDS.LIST_INDEX) ] ,XIC(Phase.NEEDS.Release) EQU(Arb02.ARB.OWNER,Phase.ID) MOV(Phase.ID,Arb02.ARB.RELEASE) ,MOV(cCOMMON.AI_OBJECT_NUMBER,Phase.NEEDS.LIST[2].OBJECT_TYPE) MOV(Arb02.ID,Phase.NEEDS.LIST[2].OBJECT_INDEX) ];
				N: MOV(0,Phase.NEEDS.LIST[3].OBJECT_TYPE)MOV(0,Phase.NEEDS.LIST[3].OBJECT_INDEX);
				N: MOV(0,Phase.NEEDS.LIST[4].OBJECT_TYPE)MOV(0,Phase.NEEDS.LIST[4].OBJECT_INDEX);
		END_ROUTINE

		ROUTINE _110_ControlModule 
				N: NOP();
				N: XIC(cSETUP.SIMULATION.Enabled)XIC(cSETUP.SIMULATION.PHASE)RET();
				N: [[XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.HOLDING) ,XIC(Phase.STATE.STOPPING) ] [LIM(4000,Phase.STEP_INDEX,4100) ,XIC(AutoRunBlower) ] ,XIC(Phase.TMR[7].DN) ]OTE(AutoRunPath);
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.HOLDING) ,XIC(Phase.STATE.STOPPING) ]LIM(4100,Phase.STEP_INDEX,6010)OTE(AutoRunBlower);
				N: XIC(AutoRunBlower)TOF(Phase.TMR[7],?,?);
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.HOLDING) ,XIC(Phase.STATE.STOPPING) ]LIM(4030,Phase.STEP_INDEX,6010)OTE(AutoRunDustCollBlockValve);
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.HOLDING) ,XIC(Phase.STATE.STOPPING) ]LIM(4040,Phase.STEP_INDEX,6010)OTE(AutoRunDustCollector);
				N: XIC(Phase.STATE.RUNNING)LIM(4280,Phase.STEP_INDEX,5000)OTE(AutoRunFeederMotor);
				N: XIC(Phase.STATE.RUNNING)LIM(4280,Phase.STEP_INDEX,5000)XIC(Phase.PREACT.DRIBBLING)OTE(AutoRunDribble);
				N: XIC(Phase.STATE.RUNNING)LIM(4280,Phase.STEP_INDEX,5000)OTE(AutoRunMonitorFlowrate);
				N: [XIC(Phase.CMD.START) ,XIC(Phase.CMD.RESTART) ]OTU(Phase.ALARM[3].ACTIVE)[OTL(Feeder.CMD.RESET) OTL(BulkBagAirInlet.CMD.RESET) OTL(BlockValveInTube.CMD.RESET) OTL(Diverter1.CMD.RESET) ,OTL(BlowerMotor.CMD.RESET) OTL(ReliefValve.CMD.RESET) OTL(DustCollector.CMD.RESET) ];
		END_ROUTINE

		ROUTINE _120_PermissiveFaultAndMessaging 
				N: NOP();
				RC: "$N"
				    "";
				N: XIC(Diverter1.STAT.OFF_CLOSED)XIC(BlockValveInTube.STAT.ON_OPEN)XIC(BlockValveDustCollector.STAT.ON_OPEN)XIC(ReliefValve.STAT.OFF_CLOSED)XIC(BulkBagAirInlet.STAT.ON_OPEN)OTE(ValidPath);
				RC: "$N"
				    "";
				N: [MOV(0,Phase.MSG.PERM) ,NEQ(Arb02.ARB.OWNER,Phase.ID) MOV(13,Phase.MSG.PERM) ,NEQ(Arb01.ARB.OWNER,Phase.ID) MOV(11,Phase.MSG.PERM) ,NEQ(Arb00.ARB.OWNER,Phase.ID) MOV(12,Phase.MSG.PERM) ,XIO(Feeder.STAT.AUTO) MOV(1,Phase.MSG.PERM) ,XIO(BlowerMotor.STAT.AUTO) MOV(2,Phase.MSG.PERM) ,XIO(DustCollector.STAT.AUTO) MOV(3,Phase.MSG.PERM) ,XIO(BlockValveDustCollector.STAT.AUTO) MOV(4,Phase.MSG.PERM) ,XIO(BulkBagAirInlet.STAT.AUTO) MOV(5,Phase.MSG.PERM) ,XIO(BlockValveInTube.STAT.AUTO) MOV(6,Phase.MSG.PERM) ,XIO(Diverter1.STAT.AUTO) MOV(7,Phase.MSG.PERM) ,XIO(ReliefValve.STAT.AUTO) MOV(8,Phase.MSG.PERM) ,XIO(DischargeValve.STAT.AUTO) MOV(9,Phase.MSG.PERM) ,XIO(DehumidifierFault.STAT.PERMISSIVE) MOV(59,Phase.MSG.PERM) ,EQU(Phase.MSG.PERM,0) OTE(Phase.STAT.PERMISSIVE) ];
				RC: "$N"
				    "";
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.RESTARTING) ]EQU(Phase.MSG.FAULT,0)[XIC(EStop.STAT.FAULT) MOV(21,Phase.MSG.FAULT) ,XIC(Feeder.STAT.FAULT) MOV(22,Phase.MSG.FAULT) ,LIM(2000,Phase.STEP_INDEX,5000) XIC(BulkBagWeight.LoLo.ACTIVE) MOV(23,Phase.MSG.FAULT) ,XIC(BulkBagWeight.RATE.LoLo.ACTIVE) MOV(24,Phase.MSG.FAULT) ,XIC(BlowerPressure.STAT.FAULT) MOV(25,Phase.MSG.FAULT) ,XIC(BlowerPressure.HiHi.ACTIVE) MOV(26,Phase.MSG.FAULT) ,EQU(Phase.STEP_INDEX,5000) XIC(BlowerPressure.LoLo.ACTIVE) MOV(27,Phase.MSG.FAULT) ,XIC(AutoRunBlower) XIC(BlowerMotor.STAT.INTERLOCK) MOV(28,Phase.MSG.FAULT) ,XIC(BlowerMotor.STAT.FAULT) MOV(29,Phase.MSG.FAULT) ,XIC(AutoRunBlower) XIO(ValidPath) MOV(30,Phase.MSG.FAULT) ,XIC(DustCollector.STAT.FAULT) MOV(31,Phase.MSG.FAULT) ,XIC(DustCollectorBlockValve.STAT.FAULT) MOV(32,Phase.MSG.FAULT) ,XIC(MinorsHopperWeight.STAT.FAULT) MOV(33,Phase.MSG.FAULT) ,LIM(2000,Phase.STEP_INDEX,5000) XIC(MinorsHopperWeight.HiHi.ACTIVE) MOV(34,Phase.MSG.FAULT) ,XIC(MinorsHopperWeight.RATE.LoLo.ACTIVE) MOV(35,Phase.MSG.FAULT) ,GRT(TargetAmount,0) LES(TargetAmount,Phase.PREACT.ACTUAL) MOV(36,Phase.MSG.FAULT) ,XIC(EnableDryerRunningInterlock) XIC(DryerRunning.STAT.OFF) MOV(41,Phase.MSG.FAULT) ,XIC(ScaleHopperWeight.RATE.LoLo.ACTIVE) MOV(42,Phase.MSG.FAULT) ,XIC(Diverter1.STAT.FAULT) MOV(43,Phase.MSG.FAULT) ,XIC(BlockValveInTube.STAT.FAULT) MOV(45,Phase.MSG.FAULT) ,XIC(DischargeValve.STAT.FAULT) MOV(46,Phase.MSG.FAULT) ,XIO(DischargeValve.STAT.OFF_CLOSED) MOV(48,Phase.MSG.FAULT) ,XIC(BulkBagAirInlet.STAT.FAULT) MOV(47,Phase.MSG.FAULT) ,XIC(ReliefValve.STAT.FAULT) MOV(49,Phase.MSG.FAULT) ,XIC(cSETUP.SIMULATION.Enabled) XIC(cSETUP.SIMULATION.PHASE) MOV(0,Phase.MSG.FAULT) ];
				N: [MOV(0,Phase.MSG.MSG) ,XIC(Phase.STAT.BYPASS) XIO(Phase.STEP.RECORD) MOV(61,Phase.MSG.MSG) ,XIC(Phase.STAT.BYPASS) XIC(Phase.STEP.RECORD) MOV(62,Phase.MSG.MSG) ,XIC(Phase.STATE.HELD) XIO(Phase.STAT.FAULTED) MOV(63,Phase.MSG.MSG) ];
				N: MakeMessageNumberGloballyUnique(AOI.Message,Phase.ID,Phase.MSG);
				N: [LIM(2000,Phase.STEP_INDEX,3000) NEQ(Phase.MSG.PERM,0) MOV(Phase.MSG.PERM,Phase.MSG.MSG) ,GEQ(Phase.STEP_INDEX,3000) NEQ(Phase.MSG.FAULT,0) MOV(Phase.MSG.FAULT,Phase.MSG.MSG) ,EQU(Phase.MSG.FAULT,0) EQU(Phase.MSG.PERM,0) ONS(Phase.MSG.OS.1) CLR(Phase.MSG.MSG) ];
		END_ROUTINE

		ROUTINE _130_Alarming 
				N: NOP();
				N: [XIC(Phase.STAT.FAULTED) OTE(Phase.ALARM[0].ACTIVE) ,AlarmControl(AOI.AlarmControl[0],Phase.ALARM[0],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
				N: [XIC(Phase.STAT.OUT_TOL) OTE(Phase.ALARM[1].ACTIVE) ,AlarmControl(AOI.AlarmControl[1],Phase.ALARM[1],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM
