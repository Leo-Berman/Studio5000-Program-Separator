	PROGRAM Mixer01_AddChillWater (Description := "$NProgram=$'PH$'$NClass=$'LIQUID.SYSTEM.TO.MIXER:02.01.01$'$N",
	                               MAIN := "_000_Main",
	                               MODE := 0,
	                               DisableFlag := 0,
	                               UseAsFolder := 0)
		TAG
			ActualAmount OF Phase.ACTUAL[1] (RADIX := Float);
			ActualAmountAccumulator OF Phase.ACTUAL[0] (RADIX := Float);
			ActualAmountAdjustment OF Phase.ACTUAL[3] (RADIX := Float);
			ActualAmountError OF Phase.ACTUAL[2] (RADIX := Float);
			AOI : CB_PHASE_AOI  := [[3],[3,10180000],[3,[0,1018]],[3],[0,0.00000000e+000],[3],[3,0.00000000e+000,0.00000000e+000],[3],[3,1018,101800,101799
					],[[3],[3],[1],[1],[1],[1],[1],[1]],[3,16,15,15],[1,[[1,0,0],[[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],0,0]],0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,[1,0.00000000e+000,0.00000000e+000],0.00000000e+000
					],[1,0.00000000e+000,0.00000000e+000]];
			Arb00 OF cDO[456] ;
			AutoRunInletValve OF Phase.CM.AutoRun[8] (RADIX := Decimal);
			AutoRunMonitorFlowrate OF Phase.CM.AutoRun[20] (RADIX := Decimal);
			AutoRunPath OF Phase.CM.AutoRun[1] (RADIX := Decimal);
			AutoRunResetFlowMeter OF Phase.CM.AutoRun[2] (RADIX := Decimal);
			Calibrate : CB_AI_CALIBRATE  := [0.00000000e+000,0,0.00000000e+000,0.00000000e+000,0];
			CalibrateCurrentScaleFactor : REAL (RADIX := Float) := 0.00000000e+000;
			CalibrateEnabled : BOOL (RADIX := Decimal) := 0;
			CompressedAirHeader OF cDO[430] ;
			CompressedAirToMixer OF cDO[456] ;
			EStop OF cDI[5] ;
			FlowMeter OF cAI[196] ;
			FlowResetDelayLimit : REAL (RADIX := Float) := 3.00000000e+000;
			FlowResetLimit : REAL (RADIX := Float) := 2.50000000e-001;
			InletTemperature OF cAI[195] ;
			InletValve OF cDO[457] ;
			MixerClosed OF cDI[330] ;
			MixerCommOk OF cDI[331] ;
			MixerInterlocked OF cDI[328] ;
			MixerRemote OF cDI[327] ;
			OIT : CB_OIT  := [[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],0,0,[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],0,0,0,37575781,0,0,[0,0,0,0,0,0,0,0,0,0],[0,0,0,0],0,[0,[0,0,0]],[0,[0,0,0]],0,0,0];
			Phase OF cPHZ[18] (Usage := Public);
			PhaseClass OF cPHZ_CLASS[3] (Usage := Public);
			TargetAmount OF Phase.SPT[0] (RADIX := Float);
			TargetAmountAdjustmentLimit OF Phase.SPT[3] (RADIX := Float);
			TargetAmountSetpoint OF Phase.SPT[1] (RADIX := Float);
			TargetAmountTolerance OF Phase.SPT[2] (RADIX := Float);
			TargetFlowTotalResetTimeout : REAL (RADIX := Float) := 4.00000000e+000;
			Unit OF cUNIT[47] ;
			ValidPath OF Phase.USER.STAT.1 (RADIX := Decimal);
		END_TAG

		ROUTINE _000_FirstScan 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'LIQUID.SYSTEM.TO.MIXER:02.01.01$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.TYPE$'$N"
				    "Function=$'TYPE$'$N"
				    "";
				N: MOV(3,PhaseClass.TYPE);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.INDEX.SETTING$'$N"
				    "Function=$'INDEX.SETTING$'$N"
				    "";
				N: MOV(Unit.ARRAY_INDEX,Phase.INDEX)MOV(PhaseClass.TYPE,Phase.TYPE)MOV(PhaseClass.ID,Phase.CLASS)COP(PhaseClass.NAME,Phase.CLASS_NAME,1)COP(PhaseClass.TYPE_NAME,Phase.TYPE_NAME,1);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.DISPLAY.MASK.SETTING$'$N"
				    "Function=$'DISPLAY.MASK.SETTING$'$N"
				    "";
				N: NOP();
				RC: "Template=$'PHASE.PHASE.MATERIAL.TANK.SYSTEM.TO.MIXER$'$N"
				    "Function=$'SETTING.MASK.PREACT$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: OTL(PhaseClass.DISPLAY_MASK.PREACT);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.CLASS.PARAMETERS$'$N"
				    "Function=$'CLASS.PARAMETERS$'$N"
				    "";
				N: PhaseClassParameter(AOI.PhaseClassParameter,PhaseClass,Phase.USER,Phase.DISPLAY_MASK,Phase.TYPE_MASK);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.SECTION.FIRSTSCAN.SETTING$'$N"
				    "Function=$'STANDARD.PHASE.SECTION.FIRSTSCAN.SETTING$'$N"
				    "";
				N: PhaseClassParameter(AOI.PhaseClassParameter,PhaseClass,Phase.USER,Phase.DISPLAY_MASK,Phase.TYPE_MASK);
		END_ROUTINE

		ROUTINE _000_Main 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'LIQUID.SYSTEM.TO.MIXER:02.01.01$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.FIRSTSCAN$'$N"
				    "Function=$'EXECUTE.FIRSTSCAN$'$N"
				    "";
				N: XIC(S:FS)JSR(_000_FirstScan,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.WATCHWINDOW.STATE$'$N"
				    "Function=$'WATCHWINDOW.PHASE.STATE$'$N"
				    "";
				N: XIC(Phase.STATE.IDLE)XIC(Phase.STATE.RUNNING)XIC(Phase.STATE.HELD)XIC(Phase.STATE.COMPLETE)XIC(Phase.STATE.ABORTED)XIC(Phase.STATE.STOPPED)NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.WATCHWINDOW.STATE.TRANSITION$'$N"
				    "Function=$'WATCHWINDOW.PHASE.STATE.TRANSITION$'$N"
				    "";
				N: XIC(Phase.STATE.HOLDING)XIC(Phase.STATE.RESTARTING)XIC(Phase.STATE.ABORTING)XIC(Phase.STATE.STOPPING)NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.WATCHWINDOW.CONTROL$'$N"
				    "Function=$'WATCHWINDOW.PHASE.CONTROL$'$N"
				    "";
				N: [XIC(Phase.CMD.START) XIC(Phase.CMD.HOLD) XIC(Phase.CMD.RESTART) XIC(Phase.CMD.STOP) XIC(Phase.CMD.ABORT) XIC(Phase.CMD.RESET) ,MOV(Phase.STATE_NO,Phase.STATE_NO) MOV(Phase.STEP_INDEX,Phase.STEP_INDEX) MOV(Phase.MSG.FAULT,Phase.MSG.FAULT) ]NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.PERMISSIVES.FAULTS.MESSAGING$'$N"
				    "Function=$'EXECUTE.PERMISSIVES.FAULTS.MESSAGING$'$N"
				    "";
				N: JSR(_120_PermissiveFaultAndMessaging,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.AOI$'$N"
				    "Function=$'AOI$'$N"
				    "";
				N: PhaseMode(AOI.Mode,Phase,cPHZ[0].MSG)PhaseCommon(AOI.Common,Phase)PhaseStepIndex(AOI.StepIndex,Phase)PhaseStateTransition(AOI.StateTransition,Phase.CMD,Phase.STAT,Phase.STATE,Phase.STATE_NO);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.STEPCONTROL$'$N"
				    "Function=$'EXECUTE.STEPCONTROL$'$N"
				    "";
				N: JSR(_050_StepControl,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.CONTROLMODULE$'$N"
				    "Function=$'EXECUTE.CONTROLMODULE$'$N"
				    "";
				N: JSR(_110_ControlModule,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.ALARMING$'$N"
				    "Function=$'EXECUTE.ALARMING$'$N"
				    "";
				N: JSR(_130_Alarming,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.STEP.MAPPING$'$N"
				    "Function=$'STEP.MAPPING$'$N"
				    "";
				N: PhaseStepMapping(AOI.StepMapping,Phase);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.BYPASS$'$N"
				    "Function=$'BYPASS$'$N"
				    "";
				N: PhaseBypass(AOI.Bypass,Phase);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.ARBITRATION$'$N"
				    "Function=$'EXECUTE.ARBITRATION$'$N"
				    "";
				N: JSR(_100_Arbitration,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.MAIN.EXTENDED.FUNCTION$'$N"
				    "Function=$'EXTENDED.FUNCTION$'$N"
				    "";
				N: NOP();
		END_ROUTINE

		ROUTINE _050_StepControl 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'LIQUID.SYSTEM.TO.MIXER:02.01.01$'$N"
				    "";
				N: NOP();
				N: XIC(cSETUP.SIMULATION.Enabled)XIC(cSETUP.SIMULATION.PHASE)RET();
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,1)MOV(2000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,2000)[GEQ(Phase.STEP_TMR.CurrentStepIndex.ACC,Phase.STEP_TMR.RECORD.PRE) MOV(3000,Phase.STEP_INDEX_GOTO) ,FLL(0,Phase.ACTUAL[0],3) FLL(0,Phase.ACTUAL[4],3) ];
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,3000)XIC(Phase.STAT.PERMISSIVE)MOV(4000,Phase.STEP_INDEX_GOTO);
				N: NOP();
				RC: "Reset flow meter$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4000)[LES(FlowMeter.SCALED,FlowResetLimit) GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,FlowResetDelayLimit) MOV(4010,Phase.STEP_INDEX_GOTO) ,LES(TargetFlowTotalResetTimeout,2) MOV(2,TargetFlowTotalResetTimeout) ,SUB(TargetFlowTotalResetTimeout,1,FlowResetDelayLimit) ,MOV(ActualAmount,ActualAmountAccumulator) ];
				RC: "Wait for valid path$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4010)XIC(ValidPath)MOV(4100,Phase.STEP_INDEX_GOTO);
				RC: "Confirm valve open$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4100)XIC(InletValve.STAT.ON_OPEN)MOV(5000,Phase.STEP_INDEX_GOTO);
				N: NOP();
				RC: "Process Amount Parameter$N"
				    "";
				N: PhaseTargetAdjustLimit(AOI.TargetAdjustLimit,TargetAmountAdjustmentLimit,ActualAmountAdjustment,TargetAmount,TargetAmountSetpoint,Phase.STAT.MAN);
				N: NOP();
				RC: "Calculate phase actuall$N"
				    "";
				N: XIC(Phase.STAT.ACTIVE_ONCE)[XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.HOLDING) ,XIC(Phase.STATE.STOPPING) ]LIM(4200,Phase.STEP_INDEX,6000)ADD(FlowMeter.SCALED,ActualAmountAccumulator,ActualAmount)SUB(ActualAmount,TargetAmount,ActualAmountError);
				RC: "Dribble mode$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)LIM(5000,Phase.STEP_INDEX,5999)CMP(ActualAmount >  TargetAmount - (Phase.PREACT.ACTUAL + Phase.PREACT.DRIBBLE))OTE(Phase.PREACT.DRIBBLING);
				RC: "Delivery complete$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,5000)CMP(ActualAmount >  TargetAmount - Phase.PREACT.ACTUAL)MOV(6000,Phase.STEP_INDEX_GOTO);
				RC: "Settle$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,6000)GEQ(Phase.STEP_TMR.CurrentStepIndex.ACC,Phase.STEP_TMR.SETTLE.PRE)MOV(6010,Phase.STEP_INDEX_GOTO);
				RC: "make this phase consistent with other liquids, goto 6020 for air blow$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,6010)MOV(6020,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,6020)GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,Phase.USER.SETTINGS[3])MOV(7000,Phase.STEP_INDEX_GOTO);
				RC: "Calculate preact$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,7000)XIC(Phase.STEP.FirstScanInStepIndex)[XIO(CalibrateEnabled) PhaseCalculatePreact(AOI.CalculatePreact,Phase.PREACT,ActualAmountError) ,MOV(8000,Phase.STEP_INDEX_GOTO) ];
				RC: "NOP$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,8000)MOV(9000,Phase.STEP_INDEX_GOTO);
				RC: "check tol$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,9000)[GRT(TargetAmountTolerance,0) CMP(ABS(ActualAmountError)> TargetAmountTolerance) OTL(Phase.STAT.OUT_TOL) ,XIO(Phase.STAT.OUT_TOL) MOV(10000,Phase.STEP_INDEX_GOTO) ,XIC(Phase.STAT.OUT_TOL) OTL(Phase.STAT.ACK_REQUIRED) MOV(9010,Phase.STEP_INDEX_GOTO) ];
				RC: "Ack out of tol$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,9010)[XIC(Phase.CMD.ACK) ,XIC(Phase.CMD.ACK_OUT_TOL) ]OTU(Phase.STAT.OUT_TOL)OTU(Phase.STAT.ACK_REQUIRED)MOV(10000,Phase.STEP_INDEX_GOTO);
				RC: "Complete$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,10000)OTE(Phase.STAT.RUNNING_COMPLETE);
				RC: "HOLDING$N"
				    "";
				N: NOP();
				RC: "this makes step 2000 only happen once per phase$N"
				    "";
				N: XIC(Phase.STATE.HOLDING)EQU(Phase.STEP_INDEX,2000)[GEQ(Phase.STEP_TMR.CurrentStepIndex.ACC,Phase.STEP_TMR.RECORD.PRE) MOV(3000,Phase.STEP_INDEX_GOTO) ,FLL(0,Phase.ACTUAL[0],5) ];
				RC: "holding complete$N"
				    "";
				N: XIC(Phase.STATE.HOLDING)[XIC(Phase.STEP_TMR.HOLDING.DN) OTE(Phase.STAT.HOLDING_COMPLETE) ,TON(Phase.STEP_TMR.HOLDING,?,?) ];
				RC: "RESTARTING$N"
				    "";
				N: NOP();
				N: XIC(Phase.STATE.Oneshot.Restarting)[LES(Phase.STEP_INDEX,5999) MOV(3000,Phase.STEP_INDEX_GOTO) ,LIM(6000,Phase.STEP_INDEX,6999) MOV(7000,Phase.STEP_INDEX_GOTO) ];
				N: NOP();
				N: XIC(Phase.STATE.RESTARTING)[XIC(Phase.STEP_TMR.RESTARTING.DN) OTE(Phase.STAT.RESTARTING_COMPLETE) ,TON(Phase.STEP_TMR.RESTARTING,?,?) ];
				RC: "STOPPING$N"
				    "";
				N: NOP();
				N: XIC(Phase.STATE.STOPPING)LES(Phase.STEP_INDEX,6000)MOV(6000,Phase.STEP_INDEX_GOTO);
				RC: "Settle$N"
				    "";
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,6000)GEQ(Phase.STEP_TMR.CurrentStepIndex.ACC,Phase.STEP_TMR.SETTLE.PRE)MOV(6010,Phase.STEP_INDEX_GOTO);
				RC: "make this phase consistent with other liquids, goto 6020 for air blow$N"
				    "";
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,6010)MOV(6020,Phase.STEP_INDEX_GOTO);
				RC: "Air Blow$N"
				    "";
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,6020)GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,Phase.USER.SETTINGS[3])MOV(7000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,7000)MOV(8000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)LIM(8000,Phase.STEP_INDEX,8999)MOV(9000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.STOPPING)LIM(9000,Phase.STEP_INDEX,9999)MOV(10000,Phase.STEP_INDEX_GOTO);
				N: NOP();
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,10000)OTE(Phase.STAT.STOPPING_COMPLETE);
				RC: "ABORTING$N"
				    "";
				N: NOP();
				N: XIC(Phase.STATE.Oneshot.Aborting)MOV(10000,Phase.STEP_INDEX_GOTO);
				N: NOP();
				N: XIC(Phase.STATE.ABORTING)EQU(Phase.STEP_INDEX,10000)OTE(Phase.STAT.ABORTING_COMPLETE);
				N: NOP();
				N: XIC(Phase.STATE.Oneshot.Idle)MOV(0,Phase.STEP_INDEX_GOTO_ON_RESTART)OTU(Phase.STAT.OUT_TOL)OTU(Phase.STAT.ACK_REQUIRED)OTU(Phase.PREACT.PreactOutOfLimitHigh)OTU(Phase.PREACT.PreactOutOfLimitLow);
		END_ROUTINE

		ROUTINE _100_Arbitration 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'LIQUID.SYSTEM.TO.MIXER:02.01.01$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.ARBITRATION.STATUS$'$N"
				    "Function=$'ARBITRATION.STATUS$'$N"
				    "";
				N: [XIC(Phase.NEEDS.LIST[0].ACQUIRED) ,EQU(Phase.NEEDS.LIST[0].OBJECT_INDEX,0) ][XIC(Phase.NEEDS.LIST[1].ACQUIRED) ,EQU(Phase.NEEDS.LIST[1].OBJECT_INDEX,0) ][XIC(Phase.NEEDS.LIST[2].ACQUIRED) ,EQU(Phase.NEEDS.LIST[2].OBJECT_INDEX,0) ][XIC(Phase.NEEDS.LIST[3].ACQUIRED) ,EQU(Phase.NEEDS.LIST[3].OBJECT_INDEX,0) ][XIC(Phase.NEEDS.LIST[4].ACQUIRED) ,EQU(Phase.NEEDS.LIST[4].OBJECT_INDEX,0) ]OTE(Phase.NEEDS.OWNS_ALL_REQUIRED);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.ARBITRATION.START$'$N"
				    "Function=$'ARBITRATION.START$'$N"
				    "";
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.RESTARTING) ]EQU(Phase.STEP_INDEX,3000)XIC(Phase.STEP.FirstScanInStepIndex)OTL(Phase.NEEDS.StartArbitration);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.ARBITRATION.RELEASE$'$N"
				    "Function=$'ARBITRATION.RELEASE$'$N"
				    "";
				N: [XIC(Phase.STATE.IDLE) ,XIC(Phase.STATE.RUNNING) EQU(Phase.STEP_INDEX,8000) ,XIC(Phase.STATE.DONE) ,XIC(Phase.STATE.HELD) ]OTE(Phase.NEEDS.Release);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.ARBITRATION.INITIALIZE$'$N"
				    "Function=$'ARBITRATION.INITIALIZE$'$N"
				    "";
				N: [XIC(Phase.NEEDS.StartArbitration) MOV(0,Phase.NEEDS.LIST_INDEX) OTL(Phase.NEEDS.Arbitrating) OTU(Phase.NEEDS.StartArbitration) ,XIC(Phase.NEEDS.Arbitrating) XIC(Phase.NEEDS.OWNS_ALL_REQUIRED) OTU(Phase.NEEDS.Arbitrating) ];
				RC: "Template=$'PHASE.TANK.TO.MIXER:01.01.01$'$N"
				    "Function=$'ARBITRATION.00$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: [EQU(Arb00.ARB.OWNER,Phase.ID) OTE(Phase.NEEDS.LIST[0].ACQUIRED) ,XIC(Phase.NEEDS.Arbitrating) EQU(Phase.NEEDS.LIST_INDEX,0) [XIO(Phase.NEEDS.LIST[0].REQUESTED) EQU(Arb00.ARB.RQ,0) MOV(Phase.ID,Arb00.ARB.RQ) OTL(Phase.NEEDS.LIST[0].REQUESTED) ,XIC(Phase.NEEDS.LIST[0].ACQUIRED) OTU(Phase.NEEDS.LIST[0].REQUESTED) MOV(1,Phase.NEEDS.LIST_INDEX) ] ,XIC(Phase.NEEDS.Release) EQU(Arb00.ARB.OWNER,Phase.ID) MOV(Phase.ID,Arb00.ARB.RELEASE) ,MOV(cCOMMON.AI_OBJECT_NUMBER,Phase.NEEDS.LIST[0].OBJECT_TYPE) MOV(Arb00.ID,Phase.NEEDS.LIST[0].OBJECT_INDEX) ];
				N: MOV(0,Phase.NEEDS.LIST[1].OBJECT_TYPE)MOV(0,Phase.NEEDS.LIST[1].OBJECT_INDEX);
				N: MOV(0,Phase.NEEDS.LIST[2].OBJECT_TYPE)MOV(0,Phase.NEEDS.LIST[2].OBJECT_INDEX);
				N: MOV(0,Phase.NEEDS.LIST[3].OBJECT_TYPE)MOV(0,Phase.NEEDS.LIST[3].OBJECT_INDEX);
				N: MOV(0,Phase.NEEDS.LIST[4].OBJECT_TYPE)MOV(0,Phase.NEEDS.LIST[4].OBJECT_INDEX);
		END_ROUTINE

		ROUTINE _110_ControlModule 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'LIQUID.SYSTEM.TO.MIXER:02.01.01$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.SIMULATE.RETURN$'$N"
				    "Function=$'SIMULATE.RETURN$'$N"
				    "";
				N: XIC(cSETUP.SIMULATION.Enabled)XIC(cSETUP.SIMULATION.PHASE)RET();
				RC: "Template=$'PHASE.PHASE.MATERIAL.TANK.SYSTEM.TO.MIXER$'$N"
				    "Function=$'RUNG.CONTROLMODULE.AUTORUN.RESET.FLOWMETER$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4000)OTE(AutoRunResetFlowMeter);
				RC: "Template=$'PHASE.PHASE.MATERIAL.TANK.SYSTEM.TO.MIXER$'$N"
				    "Function=$'RUNG.CONTROLMODULE.AUTORUN.VALID.PATH$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.HOLDING) ,XIC(Phase.STATE.STOPPING) ]LIM(4010,Phase.STEP_INDEX,6010)OTE(AutoRunPath);
				RC: "Template=$'PHASE.PHASE.MATERIAL.TANK.SYSTEM.TO.MIXER$'$N"
				    "Function=$'RUNG.CONTROLMODULE.AUTORUN.INLET.VALVE$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)LIM(4100,Phase.STEP_INDEX,5000)OTE(AutoRunInletValve);
				RC: "AutoRun the Compressed Air Valves to Blow Down the lines$N"
				    "";
				N: XIC(Phase.STAT.AUTO)[XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.STOPPING) ]EQU(Phase.STEP_INDEX,6020)OTE(Phase.CM.AutoRun[11]);
				RC: "Template=$'PHASE.PHASE.MATERIAL.TANK.SYSTEM.TO.MIXER$'$N"
				    "Function=$'RUNG.CONTROLMODULE.AUTORUN.FLOWRATE$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)LIM(4100,Phase.STEP_INDEX,5000)OTE(AutoRunMonitorFlowrate);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.CONTROLMODULE.RESET.CM$'$N"
				    "Function=$'CONTROLMODULE.RESET.CM$'$N"
				    "";
				N: [XIC(Phase.CMD.START) ,XIC(Phase.CMD.RESTART) ]NOP();
		END_ROUTINE

		ROUTINE _120_PermissiveFaultAndMessaging 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'LIQUID.SYSTEM.TO.MIXER:02.01.01$'$N"
				    "";
				N: NOP();
				RC: "$N"
				    "";
				N: OTE(ValidPath);
				RC: "$N"
				    "";
				N: [MOV(0,Phase.MSG.PERM) ,XIO(InletValve.STAT.AUTO) MOV(1,Phase.MSG.PERM) ,XIC(Phase.STAT.AUTO) XIO(MixerClosed.STAT.ON) MOV(2,Phase.MSG.PERM) ,NEQ(Arb00.ARB.OWNER,Phase.ID) MOV(13,Phase.MSG.PERM) ,XIO(CompressedAirHeader.STAT.AUTO) MOV(14,Phase.MSG.PERM) ,XIO(CompressedAirToMixer.STAT.AUTO) MOV(15,Phase.MSG.PERM) ,EQU(Phase.MSG.PERM,0) OTE(Phase.STAT.PERMISSIVE) ];
				RC: "$N"
				    "";
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.RESTARTING) ]EQU(Phase.MSG.FAULT,0)[XIC(EStop.STAT.FAULT) MOV(21,Phase.MSG.FAULT) ,XIC(InletValve.STAT.FAULT) MOV(22,Phase.MSG.FAULT) ,XIC(FlowMeter.STAT.FAULT) MOV(23,Phase.MSG.FAULT) ,EQU(Phase.STEP_INDEX,5000) XIC(FlowMeter.RATE.LoLo.ACTIVE) MOV(24,Phase.MSG.FAULT) ,LES(TargetAmount,Phase.PREACT.ACTUAL) MOV(25,Phase.MSG.FAULT) ,EQU(Phase.STEP_INDEX,4000) GEQ(Phase.STEP_TMR.CurrentStepIndexSeconds,TargetFlowTotalResetTimeout) MOV(26,Phase.MSG.FAULT) ,XIC(Phase.STAT.AUTO) [XIC(Phase.STEP.INITIALIZE) ,XIC(Phase.STEP.ACTIVE) ] XIO(MixerClosed.STAT.ON) MOV(27,Phase.MSG.FAULT) ,XIC(Phase.STAT.AUTO) XIO(MixerRemote.STAT.ON) MOV(28,Phase.MSG.FAULT) ,XIC(Phase.STAT.AUTO) XIO(MixerCommOk.STAT.ON) MOV(29,Phase.MSG.FAULT) ,XIC(Phase.STAT.AUTO) XIC(MixerInterlocked.STAT.ON) MOV(30,Phase.MSG.FAULT) ,XIC(CompressedAirHeader.STAT.FAULT) MOV(32,Phase.MSG.FAULT) ,XIC(CompressedAirToMixer.STAT.FAULT) MOV(33,Phase.MSG.FAULT) ,XIC(cSETUP.SIMULATION.Enabled) XIC(cSETUP.SIMULATION.PHASE) MOV(0,Phase.MSG.FAULT) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.MESSAGE$'$N"
				    "Function=$'STATUS.MESSAGE$'$N"
				    "";
				N: [MOV(0,Phase.MSG.MSG) ,XIC(Phase.STAT.BYPASS) XIO(Phase.STEP.RECORD) MOV(61,Phase.MSG.MSG) ,XIC(Phase.STAT.BYPASS) XIC(Phase.STEP.RECORD) MOV(62,Phase.MSG.MSG) ,XIC(Phase.STATE.HELD) XIO(Phase.STAT.FAULTED) MOV(63,Phase.MSG.MSG) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.MESSAGE.UNIQUE$'$N"
				    "Function=$'STATUS.MESSAGE.UNIQUE$'$N"
				    "";
				N: MakeMessageNumberGloballyUnique(AOI.Message,Phase.ID,Phase.MSG);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.MESSAGE.STATUS$'$N"
				    "Function=$'MESSAGE$'$N"
				    "";
				N: [LIM(2000,Phase.STEP_INDEX,3000) NEQ(Phase.MSG.PERM,0) MOV(Phase.MSG.PERM,Phase.MSG.MSG) ,GEQ(Phase.STEP_INDEX,3000) NEQ(Phase.MSG.FAULT,0) MOV(Phase.MSG.FAULT,Phase.MSG.MSG) ,EQU(Phase.MSG.FAULT,0) EQU(Phase.MSG.PERM,0) ONS(Phase.MSG.OS.1) CLR(Phase.MSG.MSG) ];
		END_ROUTINE

		ROUTINE _130_Alarming 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'LIQUID.SYSTEM.TO.MIXER:02.01.01$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.ALARM.FAULT$'$N"
				    "Function=$'ALARM.FAULT$'$N"
				    "";
				N: [XIC(Phase.STAT.FAULTED) OTE(Phase.ALARM[0].ACTIVE) ,AlarmControl(AOI.AlarmControl[0],Phase.ALARM[0],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
				N: [XIC(Phase.STAT.OUT_TOL) OTE(Phase.ALARM[1].ACTIVE) ,AlarmControl(AOI.AlarmControl[1],Phase.ALARM[1],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM
