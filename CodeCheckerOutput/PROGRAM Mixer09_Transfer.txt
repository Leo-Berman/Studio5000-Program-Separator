	PROGRAM Mixer09_Transfer (Description := "$NProgram=$'PH$'$NClass=$'MIXER.DISCHARGE:01.01.01$'$N",
	                          MAIN := "_000_Main",
	                          MODE := 0,
	                          DisableFlag := 0,
	                          UseAsFolder := 0)
		TAG
			ActualTime OF Phase.ACTUAL[1] (RADIX := Float);
			ActualTimeAdjustment OF Phase.ACTUAL[3] (RADIX := Float);
			ActualTimer OF Phase.STEP_TMR.ACTIVE ;
			AOI : CB_PHASE_AOI  := [[3],[3,10780000],[3,[0,1015]],[3],[1,0.00000000e+000],[3],[1,0.00000000e+000,0.00000000e+000],[3],[3,1078,107800,107799
					],[[3],[1],[1],[1],[1],[1],[1],[1]],[3,16,15,15],[1,[[1,0,0],[[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000
					,0.00000000e+000,0],[0.00000000e+000,0.00000000e+000,0.00000000e+000,0.00000000e+000,0],0,0]],0.00000000e+000
					,0.00000000e+000,0.00000000e+000,0.00000000e+000,[1,0.00000000e+000,0.00000000e+000],0.00000000e+000
					],[1,0.00000000e+000,0.00000000e+000]];
			AutoRunMixerLow OF Phase.CM.AutoRun[11] (RADIX := Decimal);
			AutoRunTransferReady OF Phase.CM.AutoRun[1] (RADIX := Decimal);
			AutoRunTransferReady_IO OF Interface.FromBatch[10].0 (RADIX := Decimal);
			AutoRunWarning OF Phase.CM.AutoRun[12] (RADIX := Decimal);
			DischargeReady OF cDI[365] ;
			EStop OF cDI[5] ;
			Interface OF eInterfaceMixer[9] ;
			MixerAutoSequenceStep OF Phase.USER.IPAR[0] (RADIX := Decimal);
			MixerClosed OF cDI[363] ;
			MixerCommOk OF cDI[364] ;
			MixerDischarging OF cDI[365] ;
			MixerFullAutoSequenceStep OF Phase.USER.IPAR[0] (RADIX := Decimal);
			MixerInterlocked OF cDI[361] ;
			MixerMotor OF cDO[574] ;
			MixerOpened OF cDI[362] ;
			MixerRemote OF cDI[360] ;
			MixerTemperature OF cAI[234] ;
			OIT : CB_OIT  := [[0,'$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00$00'
					],0,0,[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],[0,0,0,0,0,0,0],[0,0,0,0,0,0,0],0,0,0,26601377,0,0,[0,0,0,0,0,0,0,0,0,0],[0,0,0,0],0,[0,[0,0,0]],[0,[0,0,0]],0,0,0];
			Phase OF cPHZ[78] (COMMENT.SPT[0] := "Target",
			            COMMENT.SPT[1] := "Setpoint",
			            COMMENT.SPT[2] := "Tolerance",
			            COMMENT.SPT[3] := "Adjustment Limit",
			            COMMENT.ACTUAL[1] := "Actual",
			            COMMENT.ACTUAL[2] := "Error",
			            COMMENT.ACTUAL[3] := "Adjustment",
			            Usage := Public);
			PhaseClass OF cPHZ_CLASS[5] (Usage := Public);
			TargetTime OF Phase.SPT[0] (RADIX := Float);
			TargetTimeAdjustmentLimit OF Phase.SPT[3] (RADIX := Float);
			TargetTimeSetpoint OF Phase.SPT[1] (RADIX := Float);
			TransferComplete OF cDI[368] ;
			TransferComplete_IO OF Interface.ToBatch[10].1 (RADIX := Decimal);
			TransferReady OF cDI[365] ;
			TransferRunning OF cDI[367] ;
			Unit OF cUNIT[58] ;
			WaitingForDown OF Phase.TMR[0] ;
			WaitingForUp OF Phase.TMR[1] ;
		END_TAG

		ROUTINE _000_FirstScan 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'MIXER.DISCHARGE:01.01.01$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.TYPE$'$N"
				    "Function=$'TYPE$'$N"
				    "";
				N: MOV(5,PhaseClass.TYPE);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.INDEX.SETTING$'$N"
				    "Function=$'INDEX.SETTING$'$N"
				    "";
				N: MOV(Unit.ARRAY_INDEX,Phase.INDEX)MOV(PhaseClass.TYPE,Phase.TYPE)MOV(PhaseClass.ID,Phase.CLASS)COP(PhaseClass.NAME,Phase.CLASS_NAME,1)COP(PhaseClass.TYPE_NAME,Phase.TYPE_NAME,1);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.DISPLAY.MASK.SETTING$'$N"
				    "Function=$'DISPLAY.MASK.SETTING$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.CLASS.PARAMETERS$'$N"
				    "Function=$'CLASS.PARAMETERS$'$N"
				    "";
				N: PhaseClassParameter(AOI.PhaseClassParameter,PhaseClass,Phase.USER,Phase.DISPLAY_MASK,Phase.TYPE_MASK);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.SECTION.FIRSTSCAN.SETTING$'$N"
				    "Function=$'STANDARD.PHASE.SECTION.FIRSTSCAN.SETTING$'$N"
				    "";
				N: PhaseClassParameter(AOI.PhaseClassParameter,PhaseClass,Phase.USER,Phase.DISPLAY_MASK,Phase.TYPE_MASK);
		END_ROUTINE

		ROUTINE _000_Main 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'MIXER.DISCHARGE:01.01.01$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.FIRSTSCAN$'$N"
				    "Function=$'EXECUTE.FIRSTSCAN$'$N"
				    "";
				N: XIC(S:FS)JSR(_000_FirstScan,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.WATCHWINDOW.STATE$'$N"
				    "Function=$'WATCHWINDOW.PHASE.STATE$'$N"
				    "";
				N: XIC(Phase.STATE.IDLE)XIC(Phase.STATE.RUNNING)XIC(Phase.STATE.HELD)XIC(Phase.STATE.COMPLETE)XIC(Phase.STATE.ABORTED)XIC(Phase.STATE.STOPPED)NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.WATCHWINDOW.STATE.TRANSITION$'$N"
				    "Function=$'WATCHWINDOW.PHASE.STATE.TRANSITION$'$N"
				    "";
				N: XIC(Phase.STATE.HOLDING)XIC(Phase.STATE.RESTARTING)XIC(Phase.STATE.ABORTING)XIC(Phase.STATE.STOPPING)NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.WATCHWINDOW.CONTROL$'$N"
				    "Function=$'WATCHWINDOW.PHASE.CONTROL$'$N"
				    "";
				N: [XIC(Phase.CMD.START) XIC(Phase.CMD.HOLD) XIC(Phase.CMD.RESTART) XIC(Phase.CMD.STOP) XIC(Phase.CMD.ABORT) XIC(Phase.CMD.RESET) ,MOV(Phase.STATE_NO,Phase.STATE_NO) MOV(Phase.STEP_INDEX,Phase.STEP_INDEX) MOV(Phase.MSG.FAULT,Phase.MSG.FAULT) ]NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.PERMISSIVES.FAULTS.MESSAGING$'$N"
				    "Function=$'EXECUTE.PERMISSIVES.FAULTS.MESSAGING$'$N"
				    "";
				N: JSR(_120_PermissiveFaultAndMessaging,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.AOI$'$N"
				    "Function=$'AOI$'$N"
				    "";
				N: PhaseMode(AOI.Mode,Phase,cPHZ[0].MSG)PhaseCommon(AOI.Common,Phase)PhaseStepIndex(AOI.StepIndex,Phase)PhaseStateTransition(AOI.StateTransition,Phase.CMD,Phase.STAT,Phase.STATE,Phase.STATE_NO);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.STEPCONTROL$'$N"
				    "Function=$'EXECUTE.STEPCONTROL$'$N"
				    "";
				N: JSR(_050_StepControl,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.CONTROLMODULE$'$N"
				    "Function=$'EXECUTE.CONTROLMODULE$'$N"
				    "";
				N: JSR(_110_ControlModule,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.EXECUTE.ALARMING$'$N"
				    "Function=$'EXECUTE.ALARMING$'$N"
				    "";
				N: JSR(_130_Alarming,0);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.STEP.MAPPING$'$N"
				    "Function=$'STEP.MAPPING$'$N"
				    "";
				N: PhaseStepMapping(AOI.StepMapping,Phase);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.BYPASS$'$N"
				    "Function=$'BYPASS$'$N"
				    "";
				N: PhaseBypass(AOI.Bypass,Phase);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.MAIN.EXTENDED.FUNCTION$'$N"
				    "Function=$'EXTENDED.FUNCTION$'$N"
				    "";
				N: NOP();
		END_ROUTINE

		ROUTINE _050_StepControl 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'MIXER.DISCHARGE:01.01.01$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.SIMULATE.RETURN$'$N"
				    "Function=$'SIMULATE.RETURN$'$N"
				    "";
				N: XIC(cSETUP.SIMULATION.Enabled)XIC(cSETUP.SIMULATION.PHASE)RET();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.STEPCTRL.IDLE$'$N"
				    "Function=$'STEP.CONTROL.IDE$'$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,1)MOV(2000,Phase.STEP_INDEX_GOTO);
				RC: "Template=$'PHASE.PHASE.MIXER.DISCHARGE$'$N"
				    "Function=$'RUNG.STEPCONTROL.INITIAL.RECORDSTEP$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,2000)GRT(Phase.STEP_TMR.CurrentStepIndex.ACC,Phase.STEP_TMR.RECORD.PRE)MOV(3000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,3000)XIC(Phase.STAT.PERMISSIVE)MOV(4000,Phase.STEP_INDEX_GOTO);
				RC: "Just Wait for a delay, this will allow mixer to wind down if we got ready bit during hold-mix$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,4000)GRT(Phase.STEP_TMR.CurrentStepIndex.ACC,Phase.STEP_TMR.INITIALIZE.PRE)MOV(5000,Phase.STEP_INDEX_GOTO);
				RC: "Add a timer for time-out alarm$N"
				    "This would indicate to them that we never saw Ack from mixer that transfer has begun$N"
				    "";
				N: EQU(Phase.STEP_INDEX,5000)XIC(TransferRunning.STAT.ON)MOV(5010,Phase.STEP_INDEX_GOTO);
				RC: "Transfer complete$N"
				    "";
				N: [XIC(TransferComplete.STAT.ON) OTL(Phase.STAT.COMPLETE) ,XIC(Phase.STATE.RUNNING) EQU(Phase.STEP_INDEX,5010) XIC(Phase.STAT.COMPLETE) MOV(5020,Phase.STEP_INDEX_GOTO) ];
				RC: "Wait 90 seconds for transfer valve to close$N"
				    "NOTE:$N"
				    "Replace with valve closed feedback when available.";
				N: EQU(Phase.STEP_INDEX,5020)[TON(Phase.TMR[0],?,?) ,XIC(Phase.TMR[0].DN) MOV(6000,Phase.STEP_INDEX_GOTO) ];
				RC: "Wait for Ack from Mixer$N"
				    "or wait for a max time$N"
				    "$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,6000)GRT(Phase.STEP_TMR.CurrentStepIndex.ACC,Phase.STEP_TMR.SETTLE.PRE)MOV(10000,Phase.STEP_INDEX_GOTO);
				RC: "Template=$'PHASE.PHASE.MIXER.DISCHARGE$'$N"
				    "Function=$'RUNG.STEPCONTROL.COMPLETE$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)EQU(Phase.STEP_INDEX,10000)OTE(Phase.STAT.RUNNING_COMPLETE);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.STEPCTRL.SECTION.HOLDING$'$N"
				    "Function=$'STEP.CONTROL.SECTION.HOLDING$'$N"
				    "";
				N: NOP();
				RC: "Template=$'PHASE.PHASE.MIXER.DISCHARGE$'$N"
				    "Function=$'RUNG.STEPCONTROL.INITIAL.RECORDSTEP$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.HOLDING)EQU(Phase.STEP_INDEX,2000)GRT(Phase.STEP_TMR.CurrentStepIndex.ACC,Phase.STEP_TMR.RECORD.PRE)MOV(3000,Phase.STEP_INDEX_GOTO);
				RC: "Template=$'PHASE.PHASE.MIXER.DISCHARGE$'$N"
				    "Function=$'RUNG.STEPCONTROL.HOLDING.COMPLETE$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.HOLDING)OTE(Phase.STAT.HOLDING_COMPLETE);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.STEPCTRL.SECTION.RESTARTING$'$N"
				    "Function=$'STEP.CONTROL.SECTION.RESTARTING$'$N"
				    "";
				N: NOP();
				RC: "Template=$'PHASE.PHASE.MIXER.DISCHARGE$'$N"
				    "Function=$'RUNG.STEPCONTROL.RESTARTING.COMPLETE$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.RESTARTING)OTE(Phase.STAT.RESTARTING_COMPLETE);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.STEPCTRL.SECTION.STOPPING$'$N"
				    "Function=$'STEP.CONTROL.SECTION.STOPPING$'$N"
				    "";
				N: NOP();
				N: XIC(Phase.STATE.Oneshot.Stopping)MOV(10000,Phase.STEP_INDEX_GOTO);
				RC: "Template=$'PHASE.PHASE.MIXER.DISCHARGE$'$N"
				    "Function=$'RUNG.STEPCONTROL.STOPPING.COMPLETE$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.STOPPING)EQU(Phase.STEP_INDEX,10000)OTE(Phase.STAT.STOPPING_COMPLETE);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.STEPCTRL.SECTION.ABORTING$'$N"
				    "Function=$'STEP.CONTROL.SECTION.ABORTING$'$N"
				    "";
				N: NOP();
				RC: "Template=$'PHASE.PHASE.MIXER.DISCHARGE$'$N"
				    "Function=$'RUNG.STEPCONTROL.ABORTING$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.Oneshot.Aborting)MOV(10000,Phase.STEP_INDEX_GOTO);
				N: XIC(Phase.STATE.ABORTING)EQU(Phase.STEP_INDEX,10000)OTE(Phase.STAT.ABORTING_COMPLETE);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.STEPCTRL.SECTION.RESET$'$N"
				    "Function=$'STEP.CONTROL.SECTION.RESET$'$N"
				    "";
				N: NOP();
				RC: "Template=$'PHASE.PHASE.MIXER.DISCHARGE$'$N"
				    "Function=$'RUNG.STEPCONTROL.RESET$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.Oneshot.Idle)OTU(Phase.STAT.COMPLETE)MOV(0,Phase.STEP_INDEX_GOTO_ON_RESTART);
				N: XIC(Phase.STATE.IDLE)OTU(Phase.STAT.COMPLETE);
		END_ROUTINE

		ROUTINE _110_ControlModule 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'MIXER.DISCHARGE:01.01.01$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.SIMULATE.RETURN$'$N"
				    "Function=$'SIMULATE.RETURN$'$N"
				    "";
				N: XIC(cSETUP.SIMULATION.Enabled)XIC(cSETUP.SIMULATION.PHASE)RET();
				RC: "Template=$'PHASE.PHASE.MIXER.DISCHARGE$'$N"
				    "Function=$'RUNG.CONTROLMODULE.AUTORUN.WARNING$'$N"
				    "[Description]$N"
				    "[Note]$N"
				    "";
				N: XIC(Phase.STATE.RUNNING)LIM(5000,Phase.STEP_INDEX,5010)OTE(AutoRunTransferReady);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.CONTROLMODULE.RESET.CM$'$N"
				    "Function=$'CONTROLMODULE.RESET.CM$'$N"
				    "";
				N: [XIC(Phase.CMD.START) ,XIC(Phase.CMD.RESTART) ]NOP();
		END_ROUTINE

		ROUTINE _120_PermissiveFaultAndMessaging 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'MIXER.DISCHARGE:01.01.01$'$N"
				    "";
				N: NOP();
				RC: "$N"
				    "";
				N: [MOV(0,Phase.MSG.PERM) ,XIO(MixerRemote.STAT.ON) MOV(1,Phase.MSG.PERM) ,XIC(MixerInterlocked.STAT.ON) MOV(2,Phase.MSG.PERM) ,XIO(MixerCommOk.STAT.ON) MOV(3,Phase.MSG.PERM) ,XIO(TransferReady.STAT.ON) MOV(4,Phase.MSG.PERM) ,EQU(Phase.MSG.PERM,0) OTE(Phase.STAT.PERMISSIVE) ];
				RC: "$N"
				    "";
				N: [XIC(Phase.STATE.RUNNING) ,XIC(Phase.STATE.RESTARTING) ]EQU(Phase.MSG.FAULT,0)[XIC(EStop.STAT.FAULT) MOV(21,Phase.MSG.FAULT) ,XIO(MixerRemote.STAT.ON) MOV(22,Phase.MSG.FAULT) ,XIC(MixerInterlocked.STAT.ON) MOV(23,Phase.MSG.FAULT) ,XIO(MixerCommOk.STAT.ON) MOV(24,Phase.MSG.FAULT) ,XIC(cSETUP.SIMULATION.Enabled) XIC(cSETUP.SIMULATION.PHASE) MOV(0,Phase.MSG.FAULT) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.MESSAGE$'$N"
				    "Function=$'STATUS.MESSAGE$'$N"
				    "";
				N: [MOV(0,Phase.MSG.MSG) ,XIC(Phase.STAT.BYPASS) XIO(Phase.STEP.RECORD) MOV(61,Phase.MSG.MSG) ,XIC(Phase.STAT.BYPASS) XIC(Phase.STEP.RECORD) MOV(62,Phase.MSG.MSG) ,XIC(Phase.STATE.HELD) XIO(Phase.STAT.FAULTED) MOV(63,Phase.MSG.MSG) ];
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.MESSAGE.UNIQUE$'$N"
				    "Function=$'STATUS.MESSAGE.UNIQUE$'$N"
				    "";
				N: MakeMessageNumberGloballyUnique(AOI.Message,Phase.ID,Phase.MSG);
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.MESSAGE.STATUS$'$N"
				    "Function=$'MESSAGE$'$N"
				    "";
				N: [LIM(2000,Phase.STEP_INDEX,3000) NEQ(Phase.MSG.PERM,0) MOV(Phase.MSG.PERM,Phase.MSG.MSG) ,GEQ(Phase.STEP_INDEX,3000) NEQ(Phase.MSG.FAULT,0) MOV(Phase.MSG.FAULT,Phase.MSG.MSG) ,EQU(Phase.MSG.FAULT,0) EQU(Phase.MSG.PERM,0) ONS(Phase.MSG.OS.1) CLR(Phase.MSG.MSG) ];
		END_ROUTINE

		ROUTINE _130_Alarming 
				RC: "Type=$'PHASE$'$N"
				    "Template=$'MIXER.DISCHARGE:01.01.01$'$N"
				    "";
				N: NOP();
				RC: "Template=$'RUNG.TEMPLATE.STANDARD.PHASE.ALARM.FAULT$'$N"
				    "Function=$'ALARM.FAULT$'$N"
				    "";
				N: [XIC(Phase.STAT.FAULTED) OTE(Phase.ALARM[0].ACTIVE) ,AlarmControl(AOI.AlarmControl[0],Phase.ALARM[0],OIT.UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM
