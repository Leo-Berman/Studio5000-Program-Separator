	PROGRAM Alarms (Description := "Alarm routine$NCooresponds to cALARM and cXXX.ALARM tags",
	                MAIN := "_00_ALARM_MAIN",
	                MODE := 0,
	                DisableFlag := 0,
	                UseAsFolder := 0)
		TAG
			CommonAlarmControl : AlarmControl[32]  := [[3],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1]];
		END_TAG

		ROUTINE _00_ALARM_MAIN (Description := "Main subroutine, contains JSR$'s to other routines in the program, typically in order of appearance in tree.")
				RC: "===================================================================$N"
				    "ALARMS  --  Generated By ControlBuilder, Copyright EZSoft, Inc. 2015$N"
				    "===================================================================$N"
				    "$N"
				    "==============================================================================$N"
				    "Revision History$N"
				    "==============================================================================$N"
				    "Rev$TDate$T$TDescription$T$T$T$TAuthor$N"
				    "==============================================================================     $N"
				    "1.0$T5/5/2010$TFusionFX Template Build$T$T$T$TBrian DeKorte$N"
				    "2.0$T7/1/2013$TFusionFX Template$T$T$T$TTerry Myers";
				N: NOP();
				N: [XIC(S:FS) JSR(_01_ALARM_FIRST_SCAN,0) ,JSR(_21_ALARM_HORN,0) ,JSR(_26_ALARM_UNIT,0) ,JSR(_22_ALARM_DI,0) ,JSR(_23_ALARM_AI,0) ,JSR(_24_ALARM_DO,0) ,JSR(_24_ALARM_AO,0) ,JSR(_25_ALARM_PHASE,0) ,JSR(_27_ALARM_SYSTEM,0) ];
				RC: "Record the last scan time of this program";
				N: GSV(Program,Alarms,LastScanTime,cCOMMON.SCAN_TIMES[2]);
		END_ROUTINE

		ROUTINE _01_ALARM_FIRST_SCAN (Description := "This routine is scanned only on the first scan of logic on power-up or program-to-run mode transition.")
				RC: "===================================================================$N"
				    "FIRST SCAN LOGIC$N"
				    "===================================================================$N"
				    "$N"
				    "This routine contains logic that will be scanned on power-up and also on transition from program to run mode.$N"
				    "As such, all code in this routine will be scanned exactly one time.$N"
				    "$N"
				    "Assign UNIT_INDEX to each alarm that should be reported to the database.$N"
				    "The UNIT_INDEX is a pointer to the cUNIT tag and associates an alarm to a unit so that it can be joined into a batch report$N"
				    "$N"
				    "pNote: if an alarm needs to appear in the batch report of more than one unit, that alarm should actually be included twice in the program";
				N: ControlBuilder_Insert(EZSoft.ControlBuilder.Insert,EZSoft.ControlBuilder.Types.OperatorInterfaceTerminal._03_ALARMS_FIRST_SCAN,EZSoft.ControlBuilder.Options.Code.Instanced,0);
		END_ROUTINE

		ROUTINE _21_ALARM_HORN 
				N: NOP();
				RC: "If alarm silence is held in for 5 seconds, the unack alarms array is cleared.$N"
				    "";
				N: XIC(cCOMMON.SILENCE)[MOV(5000,cCOMMON.SilenceTimer.PRE) TON(cCOMMON.SilenceTimer,?,?) ,XIC(cCOMMON.SilenceTimer.DN) OTU(cCOMMON.SILENCE) ];
				N: [XIC(dOIT[0].HAS_UNACK_ALARM) ,XIC(dOIT[1].HAS_UNACK_ALARM) ,XIC(dOIT[2].HAS_UNACK_ALARM) ,XIC(dOIT[3].HAS_UNACK_ALARM) ,XIC(dOIT[4].HAS_UNACK_ALARM) ,XIC(dOIT[5].HAS_UNACK_ALARM) ,XIC(dOIT[6].HAS_UNACK_ALARM) ,XIC(dOIT[7].HAS_UNACK_ALARM) ,XIC(dOIT[8].HAS_UNACK_ALARM) ,XIC(dOIT[9].HAS_UNACK_ALARM) ,XIC(dOIT[10].HAS_UNACK_ALARM) ]OTE(cCOMMON.HORN_ACTIVATE);
		END_ROUTINE

		ROUTINE _22_ALARM_DI 
				RC: "=======================================================$N"
				    "DISCRETE ALARMS$N"
				    "=======================================================$N"
				    "$N"
				    "$N"
				    "The purpose of this routine is to map doscrete alarm conditions into the active alarm bit for each alarm.$N"
				    "This serves as an interface layer between analog logic and alarm logic.  $N"
				    "$N"
				    "the JSR into _99_ALARM_CONTROL handles the state of the alarm. It can be in a new/unack/acked/off state.$N"
				    " $N"
				    "If used, the dwell timer (.DWELL.TT) keeps the alarm active for a $Qminimum duration$Q, so external devices$N"
				    "(HMI / SCADA) have sufficient time to detect and log the alarm.$N"
				    "$N"
				    "------------------------------------------------------------------------------------------------------------$N"
				    "$N"
				    "ALARM[0] - Fault Condition$N"
				    "$N"
				    "";
				N: ControlBuilder_Insert(EZSoft.ControlBuilder.Insert,EZSoft.ControlBuilder.Types.DiscreteInput._22_ALARM_DISC,EZSoft.ControlBuilder.Options.Code.Instanced,0);
		END_ROUTINE

		ROUTINE _23_ALARM_AI 
				RC: "===================================================================$N"
				    "ANALOG ALARMS  --  Generated By ControlBuilder, Copyright EZSoft, Inc. 2015$N"
				    "===================================================================$N"
				    "$N"
				    "The purpose of this routine is to map analog alarm conditions into the active alarm bit for each alarm.$N"
				    "This serves as an interface layer between analog logic and alarm logic.  $N"
				    "$N"
				    "the JSR into _99_ALARM_CONTROL handles the state of the alarm. It can be in a new/unack/acked/off state.$N"
				    "$N"
				    "The typical analog alarm logic is, when alarm is enabled, and the compare bit is set, then set the alarm bit.$N"
				    "enable bits may be set in this routine or in analog compare, or in their own routine$N"
				    "if applicable.  The compare bits are set in Analog program in routine _33_AI_COMPARE.$N"
				    " $N"
				    "If used, the dwell timer (.DWELL.TT) keeps the alarm active for a $Qminimum duration$Q, so external devices $N"
				    "(HMI / SCADA) have sufficient time to detect and log the alarm.$N"
				    " $N"
				    "------------------------------------------------------------------------------------------------------------$N"
				    "$N"
				    "ALARM[0] - HiHi$N"
				    "ALARM[1]-  Hi$N"
				    "ALARM[2] - Lo$N"
				    "ALARM[3] - LoLo$N"
				    "ALARM[4] - Lo Rate$N"
				    "ALARM[5] - LoLo Rate$N"
				    "ALARM[6] - Faulted$N"
				    "$N"
				    "";
				N: ControlBuilder_Insert(EZSoft.ControlBuilder.Insert,EZSoft.ControlBuilder.Types.AnalogInput._23_ALARM_ANAL,EZSoft.ControlBuilder.Options.Code.Instanced,0);
		END_ROUTINE

		ROUTINE _24_ALARM_AO 
				RC: "=====================================================================$N"
				    "ANALOG OUTPUT ALARMS  --  Generated By ControlBuilder, Copyright EZSoft, Inc. 2015$N"
				    "=====================================================================$N"
				    "$N"
				    "The purpose of this routine is to map analog output deviation alarm conditions into the active alarm bit.$N"
				    "$N"
				    "the JSR into _99_ALARM_CONTROL handles the state of the alarm. It can be in a new/unack/acked/off state.$N"
				    "$N"
				    "The typical AO alarm logic is, when the deviation status bit is set, set the alarm bit.  $N"
				    "Each AO alarm should occupy one rung of ladder logic for good organization, $N"
				    "and they are listed in the order of ascending cAO array index. $N"
				    "The deviation status bits are set in the Analog Outputs program in routine _48_AO_DEVIATION.$N"
				    " $N"
				    "If used, the dwell timer (.DWELL.TT) keeps the alarm active for a $Qminimum duration$Q, so external devices $N"
				    "(HMI / SCADA) have sufficient time to detect and log the alarm.$N"
				    "$N"
				    "------------------------------------------------------------------------------------------------------------$N"
				    "ALARM[0] - Major Deviation $N"
				    "ALARM[1] - Minor Deviation $N"
				    "ALARM[2] - Unstable Deviation ";
				N: ControlBuilder_Insert(EZSoft.ControlBuilder.Insert,EZSoft.ControlBuilder.Types.AnalogOutput._24_ALARM_AO,EZSoft.ControlBuilder.Options.Code.Instanced,0);
		END_ROUTINE

		ROUTINE _24_ALARM_DO 
				RC: "=====================================================================$N"
				    "DISCRETE OUTPUT ALARMS  --  Generated By ControlBuilder, Copyright EZSoft, Inc. 2015$N"
				    "=====================================================================$N"
				    "$N"
				    "The purpose of this routine is to map device alarm conditions into the active alarm$N"
				    "$N"
				    "The typical device alarm logic is, when the device fault status bit is set, set the alarm bit.  $N"
				    "Each device alarm should occupy one rung of ladder logic for good organization, $N"
				    "and they are listed in the order of ascending cDO array index. $N"
				    "The device status fault bits are set in Device program in routine _56_DO_FAULT.$N"
				    "$N"
				    " $N"
				    "the JSR into _99_ALARM_CONTROL handles the state of the alarm. It can be in a new/unack/acked/off state.$N"
				    " $N"
				    "If used, the dwell timer (.DWELL.TT) keeps the alarm active for a $Qminimum duration$Q, so external devices $N"
				    "(HMI / SCADA) have sufficient time to detect and log the alarm.$N"
				    "$N"
				    "------------------------------------------------------------------------------------------------------------$N"
				    "$N"
				    "ALARM[0] - Fault Condition$N"
				    "$N"
				    "$N"
				    "";
				N: ControlBuilder_Insert(EZSoft.ControlBuilder.Insert,EZSoft.ControlBuilder.Types.DiscreteOutput._24_ALARM_DO,EZSoft.ControlBuilder.Options.Code.Instanced,0);
		END_ROUTINE

		ROUTINE _25_ALARM_PHASE 
				RC: "===================================================================$N"
				    "PHASE ALARMS  --  Generated By ControlBuilder, Copyright EZSoft, Inc. 2015$N"
				    "===================================================================$N"
				    "$N"
				    "The purpose of this routine is to map phase failure/alarm conditions into the active alarm array.  $N"
				    "This serves as an interface layer between phase logic and alarm logic.  $N"
				    "Active alarms are processed by the logic in the routine _21_ALARM_COM.$N"
				    "$N"
				    "The alarm array cALARMS.ACTIVE[255] contains 256 16-Bit integer words.  Each bit in each word represents$N"
				    "one alarm bit.  The phase alarms shall occupy words 150 through 199 of the active alarm array.  $N"
				    "$N"
				    "Typically there are 8 alarm bits in the alarm array devoted to each phase.  $N"
				    "When there is a phase failure, the phase logic will write a message code $N"
				    "into the MSG.FAULT tag of the phase datastructure.  $N"
				    "Each different fault code for a given phase will energize $N"
				    "a different alarm bit out of the 8 bits dedicated to that phase.$N"
				    "$N"
				    "The phase failure codes are set in Phase\_66_PHASE_FAULTS$N"
				    " $N"
				    "If used, the dwell timer (.DWELL.TT) keeps the alarm active for a $Qminimum duration$Q, so external devices $N"
				    "(HMI / SCADA) have sufficient time to detect and log the alarm.$N"
				    "$N"
				    "------------------------------------------------------------------------------------------------------------$N"
				    "$N"
				    "";
				N: ControlBuilder_Insert(EZSoft.ControlBuilder.Insert,EZSoft.ControlBuilder.Types.Phase._25_ALARM_PHASE,EZSoft.ControlBuilder.Options.Code.Instanced,0);
		END_ROUTINE

		ROUTINE _26_ALARM_UNIT 
				RC: "===================================================================$N"
				    "UNIT ALARMS  --  Generated By ControlBuilder, Copyright EZSoft, Inc. 2015$N"
				    "===================================================================$N"
				    "$N"
				    "The purpose of this routine is to map unit failure/alarm conditions into the active alarm array.  $N"
				    "This serves as an interface layer between unit logic and alarm logic.  $N"
				    "Active alarms are processed by the logic in the routine _21_ALARM_COM.$N"
				    "$N"
				    "The alarm array cALARMS.ACTIVE[255] contains 256 16-Bit integer words.  Each bit in each word represents$N"
				    "one alarm bit.  The unit alarms shall occupy words 200 through 249 of the active alarm array.  $N"
				    "$N"
				    "Typically there are 64 alarm bits in the alarm array devoted to each unit.  $N"
				    "When there is a unit failure, the unit logic will write a message code $N"
				    "into the MSG.FAULT tag of the unit datastructure.  $N"
				    "Each different fault code for a given unit will energize $N"
				    "a different alarm bit out of the 64 bits dedicated to that unit.$N"
				    "$N"
				    "The unit failure codes are set in Unit program in the routine, _96_UNIT_FAULT$N"
				    "$N"
				    "$N"
				    "------------------------------------------------------------------------------------------------------------$N"
				    "$N"
				    "";
				N: NOP();
		END_ROUTINE

		ROUTINE _27_ALARM_SYSTEM 
				N: NOP();
				RC: "Transaction Manager Communication Timeout";
				N: [XIC(cCOMMON.WATCHDOG_TIMER[0].DN) OTE(cCOMMON.ALARM[0].ACTIVE) ,AlarmControl(CommonAlarmControl[0],cCOMMON.ALARM[0],dOIT[0].UNACK_ALARMS_TEMP,cCOMMON.SILENCE) ];
		END_ROUTINE

		CHILD_PROGRAMS
		END_CHILD_PROGRAMS

	END_PROGRAM
